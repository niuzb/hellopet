// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errcode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* ol_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* db_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* sw_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* lg_errcode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* acc_errcode_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_errcode_2eproto() {
  protobuf_AddDesc_errcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "errcode.proto");
  GOOGLE_CHECK(file != NULL);
  ol_errcode_t_descriptor_ = file->enum_type(0);
  db_errcode_t_descriptor_ = file->enum_type(1);
  sw_errcode_t_descriptor_ = file->enum_type(2);
  lg_errcode_t_descriptor_ = file->enum_type(3);
  acc_errcode_t_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_errcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_errcode_2eproto() {
}

void protobuf_AddDesc_errcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rerrcode.proto*\254\021\n\014ol_errcode_t\022\022\n\014oler"
    "r_decode\020\241\215\006\022\027\n\021olerr_invalid_req\020\242\215\006\022\031\n"
    "\023olerr_invalid_dbrsp\020\243\215\006\022\025\n\017olerr_msg_pa"
    "ram\020\244\215\006\022\027\n\021olerr_invalid_msg\020\245\215\006\022\027\n\021oler"
    "r_system_busy\020\246\215\006\022\027\n\021olerr_multi_login\020\261"
    "\333\006\022\031\n\023olerr_role_creating\020\262\333\006\022\030\n\022olerr_n"
    "o_such_role\020\263\333\006\022\035\n\027olerr_can_transfer_ne"
    "xt\020\264\333\006\022\034\n\026olerr_not_enough_level\020\265\333\006\022\036\n\030"
    "olerr_not_enough_diamond\020\266\333\006\022\033\n\025olerr_no"
    "t_enough_coin\020\267\333\006\022\036\n\030olerr_not_enough_ex"
    "ploit\020\270\333\006\022\036\n\030olerr_not_enough_stamina\020\271\333"
    "\006\022\037\n\031olerr_buy_times_logic_err\020\272\333\006\022$\n\036ol"
    "err_not_enough_explore_times\020\273\333\006\022\036\n\030oler"
    "r_nofound_explore_id\020\274\333\006\022\034\n\026olerr_ppve_t"
    "imes_limit\020\275\333\006\022\035\n\027olerr_not_enough_vip_l"
    "v\020\276\333\006\022\027\n\021olerr_be_kick_off\020\224\334\006\022\024\n\016olerr_"
    "token_id\020\225\334\006\022$\n\036olerr_need_complete_logi"
    "n_proc\020\226\334\006\022\022\n\014olerr_assert\020\227\334\006\022\033\n\025olerr_"
    "nofound_item_id\020\312\251\007\022\031\n\023olerr_exist_item_"
    "id\020\313\251\007\022\033\n\025olerr_not_enough_item\020\314\251\007\022\027\n\021o"
    "lerr_invalid_pos\020\315\251\007\022\025\n\017olerr_exist_pos\020"
    "\316\251\007\022\033\n\025olerr_invalid_item_id\020\317\251\007\022\030\n\022oler"
    "r_invalid_hole\020\320\251\007\022&\n olerr_not_enough_r"
    "eset_gam_times\020\321\251\007\022\035\n\027olerr_open_hole_se"
    "q_err\020\322\251\007\022\032\n\024olerr_not_enough_pos\020\323\251\007\022\035\n"
    "\027olerr_warm_sport_lv_max\020\324\251\007\022\033\n\025olerr_ma"
    "nor_opt_error\020\325\251\007\022\036\n\030olerr_not_clear_man"
    "or_cd\020\326\251\007\022!\n\033olerr_enter_manor_times_max"
    "\020\327\251\007\022\037\n\031olerr_old_shop_items_list\020\336\251\007\022\"\n"
    "\034olerr_invalid_buy_item_index\020\337\251\007\022\036\n\030ole"
    "rr_has_buy_item_index\020\340\251\007\022!\n\033olerr_has_s"
    "ame_attr_in_item\020\350\251\007\022\034\n\026olerr_not_found_"
    "reward\020\351\251\007\022\033\n\025olerr_item_cannot_del\020\352\251\007\022"
    "\034\n\026olerr_item_cannot_sell\020\353\251\007\022!\n\033olerr_n"
    "ot_enough_pvai_times\020\250\261\007\022\035\n\027olerr_not_cl"
    "ear_pvai_cd\020\251\261\007\022 \n\032olerr_not_enough_pvp_"
    "times\020\252\261\007\022\034\n\026olerr_cannot_pvai_self\020\253\261\007\022"
    "!\n\033olerr_not_enough_cdef_times\020\254\261\007\022\030\n\022ol"
    "err_cdef_timeout\020\255\261\007\022 \n\032olerr_start_batt"
    "le_timeout\020\256\261\007\022\"\n\034olerr_nofound_spec_map"
    "_index\020\220\271\007\022\"\n\034olerr_enter_spec_map_num_m"
    "ax\020\221\271\007\022$\n\036olerr_instance_not_enough_star"
    "\020\222\271\007\022\035\n\027olerr_daily_task_accept\020\370\300\007\022!\n\033o"
    "lerr_daily_task_not_accept\020\371\300\007\022%\n\037olerr_"
    "accept_daily_task_timeout\020\372\300\007\022&\n olerr_a"
    "ccept_daily_task_max_star\020\373\300\007\022)\n#olerr_f"
    "inish_daily_task_times_limit\020\374\300\007\022!\n\033oler"
    "r_daily_task_id_invalid\020\375\300\007\022!\n\033olerr_dai"
    "ly_task_not_finish\020\376\300\007\022\035\n\027olerr_daily_ta"
    "sk_finish\020\377\300\007\022\035\n\027olerr_not_enough_active"
    "\020\200\301\007\022 \n\032olerr_no_daily_goal_reward\020\201\301\007\022#"
    "\n\035olerr_daily_task_all_max_star\020\202\301\007\022!\n\033o"
    "lerr_today_reward_has_been\020\334\301\007\022\037\n\031olerr_"
    "activity_not_finish\020\340\310\007\022\036\n\030olerr_activit"
    "y_not_found\020\341\310\007\022!\n\033olerr_lottery_opt_log"
    "ic_err\020\352\310\007\022\032\n\024olerr_player_offline\020\310\320\007*\350"
    "\004\n\014db_errcode_t\022\016\n\ndberr_succ\020\000\022\021\n\013dberr"
    "_dbmem\020\251\242\014\022\021\n\013dberr_dbsys\020\252\242\014\022\021\n\013dberr_d"
    "bnet\020\253\242\014\022\022\n\014dberr_no_cmd\020\254\242\014\022\024\n\016dberr_pr"
    "otolen\020\255\242\014\022\021\n\013dberr_range\020\256\242\014\022\023\n\rdberr_s"
    "etflag\020\257\242\014\022\020\n\ndberr_data\020\260\242\014\022\020\n\ndberr_en"
    "um\020\261\242\014\022\030\n\022dberr_sendprotolen\020\262\242\014\022\022\n\014dber"
    "r_dbdata\020\263\242\014\022\023\n\rdberr_netsend\020\264\242\014\022\023\n\rdbe"
    "rr_netrecv\020\265\242\014\022\025\n\017dberr_keyexists\020\266\242\014\022\027\n"
    "\021dberr_keynotfound\020\267\242\014\022\024\n\016dberr_noupdate"
    "\020\270\242\014\022\027\n\021dberr_net_timeout\020\271\242\014\022\027\n\021dberr_f"
    "lowcontrol\020\272\242\014\022\017\n\tdberr_md5\020\275\242\014\022\024\n\016dberr"
    "_password\020\217\243\014\022\025\n\017dberr_uidexists\020\220\243\014\022\026\n\020"
    "dberr_uidnofound\020\221\243\014\022\031\n\023dberr_role_notfo"
    "und\020\321\350\014\022\027\n\021dberr_role_exists\020\322\350\014\022\036\n\030dber"
    "r_crtrole_time_limit\020\323\350\014\022\037\n\031dberr_duplic"
    "ated_nickname\020\324\350\014*W\n\014sw_errcode_t\022\022\n\014swe"
    "rr_decode\020\341\247\022\022\027\n\021swerr_invalid_req\020\343\247\022\022\032"
    "\n\024swerr_not_enough_res\020\342\247\022*\234\002\n\014lg_errcod"
    "e_t\022\022\n\014lgerr_decode\020\201\265\030\022\027\n\021lgerr_invalid"
    "_req\020\202\265\030\022\031\n\023lgerr_invalid_dbrsp\020\203\265\030\022\037\n\031l"
    "gerr_multi_check_session\020\351\274\030\022\035\n\027lgerr_se"
    "ssion_unchecked\020\352\274\030\022&\n lgerr_qurey_role_"
    "list_uncomplete\020\353\274\030\022!\n\033lgerr_player_role"
    "_num_limit\020\354\274\030\022\030\n\022lgerr_no_such_role\020\355\274\030"
    "\022\037\n\031lgerr_name_has_dirty_word\020\356\274\030*\300\007\n\rac"
    "c_errcode_t\022\022\n\014acc_err_base\020\240\302\036\022\027\n\021acc_e"
    "rr_curl_init\020\242\302\036\022\034\n\026acc_err_curl_write_e"
    "rr\020\267\302\036\022\033\n\025acc_err_curl_read_err\020\272\302\036\022\032\n\024a"
    "cc_err_auth_timeout\020\274\302\036\022\030\n\022acc_err_syste"
    "m_err\020\211\312\036\022\034\n\026acc_err_invalid_params\020\212\312\036\022"
    "\034\n\026acc_err_invalid_action\020\213\312\036\022\031\n\023acc_err"
    "_system_busy\020\214\312\036\022\032\n\024acc_err_invalid_sign"
    "\020\216\312\036\022\031\n\023acc_err_req_timeout\020\217\312\036\022\030\n\022acc_e"
    "rr_much_wrong\020\222\312\036\022 \n\032acc_err_passwd_alre"
    "ady_set\020\223\312\036\022\036\n\030acc_err_wrong_old_passwd\020"
    "\224\312\036\022\032\n\024acc_err_udid_not_reg\020\225\312\036\022&\n acc_e"
    "rr_check_verify_code_failed\020\226\312\036\022\033\n\025acc_e"
    "rr_check_uid_err\020\227\312\036\022%\n\037acc_err_check_us"
    "er_email_failed\020\230\312\036\022\031\n\023acc_err_check_ema"
    "il\020\231\312\036\022\025\n\017acc_err_sys_err\020\232\312\036\022\033\n\025acc_err"
    "_email_existed\020\233\312\036\022\034\n\026acc_err_email_bind"
    "_err\020\234\312\036\022\026\n\020acc_err_send_err\020\235\312\036\022\025\n\017acc_"
    "err_pwd_err\020\357\312\036\022\031\n\023acc_err_not_existed\020\361"
    "\312\036\022\034\n\026acc_err_add_openid_err\020\362\312\036\022\027\n\021acc_"
    "err_login_err\020\364\312\036\022\026\n\020acc_err_bind_err\020\365\312"
    "\036\022\032\n\024acc_err_getthird_err\020\366\312\036\022\031\n\023acc_err"
    "_getbind_err\020\367\312\036\022\030\n\022acc_err_verify_err\020\370"
    "\312\036\022\026\n\020acc_err_udid_err\020\371\312\036\022\035\n\027acc_err_se"
    "ssion_illegal\020\213\344\036\022\021\n\013acc_err_max\020\277\317$", 4196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errcode.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_errcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_errcode_2eproto {
  StaticDescriptorInitializer_errcode_2eproto() {
    protobuf_AddDesc_errcode_2eproto();
  }
} static_descriptor_initializer_errcode_2eproto_;

const ::google::protobuf::EnumDescriptor* ol_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ol_errcode_t_descriptor_;
}
bool ol_errcode_t_IsValid(int value) {
  switch(value) {
    case 100001:
    case 100002:
    case 100003:
    case 100004:
    case 100005:
    case 100006:
    case 110001:
    case 110002:
    case 110003:
    case 110004:
    case 110005:
    case 110006:
    case 110007:
    case 110008:
    case 110009:
    case 110010:
    case 110011:
    case 110012:
    case 110013:
    case 110014:
    case 110100:
    case 110101:
    case 110102:
    case 110103:
    case 120010:
    case 120011:
    case 120012:
    case 120013:
    case 120014:
    case 120015:
    case 120016:
    case 120017:
    case 120018:
    case 120019:
    case 120020:
    case 120021:
    case 120022:
    case 120023:
    case 120030:
    case 120031:
    case 120032:
    case 120040:
    case 120041:
    case 120042:
    case 120043:
    case 121000:
    case 121001:
    case 121002:
    case 121003:
    case 121004:
    case 121005:
    case 121006:
    case 122000:
    case 122001:
    case 122002:
    case 123000:
    case 123001:
    case 123002:
    case 123003:
    case 123004:
    case 123005:
    case 123006:
    case 123007:
    case 123008:
    case 123009:
    case 123010:
    case 123100:
    case 124000:
    case 124001:
    case 124010:
    case 125000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* db_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_errcode_t_descriptor_;
}
bool db_errcode_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 201001:
    case 201002:
    case 201003:
    case 201004:
    case 201005:
    case 201006:
    case 201007:
    case 201008:
    case 201009:
    case 201010:
    case 201011:
    case 201012:
    case 201013:
    case 201014:
    case 201015:
    case 201016:
    case 201017:
    case 201018:
    case 201021:
    case 201103:
    case 201104:
    case 201105:
    case 210001:
    case 210002:
    case 210003:
    case 210004:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* sw_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sw_errcode_t_descriptor_;
}
bool sw_errcode_t_IsValid(int value) {
  switch(value) {
    case 300001:
    case 300002:
    case 300003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* lg_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lg_errcode_t_descriptor_;
}
bool lg_errcode_t_IsValid(int value) {
  switch(value) {
    case 400001:
    case 400002:
    case 400003:
    case 401001:
    case 401002:
    case 401003:
    case 401004:
    case 401005:
    case 401006:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* acc_errcode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return acc_errcode_t_descriptor_;
}
bool acc_errcode_t_IsValid(int value) {
  switch(value) {
    case 500000:
    case 500002:
    case 500023:
    case 500026:
    case 500028:
    case 501001:
    case 501002:
    case 501003:
    case 501004:
    case 501006:
    case 501007:
    case 501010:
    case 501011:
    case 501012:
    case 501013:
    case 501014:
    case 501015:
    case 501016:
    case 501017:
    case 501018:
    case 501019:
    case 501020:
    case 501021:
    case 501103:
    case 501105:
    case 501106:
    case 501108:
    case 501109:
    case 501110:
    case 501111:
    case 501112:
    case 501113:
    case 504331:
    case 599999:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
