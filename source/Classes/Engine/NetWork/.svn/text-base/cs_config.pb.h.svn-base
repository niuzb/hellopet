// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_config.proto

#ifndef PROTOBUF_cs_5fconfig_2eproto__INCLUDED
#define PROTOBUF_cs_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "cs_battle.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fconfig_2eproto();
void protobuf_AssignDesc_cs_5fconfig_2eproto();
void protobuf_ShutdownFile_cs_5fconfig_2eproto();

class CSRangeInfo;
class CSMonsterInfo_t;
class CSMapMonster_t;
class CSMapMonsterGroup_t;
class CSMapContent_t;
class CSMapContent_t_CSMonsterNum;
class CSMapContentList_t;
class CSMonsterValue_t;
class CSBattlePrepareReq;
class CSBattlePrepareRsp;

// ===================================================================

class CSRangeInfo : public ::google::protobuf::Message {
 public:
  CSRangeInfo();
  virtual ~CSRangeInfo();
  
  CSRangeInfo(const CSRangeInfo& from);
  
  inline CSRangeInfo& operator=(const CSRangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRangeInfo& default_instance();
  
  void Swap(CSRangeInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSRangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRangeInfo& from);
  void MergeFrom(const CSRangeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CSPoint start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline const ::CSPoint& start() const;
  inline ::CSPoint* mutable_start();
  inline ::CSPoint* release_start();
  
  // required .CSPoint end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline const ::CSPoint& end() const;
  inline ::CSPoint* mutable_end();
  inline ::CSPoint* release_end();
  
  // @@protoc_insertion_point(class_scope:CSRangeInfo)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* start_;
  ::CSPoint* end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSRangeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterInfo_t : public ::google::protobuf::Message {
 public:
  CSMonsterInfo_t();
  virtual ~CSMonsterInfo_t();
  
  CSMonsterInfo_t(const CSMonsterInfo_t& from);
  
  inline CSMonsterInfo_t& operator=(const CSMonsterInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterInfo_t& default_instance();
  
  void Swap(CSMonsterInfo_t* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterInfo_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterInfo_t& from);
  void MergeFrom(const CSMonsterInfo_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);
  
  // required uint32 speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required bool is_boss = 4;
  inline bool has_is_boss() const;
  inline void clear_is_boss();
  static const int kIsBossFieldNumber = 4;
  inline bool is_boss() const;
  inline void set_is_boss(bool value);
  
  // required .CSRangeInfo body_range = 5;
  inline bool has_body_range() const;
  inline void clear_body_range();
  static const int kBodyRangeFieldNumber = 5;
  inline const ::CSRangeInfo& body_range() const;
  inline ::CSRangeInfo* mutable_body_range();
  inline ::CSRangeInfo* release_body_range();
  
  // required uint32 physical_attack = 6;
  inline bool has_physical_attack() const;
  inline void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 6;
  inline ::google::protobuf::uint32 physical_attack() const;
  inline void set_physical_attack(::google::protobuf::uint32 value);
  
  // required uint32 magic_attack = 7;
  inline bool has_magic_attack() const;
  inline void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 7;
  inline ::google::protobuf::uint32 magic_attack() const;
  inline void set_magic_attack(::google::protobuf::uint32 value);
  
  // required uint32 skill_attack = 8;
  inline bool has_skill_attack() const;
  inline void clear_skill_attack();
  static const int kSkillAttackFieldNumber = 8;
  inline ::google::protobuf::uint32 skill_attack() const;
  inline void set_skill_attack(::google::protobuf::uint32 value);
  
  // required uint32 physical_defence = 9;
  inline bool has_physical_defence() const;
  inline void clear_physical_defence();
  static const int kPhysicalDefenceFieldNumber = 9;
  inline ::google::protobuf::uint32 physical_defence() const;
  inline void set_physical_defence(::google::protobuf::uint32 value);
  
  // required uint32 magic_defence = 10;
  inline bool has_magic_defence() const;
  inline void clear_magic_defence();
  static const int kMagicDefenceFieldNumber = 10;
  inline ::google::protobuf::uint32 magic_defence() const;
  inline void set_magic_defence(::google::protobuf::uint32 value);
  
  // required uint32 skill_defence = 11;
  inline bool has_skill_defence() const;
  inline void clear_skill_defence();
  static const int kSkillDefenceFieldNumber = 11;
  inline ::google::protobuf::uint32 skill_defence() const;
  inline void set_skill_defence(::google::protobuf::uint32 value);
  
  // required uint32 health_point = 12;
  inline bool has_health_point() const;
  inline void clear_health_point();
  static const int kHealthPointFieldNumber = 12;
  inline ::google::protobuf::uint32 health_point() const;
  inline void set_health_point(::google::protobuf::uint32 value);
  
  // required uint32 accurate = 13;
  inline bool has_accurate() const;
  inline void clear_accurate();
  static const int kAccurateFieldNumber = 13;
  inline ::google::protobuf::uint32 accurate() const;
  inline void set_accurate(::google::protobuf::uint32 value);
  
  // required uint32 dodge = 14;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 14;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);
  
  // required uint32 wreck = 15;
  inline bool has_wreck() const;
  inline void clear_wreck();
  static const int kWreckFieldNumber = 15;
  inline ::google::protobuf::uint32 wreck() const;
  inline void set_wreck(::google::protobuf::uint32 value);
  
  // required uint32 parry = 16;
  inline bool has_parry() const;
  inline void clear_parry();
  static const int kParryFieldNumber = 16;
  inline ::google::protobuf::uint32 parry() const;
  inline void set_parry(::google::protobuf::uint32 value);
  
  // required uint32 critical_strike = 17;
  inline bool has_critical_strike() const;
  inline void clear_critical_strike();
  static const int kCriticalStrikeFieldNumber = 17;
  inline ::google::protobuf::uint32 critical_strike() const;
  inline void set_critical_strike(::google::protobuf::uint32 value);
  
  // required uint32 tenacity = 18;
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 18;
  inline ::google::protobuf::uint32 tenacity() const;
  inline void set_tenacity(::google::protobuf::uint32 value);
  
  // required uint32 slay = 19;
  inline bool has_slay() const;
  inline void clear_slay();
  static const int kSlayFieldNumber = 19;
  inline ::google::protobuf::uint32 slay() const;
  inline void set_slay(::google::protobuf::uint32 value);
  
  // required uint32 proficiency = 20;
  inline bool has_proficiency() const;
  inline void clear_proficiency();
  static const int kProficiencyFieldNumber = 20;
  inline ::google::protobuf::uint32 proficiency() const;
  inline void set_proficiency(::google::protobuf::uint32 value);
  
  // required uint32 vision = 21;
  inline bool has_vision() const;
  inline void clear_vision();
  static const int kVisionFieldNumber = 21;
  inline ::google::protobuf::uint32 vision() const;
  inline void set_vision(::google::protobuf::uint32 value);
  
  // required .CSRangeInfo birth = 22;
  inline bool has_birth() const;
  inline void clear_birth();
  static const int kBirthFieldNumber = 22;
  inline const ::CSRangeInfo& birth() const;
  inline ::CSRangeInfo* mutable_birth();
  inline ::CSRangeInfo* release_birth();
  
  // @@protoc_insertion_point(class_scope:CSMonsterInfo_t)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_boss();
  inline void clear_has_is_boss();
  inline void set_has_body_range();
  inline void clear_has_body_range();
  inline void set_has_physical_attack();
  inline void clear_has_physical_attack();
  inline void set_has_magic_attack();
  inline void clear_has_magic_attack();
  inline void set_has_skill_attack();
  inline void clear_has_skill_attack();
  inline void set_has_physical_defence();
  inline void clear_has_physical_defence();
  inline void set_has_magic_defence();
  inline void clear_has_magic_defence();
  inline void set_has_skill_defence();
  inline void clear_has_skill_defence();
  inline void set_has_health_point();
  inline void clear_has_health_point();
  inline void set_has_accurate();
  inline void clear_has_accurate();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_wreck();
  inline void clear_has_wreck();
  inline void set_has_parry();
  inline void clear_has_parry();
  inline void set_has_critical_strike();
  inline void clear_has_critical_strike();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_slay();
  inline void clear_has_slay();
  inline void set_has_proficiency();
  inline void clear_has_proficiency();
  inline void set_has_vision();
  inline void clear_has_vision();
  inline void set_has_birth();
  inline void clear_has_birth();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 type_;
  bool is_boss_;
  ::CSRangeInfo* body_range_;
  ::google::protobuf::uint32 physical_attack_;
  ::google::protobuf::uint32 magic_attack_;
  ::google::protobuf::uint32 skill_attack_;
  ::google::protobuf::uint32 physical_defence_;
  ::google::protobuf::uint32 magic_defence_;
  ::google::protobuf::uint32 skill_defence_;
  ::google::protobuf::uint32 health_point_;
  ::google::protobuf::uint32 accurate_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 wreck_;
  ::google::protobuf::uint32 parry_;
  ::google::protobuf::uint32 critical_strike_;
  ::google::protobuf::uint32 tenacity_;
  ::google::protobuf::uint32 slay_;
  ::google::protobuf::uint32 proficiency_;
  ::google::protobuf::uint32 vision_;
  ::CSRangeInfo* birth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterInfo_t* default_instance_;
};
// -------------------------------------------------------------------

class CSMapMonster_t : public ::google::protobuf::Message {
 public:
  CSMapMonster_t();
  virtual ~CSMapMonster_t();
  
  CSMapMonster_t(const CSMapMonster_t& from);
  
  inline CSMapMonster_t& operator=(const CSMapMonster_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMapMonster_t& default_instance();
  
  void Swap(CSMapMonster_t* other);
  
  // implements Message ----------------------------------------------
  
  CSMapMonster_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMapMonster_t& from);
  void MergeFrom(const CSMapMonster_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);
  
  // required uint32 monster_id = 2;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 monster_id() const;
  inline void set_monster_id(::google::protobuf::uint32 value);
  
  // required uint32 monster_value_type = 3;
  inline bool has_monster_value_type() const;
  inline void clear_monster_value_type();
  static const int kMonsterValueTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 monster_value_type() const;
  inline void set_monster_value_type(::google::protobuf::uint32 value);
  
  // required uint32 monster_level = 4;
  inline bool has_monster_level() const;
  inline void clear_monster_level();
  static const int kMonsterLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 monster_level() const;
  inline void set_monster_level(::google::protobuf::uint32 value);
  
  // required .CSPoint birth_place = 5;
  inline bool has_birth_place() const;
  inline void clear_birth_place();
  static const int kBirthPlaceFieldNumber = 5;
  inline const ::CSPoint& birth_place() const;
  inline ::CSPoint* mutable_birth_place();
  inline ::CSPoint* release_birth_place();
  
  // required .CSRangeInfo patrol_place = 6;
  inline bool has_patrol_place() const;
  inline void clear_patrol_place();
  static const int kPatrolPlaceFieldNumber = 6;
  inline const ::CSRangeInfo& patrol_place() const;
  inline ::CSRangeInfo* mutable_patrol_place();
  inline ::CSRangeInfo* release_patrol_place();
  
  // required bool elite = 7;
  inline bool has_elite() const;
  inline void clear_elite();
  static const int kEliteFieldNumber = 7;
  inline bool elite() const;
  inline void set_elite(bool value);
  
  // @@protoc_insertion_point(class_scope:CSMapMonster_t)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_monster_value_type();
  inline void clear_has_monster_value_type();
  inline void set_has_monster_level();
  inline void clear_has_monster_level();
  inline void set_has_birth_place();
  inline void clear_has_birth_place();
  inline void set_has_patrol_place();
  inline void clear_has_patrol_place();
  inline void set_has_elite();
  inline void clear_has_elite();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 monster_value_type_;
  ::google::protobuf::uint32 monster_level_;
  ::CSPoint* birth_place_;
  ::CSRangeInfo* patrol_place_;
  bool elite_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMapMonster_t* default_instance_;
};
// -------------------------------------------------------------------

class CSMapMonsterGroup_t : public ::google::protobuf::Message {
 public:
  CSMapMonsterGroup_t();
  virtual ~CSMapMonsterGroup_t();
  
  CSMapMonsterGroup_t(const CSMapMonsterGroup_t& from);
  
  inline CSMapMonsterGroup_t& operator=(const CSMapMonsterGroup_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMapMonsterGroup_t& default_instance();
  
  void Swap(CSMapMonsterGroup_t* other);
  
  // implements Message ----------------------------------------------
  
  CSMapMonsterGroup_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMapMonsterGroup_t& from);
  void MergeFrom(const CSMapMonsterGroup_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float refresh_time = 1;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 1;
  inline float refresh_time() const;
  inline void set_refresh_time(float value);
  
  // required uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);
  
  // repeated .CSMapMonster_t monsters = 3;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 3;
  inline const ::CSMapMonster_t& monsters(int index) const;
  inline ::CSMapMonster_t* mutable_monsters(int index);
  inline ::CSMapMonster_t* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMapMonster_t >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMapMonster_t >*
      mutable_monsters();
  
  // optional uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMapMonsterGroup_t)
 private:
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float refresh_time_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::RepeatedPtrField< ::CSMapMonster_t > monsters_;
  ::google::protobuf::uint32 group_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMapMonsterGroup_t* default_instance_;
};
// -------------------------------------------------------------------

class CSMapContent_t_CSMonsterNum : public ::google::protobuf::Message {
 public:
  CSMapContent_t_CSMonsterNum();
  virtual ~CSMapContent_t_CSMonsterNum();
  
  CSMapContent_t_CSMonsterNum(const CSMapContent_t_CSMonsterNum& from);
  
  inline CSMapContent_t_CSMonsterNum& operator=(const CSMapContent_t_CSMonsterNum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMapContent_t_CSMonsterNum& default_instance();
  
  void Swap(CSMapContent_t_CSMonsterNum* other);
  
  // implements Message ----------------------------------------------
  
  CSMapContent_t_CSMonsterNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMapContent_t_CSMonsterNum& from);
  void MergeFrom(const CSMapContent_t_CSMonsterNum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 monster_id = 1;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 monster_id() const;
  inline void set_monster_id(::google::protobuf::uint32 value);
  
  // required uint32 monster_num = 2;
  inline bool has_monster_num() const;
  inline void clear_monster_num();
  static const int kMonsterNumFieldNumber = 2;
  inline ::google::protobuf::uint32 monster_num() const;
  inline void set_monster_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMapContent_t.CSMonsterNum)
 private:
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_monster_num();
  inline void clear_has_monster_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 monster_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMapContent_t_CSMonsterNum* default_instance_;
};
// -------------------------------------------------------------------

class CSMapContent_t : public ::google::protobuf::Message {
 public:
  CSMapContent_t();
  virtual ~CSMapContent_t();
  
  CSMapContent_t(const CSMapContent_t& from);
  
  inline CSMapContent_t& operator=(const CSMapContent_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMapContent_t& default_instance();
  
  void Swap(CSMapContent_t* other);
  
  // implements Message ----------------------------------------------
  
  CSMapContent_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMapContent_t& from);
  void MergeFrom(const CSMapContent_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSMapContent_t_CSMonsterNum CSMonsterNum;
  
  // accessors -------------------------------------------------------
  
  // required uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);
  
  // required uint32 trans_des = 2;
  inline bool has_trans_des() const;
  inline void clear_trans_des();
  static const int kTransDesFieldNumber = 2;
  inline ::google::protobuf::uint32 trans_des() const;
  inline void set_trans_des(::google::protobuf::uint32 value);
  
  // required .CSPoint trans_place = 3;
  inline bool has_trans_place() const;
  inline void clear_trans_place();
  static const int kTransPlaceFieldNumber = 3;
  inline const ::CSPoint& trans_place() const;
  inline ::CSPoint* mutable_trans_place();
  inline ::CSPoint* release_trans_place();
  
  // repeated .CSPoint birth_place_gen = 4;
  inline int birth_place_gen_size() const;
  inline void clear_birth_place_gen();
  static const int kBirthPlaceGenFieldNumber = 4;
  inline const ::CSPoint& birth_place_gen(int index) const;
  inline ::CSPoint* mutable_birth_place_gen(int index);
  inline ::CSPoint* add_birth_place_gen();
  inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
      birth_place_gen() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
      mutable_birth_place_gen();
  
  // repeated .CSMapMonsterGroup_t monster_group = 5;
  inline int monster_group_size() const;
  inline void clear_monster_group();
  static const int kMonsterGroupFieldNumber = 5;
  inline const ::CSMapMonsterGroup_t& monster_group(int index) const;
  inline ::CSMapMonsterGroup_t* mutable_monster_group(int index);
  inline ::CSMapMonsterGroup_t* add_monster_group();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMapMonsterGroup_t >&
      monster_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMapMonsterGroup_t >*
      mutable_monster_group();
  
  // repeated .CSPoint monster_birth = 6;
  inline int monster_birth_size() const;
  inline void clear_monster_birth();
  static const int kMonsterBirthFieldNumber = 6;
  inline const ::CSPoint& monster_birth(int index) const;
  inline ::CSPoint* mutable_monster_birth(int index);
  inline ::CSPoint* add_monster_birth();
  inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
      monster_birth() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
      mutable_monster_birth();
  
  // repeated .CSMapContent_t.CSMonsterNum monster_nums = 7;
  inline int monster_nums_size() const;
  inline void clear_monster_nums();
  static const int kMonsterNumsFieldNumber = 7;
  inline const ::CSMapContent_t_CSMonsterNum& monster_nums(int index) const;
  inline ::CSMapContent_t_CSMonsterNum* mutable_monster_nums(int index);
  inline ::CSMapContent_t_CSMonsterNum* add_monster_nums();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMapContent_t_CSMonsterNum >&
      monster_nums() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMapContent_t_CSMonsterNum >*
      mutable_monster_nums();
  
  // @@protoc_insertion_point(class_scope:CSMapContent_t)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_trans_des();
  inline void clear_has_trans_des();
  inline void set_has_trans_place();
  inline void clear_has_trans_place();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 trans_des_;
  ::CSPoint* trans_place_;
  ::google::protobuf::RepeatedPtrField< ::CSPoint > birth_place_gen_;
  ::google::protobuf::RepeatedPtrField< ::CSMapMonsterGroup_t > monster_group_;
  ::google::protobuf::RepeatedPtrField< ::CSPoint > monster_birth_;
  ::google::protobuf::RepeatedPtrField< ::CSMapContent_t_CSMonsterNum > monster_nums_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMapContent_t* default_instance_;
};
// -------------------------------------------------------------------

class CSMapContentList_t : public ::google::protobuf::Message {
 public:
  CSMapContentList_t();
  virtual ~CSMapContentList_t();
  
  CSMapContentList_t(const CSMapContentList_t& from);
  
  inline CSMapContentList_t& operator=(const CSMapContentList_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMapContentList_t& default_instance();
  
  void Swap(CSMapContentList_t* other);
  
  // implements Message ----------------------------------------------
  
  CSMapContentList_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMapContentList_t& from);
  void MergeFrom(const CSMapContentList_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);
  
  // repeated .CSMapContent_t map_contents = 2;
  inline int map_contents_size() const;
  inline void clear_map_contents();
  static const int kMapContentsFieldNumber = 2;
  inline const ::CSMapContent_t& map_contents(int index) const;
  inline ::CSMapContent_t* mutable_map_contents(int index);
  inline ::CSMapContent_t* add_map_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMapContent_t >&
      map_contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMapContent_t >*
      mutable_map_contents();
  
  // @@protoc_insertion_point(class_scope:CSMapContentList_t)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSMapContent_t > map_contents_;
  ::google::protobuf::uint32 instance_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMapContentList_t* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterValue_t : public ::google::protobuf::Message {
 public:
  CSMonsterValue_t();
  virtual ~CSMonsterValue_t();
  
  CSMonsterValue_t(const CSMonsterValue_t& from);
  
  inline CSMonsterValue_t& operator=(const CSMonsterValue_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterValue_t& default_instance();
  
  void Swap(CSMonsterValue_t* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterValue_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterValue_t& from);
  void MergeFrom(const CSMonsterValue_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required uint32 physical_attack = 4;
  inline bool has_physical_attack() const;
  inline void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 4;
  inline ::google::protobuf::uint32 physical_attack() const;
  inline void set_physical_attack(::google::protobuf::uint32 value);
  
  // required uint32 magic_attack = 5;
  inline bool has_magic_attack() const;
  inline void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 5;
  inline ::google::protobuf::uint32 magic_attack() const;
  inline void set_magic_attack(::google::protobuf::uint32 value);
  
  // required uint32 skill_attack = 6;
  inline bool has_skill_attack() const;
  inline void clear_skill_attack();
  static const int kSkillAttackFieldNumber = 6;
  inline ::google::protobuf::uint32 skill_attack() const;
  inline void set_skill_attack(::google::protobuf::uint32 value);
  
  // required uint32 physical_defence = 7;
  inline bool has_physical_defence() const;
  inline void clear_physical_defence();
  static const int kPhysicalDefenceFieldNumber = 7;
  inline ::google::protobuf::uint32 physical_defence() const;
  inline void set_physical_defence(::google::protobuf::uint32 value);
  
  // required uint32 magic_defence = 8;
  inline bool has_magic_defence() const;
  inline void clear_magic_defence();
  static const int kMagicDefenceFieldNumber = 8;
  inline ::google::protobuf::uint32 magic_defence() const;
  inline void set_magic_defence(::google::protobuf::uint32 value);
  
  // required uint32 skill_defence = 9;
  inline bool has_skill_defence() const;
  inline void clear_skill_defence();
  static const int kSkillDefenceFieldNumber = 9;
  inline ::google::protobuf::uint32 skill_defence() const;
  inline void set_skill_defence(::google::protobuf::uint32 value);
  
  // required uint32 health_point = 10;
  inline bool has_health_point() const;
  inline void clear_health_point();
  static const int kHealthPointFieldNumber = 10;
  inline ::google::protobuf::uint32 health_point() const;
  inline void set_health_point(::google::protobuf::uint32 value);
  
  // required uint32 accurate = 11;
  inline bool has_accurate() const;
  inline void clear_accurate();
  static const int kAccurateFieldNumber = 11;
  inline ::google::protobuf::uint32 accurate() const;
  inline void set_accurate(::google::protobuf::uint32 value);
  
  // required uint32 dodge = 12;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 12;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);
  
  // required uint32 wreck = 13;
  inline bool has_wreck() const;
  inline void clear_wreck();
  static const int kWreckFieldNumber = 13;
  inline ::google::protobuf::uint32 wreck() const;
  inline void set_wreck(::google::protobuf::uint32 value);
  
  // required uint32 parry = 14;
  inline bool has_parry() const;
  inline void clear_parry();
  static const int kParryFieldNumber = 14;
  inline ::google::protobuf::uint32 parry() const;
  inline void set_parry(::google::protobuf::uint32 value);
  
  // required uint32 critical_strike = 15;
  inline bool has_critical_strike() const;
  inline void clear_critical_strike();
  static const int kCriticalStrikeFieldNumber = 15;
  inline ::google::protobuf::uint32 critical_strike() const;
  inline void set_critical_strike(::google::protobuf::uint32 value);
  
  // required uint32 tenacity = 16;
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 16;
  inline ::google::protobuf::uint32 tenacity() const;
  inline void set_tenacity(::google::protobuf::uint32 value);
  
  // required uint32 slay = 17;
  inline bool has_slay() const;
  inline void clear_slay();
  static const int kSlayFieldNumber = 17;
  inline ::google::protobuf::uint32 slay() const;
  inline void set_slay(::google::protobuf::uint32 value);
  
  // required uint32 courage = 18;
  inline bool has_courage() const;
  inline void clear_courage();
  static const int kCourageFieldNumber = 18;
  inline ::google::protobuf::uint32 courage() const;
  inline void set_courage(::google::protobuf::uint32 value);
  
  // required uint32 charm = 19;
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 19;
  inline ::google::protobuf::uint32 charm() const;
  inline void set_charm(::google::protobuf::uint32 value);
  
  // required uint32 trick = 20;
  inline bool has_trick() const;
  inline void clear_trick();
  static const int kTrickFieldNumber = 20;
  inline ::google::protobuf::uint32 trick() const;
  inline void set_trick(::google::protobuf::uint32 value);
  
  // required uint32 proficiency = 21;
  inline bool has_proficiency() const;
  inline void clear_proficiency();
  static const int kProficiencyFieldNumber = 21;
  inline ::google::protobuf::uint32 proficiency() const;
  inline void set_proficiency(::google::protobuf::uint32 value);
  
  // required uint32 hp_line = 22;
  inline bool has_hp_line() const;
  inline void clear_hp_line();
  static const int kHpLineFieldNumber = 22;
  inline ::google::protobuf::uint32 hp_line() const;
  inline void set_hp_line(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterValue_t)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_physical_attack();
  inline void clear_has_physical_attack();
  inline void set_has_magic_attack();
  inline void clear_has_magic_attack();
  inline void set_has_skill_attack();
  inline void clear_has_skill_attack();
  inline void set_has_physical_defence();
  inline void clear_has_physical_defence();
  inline void set_has_magic_defence();
  inline void clear_has_magic_defence();
  inline void set_has_skill_defence();
  inline void clear_has_skill_defence();
  inline void set_has_health_point();
  inline void clear_has_health_point();
  inline void set_has_accurate();
  inline void clear_has_accurate();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_wreck();
  inline void clear_has_wreck();
  inline void set_has_parry();
  inline void clear_has_parry();
  inline void set_has_critical_strike();
  inline void clear_has_critical_strike();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_slay();
  inline void clear_has_slay();
  inline void set_has_courage();
  inline void clear_has_courage();
  inline void set_has_charm();
  inline void clear_has_charm();
  inline void set_has_trick();
  inline void clear_has_trick();
  inline void set_has_proficiency();
  inline void clear_has_proficiency();
  inline void set_has_hp_line();
  inline void clear_has_hp_line();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 physical_attack_;
  ::google::protobuf::uint32 magic_attack_;
  ::google::protobuf::uint32 skill_attack_;
  ::google::protobuf::uint32 physical_defence_;
  ::google::protobuf::uint32 magic_defence_;
  ::google::protobuf::uint32 skill_defence_;
  ::google::protobuf::uint32 health_point_;
  ::google::protobuf::uint32 accurate_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 wreck_;
  ::google::protobuf::uint32 parry_;
  ::google::protobuf::uint32 critical_strike_;
  ::google::protobuf::uint32 tenacity_;
  ::google::protobuf::uint32 slay_;
  ::google::protobuf::uint32 courage_;
  ::google::protobuf::uint32 charm_;
  ::google::protobuf::uint32 trick_;
  ::google::protobuf::uint32 proficiency_;
  ::google::protobuf::uint32 hp_line_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterValue_t* default_instance_;
};
// -------------------------------------------------------------------

class CSBattlePrepareReq : public ::google::protobuf::Message {
 public:
  CSBattlePrepareReq();
  virtual ~CSBattlePrepareReq();
  
  CSBattlePrepareReq(const CSBattlePrepareReq& from);
  
  inline CSBattlePrepareReq& operator=(const CSBattlePrepareReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattlePrepareReq& default_instance();
  
  void Swap(CSBattlePrepareReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattlePrepareReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattlePrepareReq& from);
  void MergeFrom(const CSBattlePrepareReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattlePrepareReq)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 instance_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattlePrepareReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattlePrepareRsp : public ::google::protobuf::Message {
 public:
  CSBattlePrepareRsp();
  virtual ~CSBattlePrepareRsp();
  
  CSBattlePrepareRsp(const CSBattlePrepareRsp& from);
  
  inline CSBattlePrepareRsp& operator=(const CSBattlePrepareRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattlePrepareRsp& default_instance();
  
  void Swap(CSBattlePrepareRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattlePrepareRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattlePrepareRsp& from);
  void MergeFrom(const CSBattlePrepareRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CSMapContentList_t map_contents = 1;
  inline bool has_map_contents() const;
  inline void clear_map_contents();
  static const int kMapContentsFieldNumber = 1;
  inline const ::CSMapContentList_t& map_contents() const;
  inline ::CSMapContentList_t* mutable_map_contents();
  inline ::CSMapContentList_t* release_map_contents();
  
  // repeated .CSMonsterValue_t monster_values = 2;
  inline int monster_values_size() const;
  inline void clear_monster_values();
  static const int kMonsterValuesFieldNumber = 2;
  inline const ::CSMonsterValue_t& monster_values(int index) const;
  inline ::CSMonsterValue_t* mutable_monster_values(int index);
  inline ::CSMonsterValue_t* add_monster_values();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterValue_t >&
      monster_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterValue_t >*
      mutable_monster_values();
  
  // @@protoc_insertion_point(class_scope:CSBattlePrepareRsp)
 private:
  inline void set_has_map_contents();
  inline void clear_has_map_contents();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSMapContentList_t* map_contents_;
  ::google::protobuf::RepeatedPtrField< ::CSMonsterValue_t > monster_values_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fconfig_2eproto();
  friend void protobuf_AssignDesc_cs_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_cs_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattlePrepareRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// CSRangeInfo

// required .CSPoint start = 1;
inline bool CSRangeInfo::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRangeInfo::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRangeInfo::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRangeInfo::clear_start() {
  if (start_ != NULL) start_->::CSPoint::Clear();
  clear_has_start();
}
inline const ::CSPoint& CSRangeInfo::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CSPoint* CSRangeInfo::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::CSPoint;
  return start_;
}
inline ::CSPoint* CSRangeInfo::release_start() {
  clear_has_start();
  ::CSPoint* temp = start_;
  start_ = NULL;
  return temp;
}

// required .CSPoint end = 2;
inline bool CSRangeInfo::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRangeInfo::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRangeInfo::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRangeInfo::clear_end() {
  if (end_ != NULL) end_->::CSPoint::Clear();
  clear_has_end();
}
inline const ::CSPoint& CSRangeInfo::end() const {
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::CSPoint* CSRangeInfo::mutable_end() {
  set_has_end();
  if (end_ == NULL) end_ = new ::CSPoint;
  return end_;
}
inline ::CSPoint* CSRangeInfo::release_end() {
  clear_has_end();
  ::CSPoint* temp = end_;
  end_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSMonsterInfo_t

// required uint32 raid_id = 1;
inline bool CSMonsterInfo_t::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterInfo_t::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterInfo_t::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterInfo_t::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::raid_id() const {
  return raid_id_;
}
inline void CSMonsterInfo_t::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 speed = 2;
inline bool CSMonsterInfo_t::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterInfo_t::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterInfo_t::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterInfo_t::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::speed() const {
  return speed_;
}
inline void CSMonsterInfo_t::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// required uint32 type = 3;
inline bool CSMonsterInfo_t::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterInfo_t::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterInfo_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterInfo_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::type() const {
  return type_;
}
inline void CSMonsterInfo_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required bool is_boss = 4;
inline bool CSMonsterInfo_t::has_is_boss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterInfo_t::set_has_is_boss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterInfo_t::clear_has_is_boss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterInfo_t::clear_is_boss() {
  is_boss_ = false;
  clear_has_is_boss();
}
inline bool CSMonsterInfo_t::is_boss() const {
  return is_boss_;
}
inline void CSMonsterInfo_t::set_is_boss(bool value) {
  set_has_is_boss();
  is_boss_ = value;
}

// required .CSRangeInfo body_range = 5;
inline bool CSMonsterInfo_t::has_body_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterInfo_t::set_has_body_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterInfo_t::clear_has_body_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterInfo_t::clear_body_range() {
  if (body_range_ != NULL) body_range_->::CSRangeInfo::Clear();
  clear_has_body_range();
}
inline const ::CSRangeInfo& CSMonsterInfo_t::body_range() const {
  return body_range_ != NULL ? *body_range_ : *default_instance_->body_range_;
}
inline ::CSRangeInfo* CSMonsterInfo_t::mutable_body_range() {
  set_has_body_range();
  if (body_range_ == NULL) body_range_ = new ::CSRangeInfo;
  return body_range_;
}
inline ::CSRangeInfo* CSMonsterInfo_t::release_body_range() {
  clear_has_body_range();
  ::CSRangeInfo* temp = body_range_;
  body_range_ = NULL;
  return temp;
}

// required uint32 physical_attack = 6;
inline bool CSMonsterInfo_t::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterInfo_t::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterInfo_t::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterInfo_t::clear_physical_attack() {
  physical_attack_ = 0u;
  clear_has_physical_attack();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::physical_attack() const {
  return physical_attack_;
}
inline void CSMonsterInfo_t::set_physical_attack(::google::protobuf::uint32 value) {
  set_has_physical_attack();
  physical_attack_ = value;
}

// required uint32 magic_attack = 7;
inline bool CSMonsterInfo_t::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMonsterInfo_t::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMonsterInfo_t::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMonsterInfo_t::clear_magic_attack() {
  magic_attack_ = 0u;
  clear_has_magic_attack();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::magic_attack() const {
  return magic_attack_;
}
inline void CSMonsterInfo_t::set_magic_attack(::google::protobuf::uint32 value) {
  set_has_magic_attack();
  magic_attack_ = value;
}

// required uint32 skill_attack = 8;
inline bool CSMonsterInfo_t::has_skill_attack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMonsterInfo_t::set_has_skill_attack() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMonsterInfo_t::clear_has_skill_attack() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMonsterInfo_t::clear_skill_attack() {
  skill_attack_ = 0u;
  clear_has_skill_attack();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::skill_attack() const {
  return skill_attack_;
}
inline void CSMonsterInfo_t::set_skill_attack(::google::protobuf::uint32 value) {
  set_has_skill_attack();
  skill_attack_ = value;
}

// required uint32 physical_defence = 9;
inline bool CSMonsterInfo_t::has_physical_defence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMonsterInfo_t::set_has_physical_defence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMonsterInfo_t::clear_has_physical_defence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMonsterInfo_t::clear_physical_defence() {
  physical_defence_ = 0u;
  clear_has_physical_defence();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::physical_defence() const {
  return physical_defence_;
}
inline void CSMonsterInfo_t::set_physical_defence(::google::protobuf::uint32 value) {
  set_has_physical_defence();
  physical_defence_ = value;
}

// required uint32 magic_defence = 10;
inline bool CSMonsterInfo_t::has_magic_defence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMonsterInfo_t::set_has_magic_defence() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMonsterInfo_t::clear_has_magic_defence() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMonsterInfo_t::clear_magic_defence() {
  magic_defence_ = 0u;
  clear_has_magic_defence();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::magic_defence() const {
  return magic_defence_;
}
inline void CSMonsterInfo_t::set_magic_defence(::google::protobuf::uint32 value) {
  set_has_magic_defence();
  magic_defence_ = value;
}

// required uint32 skill_defence = 11;
inline bool CSMonsterInfo_t::has_skill_defence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMonsterInfo_t::set_has_skill_defence() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMonsterInfo_t::clear_has_skill_defence() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMonsterInfo_t::clear_skill_defence() {
  skill_defence_ = 0u;
  clear_has_skill_defence();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::skill_defence() const {
  return skill_defence_;
}
inline void CSMonsterInfo_t::set_skill_defence(::google::protobuf::uint32 value) {
  set_has_skill_defence();
  skill_defence_ = value;
}

// required uint32 health_point = 12;
inline bool CSMonsterInfo_t::has_health_point() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMonsterInfo_t::set_has_health_point() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMonsterInfo_t::clear_has_health_point() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMonsterInfo_t::clear_health_point() {
  health_point_ = 0u;
  clear_has_health_point();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::health_point() const {
  return health_point_;
}
inline void CSMonsterInfo_t::set_health_point(::google::protobuf::uint32 value) {
  set_has_health_point();
  health_point_ = value;
}

// required uint32 accurate = 13;
inline bool CSMonsterInfo_t::has_accurate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMonsterInfo_t::set_has_accurate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMonsterInfo_t::clear_has_accurate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMonsterInfo_t::clear_accurate() {
  accurate_ = 0u;
  clear_has_accurate();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::accurate() const {
  return accurate_;
}
inline void CSMonsterInfo_t::set_accurate(::google::protobuf::uint32 value) {
  set_has_accurate();
  accurate_ = value;
}

// required uint32 dodge = 14;
inline bool CSMonsterInfo_t::has_dodge() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSMonsterInfo_t::set_has_dodge() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSMonsterInfo_t::clear_has_dodge() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSMonsterInfo_t::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::dodge() const {
  return dodge_;
}
inline void CSMonsterInfo_t::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// required uint32 wreck = 15;
inline bool CSMonsterInfo_t::has_wreck() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSMonsterInfo_t::set_has_wreck() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSMonsterInfo_t::clear_has_wreck() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSMonsterInfo_t::clear_wreck() {
  wreck_ = 0u;
  clear_has_wreck();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::wreck() const {
  return wreck_;
}
inline void CSMonsterInfo_t::set_wreck(::google::protobuf::uint32 value) {
  set_has_wreck();
  wreck_ = value;
}

// required uint32 parry = 16;
inline bool CSMonsterInfo_t::has_parry() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSMonsterInfo_t::set_has_parry() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSMonsterInfo_t::clear_has_parry() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSMonsterInfo_t::clear_parry() {
  parry_ = 0u;
  clear_has_parry();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::parry() const {
  return parry_;
}
inline void CSMonsterInfo_t::set_parry(::google::protobuf::uint32 value) {
  set_has_parry();
  parry_ = value;
}

// required uint32 critical_strike = 17;
inline bool CSMonsterInfo_t::has_critical_strike() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSMonsterInfo_t::set_has_critical_strike() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSMonsterInfo_t::clear_has_critical_strike() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSMonsterInfo_t::clear_critical_strike() {
  critical_strike_ = 0u;
  clear_has_critical_strike();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::critical_strike() const {
  return critical_strike_;
}
inline void CSMonsterInfo_t::set_critical_strike(::google::protobuf::uint32 value) {
  set_has_critical_strike();
  critical_strike_ = value;
}

// required uint32 tenacity = 18;
inline bool CSMonsterInfo_t::has_tenacity() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSMonsterInfo_t::set_has_tenacity() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSMonsterInfo_t::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSMonsterInfo_t::clear_tenacity() {
  tenacity_ = 0u;
  clear_has_tenacity();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::tenacity() const {
  return tenacity_;
}
inline void CSMonsterInfo_t::set_tenacity(::google::protobuf::uint32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// required uint32 slay = 19;
inline bool CSMonsterInfo_t::has_slay() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSMonsterInfo_t::set_has_slay() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSMonsterInfo_t::clear_has_slay() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSMonsterInfo_t::clear_slay() {
  slay_ = 0u;
  clear_has_slay();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::slay() const {
  return slay_;
}
inline void CSMonsterInfo_t::set_slay(::google::protobuf::uint32 value) {
  set_has_slay();
  slay_ = value;
}

// required uint32 proficiency = 20;
inline bool CSMonsterInfo_t::has_proficiency() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSMonsterInfo_t::set_has_proficiency() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSMonsterInfo_t::clear_has_proficiency() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSMonsterInfo_t::clear_proficiency() {
  proficiency_ = 0u;
  clear_has_proficiency();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::proficiency() const {
  return proficiency_;
}
inline void CSMonsterInfo_t::set_proficiency(::google::protobuf::uint32 value) {
  set_has_proficiency();
  proficiency_ = value;
}

// required uint32 vision = 21;
inline bool CSMonsterInfo_t::has_vision() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSMonsterInfo_t::set_has_vision() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSMonsterInfo_t::clear_has_vision() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSMonsterInfo_t::clear_vision() {
  vision_ = 0u;
  clear_has_vision();
}
inline ::google::protobuf::uint32 CSMonsterInfo_t::vision() const {
  return vision_;
}
inline void CSMonsterInfo_t::set_vision(::google::protobuf::uint32 value) {
  set_has_vision();
  vision_ = value;
}

// required .CSRangeInfo birth = 22;
inline bool CSMonsterInfo_t::has_birth() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSMonsterInfo_t::set_has_birth() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSMonsterInfo_t::clear_has_birth() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSMonsterInfo_t::clear_birth() {
  if (birth_ != NULL) birth_->::CSRangeInfo::Clear();
  clear_has_birth();
}
inline const ::CSRangeInfo& CSMonsterInfo_t::birth() const {
  return birth_ != NULL ? *birth_ : *default_instance_->birth_;
}
inline ::CSRangeInfo* CSMonsterInfo_t::mutable_birth() {
  set_has_birth();
  if (birth_ == NULL) birth_ = new ::CSRangeInfo;
  return birth_;
}
inline ::CSRangeInfo* CSMonsterInfo_t::release_birth() {
  clear_has_birth();
  ::CSRangeInfo* temp = birth_;
  birth_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSMapMonster_t

// required uint32 raid_id = 1;
inline bool CSMapMonster_t::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMapMonster_t::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMapMonster_t::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMapMonster_t::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 CSMapMonster_t::raid_id() const {
  return raid_id_;
}
inline void CSMapMonster_t::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 monster_id = 2;
inline bool CSMapMonster_t::has_monster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMapMonster_t::set_has_monster_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMapMonster_t::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMapMonster_t::clear_monster_id() {
  monster_id_ = 0u;
  clear_has_monster_id();
}
inline ::google::protobuf::uint32 CSMapMonster_t::monster_id() const {
  return monster_id_;
}
inline void CSMapMonster_t::set_monster_id(::google::protobuf::uint32 value) {
  set_has_monster_id();
  monster_id_ = value;
}

// required uint32 monster_value_type = 3;
inline bool CSMapMonster_t::has_monster_value_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMapMonster_t::set_has_monster_value_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMapMonster_t::clear_has_monster_value_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMapMonster_t::clear_monster_value_type() {
  monster_value_type_ = 0u;
  clear_has_monster_value_type();
}
inline ::google::protobuf::uint32 CSMapMonster_t::monster_value_type() const {
  return monster_value_type_;
}
inline void CSMapMonster_t::set_monster_value_type(::google::protobuf::uint32 value) {
  set_has_monster_value_type();
  monster_value_type_ = value;
}

// required uint32 monster_level = 4;
inline bool CSMapMonster_t::has_monster_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMapMonster_t::set_has_monster_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMapMonster_t::clear_has_monster_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMapMonster_t::clear_monster_level() {
  monster_level_ = 0u;
  clear_has_monster_level();
}
inline ::google::protobuf::uint32 CSMapMonster_t::monster_level() const {
  return monster_level_;
}
inline void CSMapMonster_t::set_monster_level(::google::protobuf::uint32 value) {
  set_has_monster_level();
  monster_level_ = value;
}

// required .CSPoint birth_place = 5;
inline bool CSMapMonster_t::has_birth_place() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMapMonster_t::set_has_birth_place() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMapMonster_t::clear_has_birth_place() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMapMonster_t::clear_birth_place() {
  if (birth_place_ != NULL) birth_place_->::CSPoint::Clear();
  clear_has_birth_place();
}
inline const ::CSPoint& CSMapMonster_t::birth_place() const {
  return birth_place_ != NULL ? *birth_place_ : *default_instance_->birth_place_;
}
inline ::CSPoint* CSMapMonster_t::mutable_birth_place() {
  set_has_birth_place();
  if (birth_place_ == NULL) birth_place_ = new ::CSPoint;
  return birth_place_;
}
inline ::CSPoint* CSMapMonster_t::release_birth_place() {
  clear_has_birth_place();
  ::CSPoint* temp = birth_place_;
  birth_place_ = NULL;
  return temp;
}

// required .CSRangeInfo patrol_place = 6;
inline bool CSMapMonster_t::has_patrol_place() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMapMonster_t::set_has_patrol_place() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMapMonster_t::clear_has_patrol_place() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMapMonster_t::clear_patrol_place() {
  if (patrol_place_ != NULL) patrol_place_->::CSRangeInfo::Clear();
  clear_has_patrol_place();
}
inline const ::CSRangeInfo& CSMapMonster_t::patrol_place() const {
  return patrol_place_ != NULL ? *patrol_place_ : *default_instance_->patrol_place_;
}
inline ::CSRangeInfo* CSMapMonster_t::mutable_patrol_place() {
  set_has_patrol_place();
  if (patrol_place_ == NULL) patrol_place_ = new ::CSRangeInfo;
  return patrol_place_;
}
inline ::CSRangeInfo* CSMapMonster_t::release_patrol_place() {
  clear_has_patrol_place();
  ::CSRangeInfo* temp = patrol_place_;
  patrol_place_ = NULL;
  return temp;
}

// required bool elite = 7;
inline bool CSMapMonster_t::has_elite() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMapMonster_t::set_has_elite() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMapMonster_t::clear_has_elite() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMapMonster_t::clear_elite() {
  elite_ = false;
  clear_has_elite();
}
inline bool CSMapMonster_t::elite() const {
  return elite_;
}
inline void CSMapMonster_t::set_elite(bool value) {
  set_has_elite();
  elite_ = value;
}

// -------------------------------------------------------------------

// CSMapMonsterGroup_t

// required float refresh_time = 1;
inline bool CSMapMonsterGroup_t::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMapMonsterGroup_t::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMapMonsterGroup_t::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMapMonsterGroup_t::clear_refresh_time() {
  refresh_time_ = 0;
  clear_has_refresh_time();
}
inline float CSMapMonsterGroup_t::refresh_time() const {
  return refresh_time_;
}
inline void CSMapMonsterGroup_t::set_refresh_time(float value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// required uint32 times = 2;
inline bool CSMapMonsterGroup_t::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMapMonsterGroup_t::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMapMonsterGroup_t::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMapMonsterGroup_t::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 CSMapMonsterGroup_t::times() const {
  return times_;
}
inline void CSMapMonsterGroup_t::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// repeated .CSMapMonster_t monsters = 3;
inline int CSMapMonsterGroup_t::monsters_size() const {
  return monsters_.size();
}
inline void CSMapMonsterGroup_t::clear_monsters() {
  monsters_.Clear();
}
inline const ::CSMapMonster_t& CSMapMonsterGroup_t::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::CSMapMonster_t* CSMapMonsterGroup_t::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::CSMapMonster_t* CSMapMonsterGroup_t::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMapMonster_t >&
CSMapMonsterGroup_t::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMapMonster_t >*
CSMapMonsterGroup_t::mutable_monsters() {
  return &monsters_;
}

// optional uint32 group_id = 4;
inline bool CSMapMonsterGroup_t::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMapMonsterGroup_t::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMapMonsterGroup_t::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMapMonsterGroup_t::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 CSMapMonsterGroup_t::group_id() const {
  return group_id_;
}
inline void CSMapMonsterGroup_t::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// -------------------------------------------------------------------

// CSMapContent_t_CSMonsterNum

// required uint32 monster_id = 1;
inline bool CSMapContent_t_CSMonsterNum::has_monster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMapContent_t_CSMonsterNum::set_has_monster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMapContent_t_CSMonsterNum::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMapContent_t_CSMonsterNum::clear_monster_id() {
  monster_id_ = 0u;
  clear_has_monster_id();
}
inline ::google::protobuf::uint32 CSMapContent_t_CSMonsterNum::monster_id() const {
  return monster_id_;
}
inline void CSMapContent_t_CSMonsterNum::set_monster_id(::google::protobuf::uint32 value) {
  set_has_monster_id();
  monster_id_ = value;
}

// required uint32 monster_num = 2;
inline bool CSMapContent_t_CSMonsterNum::has_monster_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMapContent_t_CSMonsterNum::set_has_monster_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMapContent_t_CSMonsterNum::clear_has_monster_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMapContent_t_CSMonsterNum::clear_monster_num() {
  monster_num_ = 0u;
  clear_has_monster_num();
}
inline ::google::protobuf::uint32 CSMapContent_t_CSMonsterNum::monster_num() const {
  return monster_num_;
}
inline void CSMapContent_t_CSMonsterNum::set_monster_num(::google::protobuf::uint32 value) {
  set_has_monster_num();
  monster_num_ = value;
}

// -------------------------------------------------------------------

// CSMapContent_t

// required uint32 map_id = 1;
inline bool CSMapContent_t::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMapContent_t::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMapContent_t::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMapContent_t::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CSMapContent_t::map_id() const {
  return map_id_;
}
inline void CSMapContent_t::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required uint32 trans_des = 2;
inline bool CSMapContent_t::has_trans_des() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMapContent_t::set_has_trans_des() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMapContent_t::clear_has_trans_des() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMapContent_t::clear_trans_des() {
  trans_des_ = 0u;
  clear_has_trans_des();
}
inline ::google::protobuf::uint32 CSMapContent_t::trans_des() const {
  return trans_des_;
}
inline void CSMapContent_t::set_trans_des(::google::protobuf::uint32 value) {
  set_has_trans_des();
  trans_des_ = value;
}

// required .CSPoint trans_place = 3;
inline bool CSMapContent_t::has_trans_place() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMapContent_t::set_has_trans_place() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMapContent_t::clear_has_trans_place() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMapContent_t::clear_trans_place() {
  if (trans_place_ != NULL) trans_place_->::CSPoint::Clear();
  clear_has_trans_place();
}
inline const ::CSPoint& CSMapContent_t::trans_place() const {
  return trans_place_ != NULL ? *trans_place_ : *default_instance_->trans_place_;
}
inline ::CSPoint* CSMapContent_t::mutable_trans_place() {
  set_has_trans_place();
  if (trans_place_ == NULL) trans_place_ = new ::CSPoint;
  return trans_place_;
}
inline ::CSPoint* CSMapContent_t::release_trans_place() {
  clear_has_trans_place();
  ::CSPoint* temp = trans_place_;
  trans_place_ = NULL;
  return temp;
}

// repeated .CSPoint birth_place_gen = 4;
inline int CSMapContent_t::birth_place_gen_size() const {
  return birth_place_gen_.size();
}
inline void CSMapContent_t::clear_birth_place_gen() {
  birth_place_gen_.Clear();
}
inline const ::CSPoint& CSMapContent_t::birth_place_gen(int index) const {
  return birth_place_gen_.Get(index);
}
inline ::CSPoint* CSMapContent_t::mutable_birth_place_gen(int index) {
  return birth_place_gen_.Mutable(index);
}
inline ::CSPoint* CSMapContent_t::add_birth_place_gen() {
  return birth_place_gen_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
CSMapContent_t::birth_place_gen() const {
  return birth_place_gen_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
CSMapContent_t::mutable_birth_place_gen() {
  return &birth_place_gen_;
}

// repeated .CSMapMonsterGroup_t monster_group = 5;
inline int CSMapContent_t::monster_group_size() const {
  return monster_group_.size();
}
inline void CSMapContent_t::clear_monster_group() {
  monster_group_.Clear();
}
inline const ::CSMapMonsterGroup_t& CSMapContent_t::monster_group(int index) const {
  return monster_group_.Get(index);
}
inline ::CSMapMonsterGroup_t* CSMapContent_t::mutable_monster_group(int index) {
  return monster_group_.Mutable(index);
}
inline ::CSMapMonsterGroup_t* CSMapContent_t::add_monster_group() {
  return monster_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMapMonsterGroup_t >&
CSMapContent_t::monster_group() const {
  return monster_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMapMonsterGroup_t >*
CSMapContent_t::mutable_monster_group() {
  return &monster_group_;
}

// repeated .CSPoint monster_birth = 6;
inline int CSMapContent_t::monster_birth_size() const {
  return monster_birth_.size();
}
inline void CSMapContent_t::clear_monster_birth() {
  monster_birth_.Clear();
}
inline const ::CSPoint& CSMapContent_t::monster_birth(int index) const {
  return monster_birth_.Get(index);
}
inline ::CSPoint* CSMapContent_t::mutable_monster_birth(int index) {
  return monster_birth_.Mutable(index);
}
inline ::CSPoint* CSMapContent_t::add_monster_birth() {
  return monster_birth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSPoint >&
CSMapContent_t::monster_birth() const {
  return monster_birth_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSPoint >*
CSMapContent_t::mutable_monster_birth() {
  return &monster_birth_;
}

// repeated .CSMapContent_t.CSMonsterNum monster_nums = 7;
inline int CSMapContent_t::monster_nums_size() const {
  return monster_nums_.size();
}
inline void CSMapContent_t::clear_monster_nums() {
  monster_nums_.Clear();
}
inline const ::CSMapContent_t_CSMonsterNum& CSMapContent_t::monster_nums(int index) const {
  return monster_nums_.Get(index);
}
inline ::CSMapContent_t_CSMonsterNum* CSMapContent_t::mutable_monster_nums(int index) {
  return monster_nums_.Mutable(index);
}
inline ::CSMapContent_t_CSMonsterNum* CSMapContent_t::add_monster_nums() {
  return monster_nums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMapContent_t_CSMonsterNum >&
CSMapContent_t::monster_nums() const {
  return monster_nums_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMapContent_t_CSMonsterNum >*
CSMapContent_t::mutable_monster_nums() {
  return &monster_nums_;
}

// -------------------------------------------------------------------

// CSMapContentList_t

// required uint32 instance_id = 1;
inline bool CSMapContentList_t::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMapContentList_t::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMapContentList_t::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMapContentList_t::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSMapContentList_t::instance_id() const {
  return instance_id_;
}
inline void CSMapContentList_t::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// repeated .CSMapContent_t map_contents = 2;
inline int CSMapContentList_t::map_contents_size() const {
  return map_contents_.size();
}
inline void CSMapContentList_t::clear_map_contents() {
  map_contents_.Clear();
}
inline const ::CSMapContent_t& CSMapContentList_t::map_contents(int index) const {
  return map_contents_.Get(index);
}
inline ::CSMapContent_t* CSMapContentList_t::mutable_map_contents(int index) {
  return map_contents_.Mutable(index);
}
inline ::CSMapContent_t* CSMapContentList_t::add_map_contents() {
  return map_contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMapContent_t >&
CSMapContentList_t::map_contents() const {
  return map_contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMapContent_t >*
CSMapContentList_t::mutable_map_contents() {
  return &map_contents_;
}

// -------------------------------------------------------------------

// CSMonsterValue_t

// required uint32 id = 1;
inline bool CSMonsterValue_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterValue_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterValue_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterValue_t::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::id() const {
  return id_;
}
inline void CSMonsterValue_t::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 type = 2;
inline bool CSMonsterValue_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterValue_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterValue_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterValue_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::type() const {
  return type_;
}
inline void CSMonsterValue_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 level = 3;
inline bool CSMonsterValue_t::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterValue_t::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterValue_t::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterValue_t::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::level() const {
  return level_;
}
inline void CSMonsterValue_t::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 physical_attack = 4;
inline bool CSMonsterValue_t::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterValue_t::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterValue_t::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterValue_t::clear_physical_attack() {
  physical_attack_ = 0u;
  clear_has_physical_attack();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::physical_attack() const {
  return physical_attack_;
}
inline void CSMonsterValue_t::set_physical_attack(::google::protobuf::uint32 value) {
  set_has_physical_attack();
  physical_attack_ = value;
}

// required uint32 magic_attack = 5;
inline bool CSMonsterValue_t::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterValue_t::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterValue_t::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterValue_t::clear_magic_attack() {
  magic_attack_ = 0u;
  clear_has_magic_attack();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::magic_attack() const {
  return magic_attack_;
}
inline void CSMonsterValue_t::set_magic_attack(::google::protobuf::uint32 value) {
  set_has_magic_attack();
  magic_attack_ = value;
}

// required uint32 skill_attack = 6;
inline bool CSMonsterValue_t::has_skill_attack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterValue_t::set_has_skill_attack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterValue_t::clear_has_skill_attack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterValue_t::clear_skill_attack() {
  skill_attack_ = 0u;
  clear_has_skill_attack();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::skill_attack() const {
  return skill_attack_;
}
inline void CSMonsterValue_t::set_skill_attack(::google::protobuf::uint32 value) {
  set_has_skill_attack();
  skill_attack_ = value;
}

// required uint32 physical_defence = 7;
inline bool CSMonsterValue_t::has_physical_defence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMonsterValue_t::set_has_physical_defence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMonsterValue_t::clear_has_physical_defence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMonsterValue_t::clear_physical_defence() {
  physical_defence_ = 0u;
  clear_has_physical_defence();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::physical_defence() const {
  return physical_defence_;
}
inline void CSMonsterValue_t::set_physical_defence(::google::protobuf::uint32 value) {
  set_has_physical_defence();
  physical_defence_ = value;
}

// required uint32 magic_defence = 8;
inline bool CSMonsterValue_t::has_magic_defence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMonsterValue_t::set_has_magic_defence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMonsterValue_t::clear_has_magic_defence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMonsterValue_t::clear_magic_defence() {
  magic_defence_ = 0u;
  clear_has_magic_defence();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::magic_defence() const {
  return magic_defence_;
}
inline void CSMonsterValue_t::set_magic_defence(::google::protobuf::uint32 value) {
  set_has_magic_defence();
  magic_defence_ = value;
}

// required uint32 skill_defence = 9;
inline bool CSMonsterValue_t::has_skill_defence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMonsterValue_t::set_has_skill_defence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMonsterValue_t::clear_has_skill_defence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMonsterValue_t::clear_skill_defence() {
  skill_defence_ = 0u;
  clear_has_skill_defence();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::skill_defence() const {
  return skill_defence_;
}
inline void CSMonsterValue_t::set_skill_defence(::google::protobuf::uint32 value) {
  set_has_skill_defence();
  skill_defence_ = value;
}

// required uint32 health_point = 10;
inline bool CSMonsterValue_t::has_health_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMonsterValue_t::set_has_health_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMonsterValue_t::clear_has_health_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMonsterValue_t::clear_health_point() {
  health_point_ = 0u;
  clear_has_health_point();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::health_point() const {
  return health_point_;
}
inline void CSMonsterValue_t::set_health_point(::google::protobuf::uint32 value) {
  set_has_health_point();
  health_point_ = value;
}

// required uint32 accurate = 11;
inline bool CSMonsterValue_t::has_accurate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMonsterValue_t::set_has_accurate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMonsterValue_t::clear_has_accurate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMonsterValue_t::clear_accurate() {
  accurate_ = 0u;
  clear_has_accurate();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::accurate() const {
  return accurate_;
}
inline void CSMonsterValue_t::set_accurate(::google::protobuf::uint32 value) {
  set_has_accurate();
  accurate_ = value;
}

// required uint32 dodge = 12;
inline bool CSMonsterValue_t::has_dodge() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMonsterValue_t::set_has_dodge() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMonsterValue_t::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMonsterValue_t::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::dodge() const {
  return dodge_;
}
inline void CSMonsterValue_t::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// required uint32 wreck = 13;
inline bool CSMonsterValue_t::has_wreck() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMonsterValue_t::set_has_wreck() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMonsterValue_t::clear_has_wreck() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMonsterValue_t::clear_wreck() {
  wreck_ = 0u;
  clear_has_wreck();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::wreck() const {
  return wreck_;
}
inline void CSMonsterValue_t::set_wreck(::google::protobuf::uint32 value) {
  set_has_wreck();
  wreck_ = value;
}

// required uint32 parry = 14;
inline bool CSMonsterValue_t::has_parry() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSMonsterValue_t::set_has_parry() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSMonsterValue_t::clear_has_parry() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSMonsterValue_t::clear_parry() {
  parry_ = 0u;
  clear_has_parry();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::parry() const {
  return parry_;
}
inline void CSMonsterValue_t::set_parry(::google::protobuf::uint32 value) {
  set_has_parry();
  parry_ = value;
}

// required uint32 critical_strike = 15;
inline bool CSMonsterValue_t::has_critical_strike() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSMonsterValue_t::set_has_critical_strike() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSMonsterValue_t::clear_has_critical_strike() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSMonsterValue_t::clear_critical_strike() {
  critical_strike_ = 0u;
  clear_has_critical_strike();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::critical_strike() const {
  return critical_strike_;
}
inline void CSMonsterValue_t::set_critical_strike(::google::protobuf::uint32 value) {
  set_has_critical_strike();
  critical_strike_ = value;
}

// required uint32 tenacity = 16;
inline bool CSMonsterValue_t::has_tenacity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSMonsterValue_t::set_has_tenacity() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSMonsterValue_t::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSMonsterValue_t::clear_tenacity() {
  tenacity_ = 0u;
  clear_has_tenacity();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::tenacity() const {
  return tenacity_;
}
inline void CSMonsterValue_t::set_tenacity(::google::protobuf::uint32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// required uint32 slay = 17;
inline bool CSMonsterValue_t::has_slay() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSMonsterValue_t::set_has_slay() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSMonsterValue_t::clear_has_slay() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSMonsterValue_t::clear_slay() {
  slay_ = 0u;
  clear_has_slay();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::slay() const {
  return slay_;
}
inline void CSMonsterValue_t::set_slay(::google::protobuf::uint32 value) {
  set_has_slay();
  slay_ = value;
}

// required uint32 courage = 18;
inline bool CSMonsterValue_t::has_courage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSMonsterValue_t::set_has_courage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSMonsterValue_t::clear_has_courage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSMonsterValue_t::clear_courage() {
  courage_ = 0u;
  clear_has_courage();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::courage() const {
  return courage_;
}
inline void CSMonsterValue_t::set_courage(::google::protobuf::uint32 value) {
  set_has_courage();
  courage_ = value;
}

// required uint32 charm = 19;
inline bool CSMonsterValue_t::has_charm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSMonsterValue_t::set_has_charm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSMonsterValue_t::clear_has_charm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSMonsterValue_t::clear_charm() {
  charm_ = 0u;
  clear_has_charm();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::charm() const {
  return charm_;
}
inline void CSMonsterValue_t::set_charm(::google::protobuf::uint32 value) {
  set_has_charm();
  charm_ = value;
}

// required uint32 trick = 20;
inline bool CSMonsterValue_t::has_trick() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSMonsterValue_t::set_has_trick() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSMonsterValue_t::clear_has_trick() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSMonsterValue_t::clear_trick() {
  trick_ = 0u;
  clear_has_trick();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::trick() const {
  return trick_;
}
inline void CSMonsterValue_t::set_trick(::google::protobuf::uint32 value) {
  set_has_trick();
  trick_ = value;
}

// required uint32 proficiency = 21;
inline bool CSMonsterValue_t::has_proficiency() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSMonsterValue_t::set_has_proficiency() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSMonsterValue_t::clear_has_proficiency() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSMonsterValue_t::clear_proficiency() {
  proficiency_ = 0u;
  clear_has_proficiency();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::proficiency() const {
  return proficiency_;
}
inline void CSMonsterValue_t::set_proficiency(::google::protobuf::uint32 value) {
  set_has_proficiency();
  proficiency_ = value;
}

// required uint32 hp_line = 22;
inline bool CSMonsterValue_t::has_hp_line() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSMonsterValue_t::set_has_hp_line() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSMonsterValue_t::clear_has_hp_line() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSMonsterValue_t::clear_hp_line() {
  hp_line_ = 0u;
  clear_has_hp_line();
}
inline ::google::protobuf::uint32 CSMonsterValue_t::hp_line() const {
  return hp_line_;
}
inline void CSMonsterValue_t::set_hp_line(::google::protobuf::uint32 value) {
  set_has_hp_line();
  hp_line_ = value;
}

// -------------------------------------------------------------------

// CSBattlePrepareReq

// required uint32 instance_id = 1;
inline bool CSBattlePrepareReq::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattlePrepareReq::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattlePrepareReq::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattlePrepareReq::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 CSBattlePrepareReq::instance_id() const {
  return instance_id_;
}
inline void CSBattlePrepareReq::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// -------------------------------------------------------------------

// CSBattlePrepareRsp

// required .CSMapContentList_t map_contents = 1;
inline bool CSBattlePrepareRsp::has_map_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattlePrepareRsp::set_has_map_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattlePrepareRsp::clear_has_map_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattlePrepareRsp::clear_map_contents() {
  if (map_contents_ != NULL) map_contents_->::CSMapContentList_t::Clear();
  clear_has_map_contents();
}
inline const ::CSMapContentList_t& CSBattlePrepareRsp::map_contents() const {
  return map_contents_ != NULL ? *map_contents_ : *default_instance_->map_contents_;
}
inline ::CSMapContentList_t* CSBattlePrepareRsp::mutable_map_contents() {
  set_has_map_contents();
  if (map_contents_ == NULL) map_contents_ = new ::CSMapContentList_t;
  return map_contents_;
}
inline ::CSMapContentList_t* CSBattlePrepareRsp::release_map_contents() {
  clear_has_map_contents();
  ::CSMapContentList_t* temp = map_contents_;
  map_contents_ = NULL;
  return temp;
}

// repeated .CSMonsterValue_t monster_values = 2;
inline int CSBattlePrepareRsp::monster_values_size() const {
  return monster_values_.size();
}
inline void CSBattlePrepareRsp::clear_monster_values() {
  monster_values_.Clear();
}
inline const ::CSMonsterValue_t& CSBattlePrepareRsp::monster_values(int index) const {
  return monster_values_.Get(index);
}
inline ::CSMonsterValue_t* CSBattlePrepareRsp::mutable_monster_values(int index) {
  return monster_values_.Mutable(index);
}
inline ::CSMonsterValue_t* CSBattlePrepareRsp::add_monster_values() {
  return monster_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterValue_t >&
CSBattlePrepareRsp::monster_values() const {
  return monster_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterValue_t >*
CSBattlePrepareRsp::mutable_monster_values() {
  return &monster_values_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fconfig_2eproto__INCLUDED
