// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSRangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterInfo_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterInfo_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMapMonster_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMapMonster_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMapMonsterGroup_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMapMonsterGroup_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMapContent_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMapContent_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMapContent_t_CSMonsterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMapContent_t_CSMonsterNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMapContentList_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMapContentList_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterValue_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterValue_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePrepareReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePrepareReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePrepareRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePrepareRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fconfig_2eproto() {
  protobuf_AddDesc_cs_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_config.proto");
  GOOGLE_CHECK(file != NULL);
  CSRangeInfo_descriptor_ = file->message_type(0);
  static const int CSRangeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, end_),
  };
  CSRangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRangeInfo_descriptor_,
      CSRangeInfo::default_instance_,
      CSRangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRangeInfo));
  CSMonsterInfo_t_descriptor_ = file->message_type(1);
  static const int CSMonsterInfo_t_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, is_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, body_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, proficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, vision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, birth_),
  };
  CSMonsterInfo_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterInfo_t_descriptor_,
      CSMonsterInfo_t::default_instance_,
      CSMonsterInfo_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterInfo_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterInfo_t));
  CSMapMonster_t_descriptor_ = file->message_type(2);
  static const int CSMapMonster_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, monster_value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, monster_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, birth_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, patrol_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, elite_),
  };
  CSMapMonster_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMapMonster_t_descriptor_,
      CSMapMonster_t::default_instance_,
      CSMapMonster_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonster_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMapMonster_t));
  CSMapMonsterGroup_t_descriptor_ = file->message_type(3);
  static const int CSMapMonsterGroup_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonsterGroup_t, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonsterGroup_t, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonsterGroup_t, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonsterGroup_t, group_id_),
  };
  CSMapMonsterGroup_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMapMonsterGroup_t_descriptor_,
      CSMapMonsterGroup_t::default_instance_,
      CSMapMonsterGroup_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonsterGroup_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapMonsterGroup_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMapMonsterGroup_t));
  CSMapContent_t_descriptor_ = file->message_type(4);
  static const int CSMapContent_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, trans_des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, trans_place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, birth_place_gen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, monster_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, monster_birth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, monster_nums_),
  };
  CSMapContent_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMapContent_t_descriptor_,
      CSMapContent_t::default_instance_,
      CSMapContent_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMapContent_t));
  CSMapContent_t_CSMonsterNum_descriptor_ = CSMapContent_t_descriptor_->nested_type(0);
  static const int CSMapContent_t_CSMonsterNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t_CSMonsterNum, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t_CSMonsterNum, monster_num_),
  };
  CSMapContent_t_CSMonsterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMapContent_t_CSMonsterNum_descriptor_,
      CSMapContent_t_CSMonsterNum::default_instance_,
      CSMapContent_t_CSMonsterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t_CSMonsterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContent_t_CSMonsterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMapContent_t_CSMonsterNum));
  CSMapContentList_t_descriptor_ = file->message_type(5);
  static const int CSMapContentList_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContentList_t, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContentList_t, map_contents_),
  };
  CSMapContentList_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMapContentList_t_descriptor_,
      CSMapContentList_t::default_instance_,
      CSMapContentList_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContentList_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMapContentList_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMapContentList_t));
  CSMonsterValue_t_descriptor_ = file->message_type(6);
  static const int CSMonsterValue_t_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, courage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, trick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, proficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, hp_line_),
  };
  CSMonsterValue_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterValue_t_descriptor_,
      CSMonsterValue_t::default_instance_,
      CSMonsterValue_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterValue_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterValue_t));
  CSBattlePrepareReq_descriptor_ = file->message_type(7);
  static const int CSBattlePrepareReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareReq, instance_id_),
  };
  CSBattlePrepareReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePrepareReq_descriptor_,
      CSBattlePrepareReq::default_instance_,
      CSBattlePrepareReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePrepareReq));
  CSBattlePrepareRsp_descriptor_ = file->message_type(8);
  static const int CSBattlePrepareRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareRsp, map_contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareRsp, monster_values_),
  };
  CSBattlePrepareRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePrepareRsp_descriptor_,
      CSBattlePrepareRsp::default_instance_,
      CSBattlePrepareRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePrepareRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePrepareRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRangeInfo_descriptor_, &CSRangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterInfo_t_descriptor_, &CSMonsterInfo_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMapMonster_t_descriptor_, &CSMapMonster_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMapMonsterGroup_t_descriptor_, &CSMapMonsterGroup_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMapContent_t_descriptor_, &CSMapContent_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMapContent_t_CSMonsterNum_descriptor_, &CSMapContent_t_CSMonsterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMapContentList_t_descriptor_, &CSMapContentList_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterValue_t_descriptor_, &CSMonsterValue_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePrepareReq_descriptor_, &CSBattlePrepareReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePrepareRsp_descriptor_, &CSBattlePrepareRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fconfig_2eproto() {
  delete CSRangeInfo::default_instance_;
  delete CSRangeInfo_reflection_;
  delete CSMonsterInfo_t::default_instance_;
  delete CSMonsterInfo_t_reflection_;
  delete CSMapMonster_t::default_instance_;
  delete CSMapMonster_t_reflection_;
  delete CSMapMonsterGroup_t::default_instance_;
  delete CSMapMonsterGroup_t_reflection_;
  delete CSMapContent_t::default_instance_;
  delete CSMapContent_t_reflection_;
  delete CSMapContent_t_CSMonsterNum::default_instance_;
  delete CSMapContent_t_CSMonsterNum_reflection_;
  delete CSMapContentList_t::default_instance_;
  delete CSMapContentList_t_reflection_;
  delete CSMonsterValue_t::default_instance_;
  delete CSMonsterValue_t_reflection_;
  delete CSBattlePrepareReq::default_instance_;
  delete CSBattlePrepareReq_reflection_;
  delete CSBattlePrepareRsp::default_instance_;
  delete CSBattlePrepareRsp_reflection_;
}

void protobuf_AddDesc_cs_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cs_5fbattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_config.proto\032\017cs_battle.proto\"=\n\013CS"
    "RangeInfo\022\027\n\005start\030\001 \002(\0132\010.CSPoint\022\025\n\003en"
    "d\030\002 \002(\0132\010.CSPoint\"\317\003\n\017CSMonsterInfo_t\022\017\n"
    "\007raid_id\030\001 \002(\r\022\r\n\005speed\030\002 \002(\r\022\014\n\004type\030\003 "
    "\002(\r\022\017\n\007is_boss\030\004 \002(\010\022 \n\nbody_range\030\005 \002(\013"
    "2\014.CSRangeInfo\022\027\n\017physical_attack\030\006 \002(\r\022"
    "\024\n\014magic_attack\030\007 \002(\r\022\024\n\014skill_attack\030\010 "
    "\002(\r\022\030\n\020physical_defence\030\t \002(\r\022\025\n\rmagic_d"
    "efence\030\n \002(\r\022\025\n\rskill_defence\030\013 \002(\r\022\024\n\014h"
    "ealth_point\030\014 \002(\r\022\020\n\010accurate\030\r \002(\r\022\r\n\005d"
    "odge\030\016 \002(\r\022\r\n\005wreck\030\017 \002(\r\022\r\n\005parry\030\020 \002(\r"
    "\022\027\n\017critical_strike\030\021 \002(\r\022\020\n\010tenacity\030\022 "
    "\002(\r\022\014\n\004slay\030\023 \002(\r\022\023\n\013proficiency\030\024 \002(\r\022\016"
    "\n\006vision\030\025 \002(\r\022\033\n\005birth\030\026 \002(\0132\014.CSRangeI"
    "nfo\"\272\001\n\016CSMapMonster_t\022\017\n\007raid_id\030\001 \002(\r\022"
    "\022\n\nmonster_id\030\002 \002(\r\022\032\n\022monster_value_typ"
    "e\030\003 \002(\r\022\025\n\rmonster_level\030\004 \002(\r\022\035\n\013birth_"
    "place\030\005 \002(\0132\010.CSPoint\022\"\n\014patrol_place\030\006 "
    "\002(\0132\014.CSRangeInfo\022\r\n\005elite\030\007 \002(\010\"o\n\023CSMa"
    "pMonsterGroup_t\022\024\n\014refresh_time\030\001 \002(\002\022\r\n"
    "\005times\030\002 \002(\r\022!\n\010monsters\030\003 \003(\0132\017.CSMapMo"
    "nster_t\022\020\n\010group_id\030\004 \001(\r\"\260\002\n\016CSMapConte"
    "nt_t\022\016\n\006map_id\030\001 \002(\r\022\021\n\ttrans_des\030\002 \002(\r\022"
    "\035\n\013trans_place\030\003 \002(\0132\010.CSPoint\022!\n\017birth_"
    "place_gen\030\004 \003(\0132\010.CSPoint\022+\n\rmonster_gro"
    "up\030\005 \003(\0132\024.CSMapMonsterGroup_t\022\037\n\rmonste"
    "r_birth\030\006 \003(\0132\010.CSPoint\0222\n\014monster_nums\030"
    "\007 \003(\0132\034.CSMapContent_t.CSMonsterNum\0327\n\014C"
    "SMonsterNum\022\022\n\nmonster_id\030\001 \002(\r\022\023\n\013monst"
    "er_num\030\002 \002(\r\"P\n\022CSMapContentList_t\022\023\n\013in"
    "stance_id\030\001 \002(\r\022%\n\014map_contents\030\002 \003(\0132\017."
    "CSMapContent_t\"\253\003\n\020CSMonsterValue_t\022\n\n\002i"
    "d\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\027\n\017"
    "physical_attack\030\004 \002(\r\022\024\n\014magic_attack\030\005 "
    "\002(\r\022\024\n\014skill_attack\030\006 \002(\r\022\030\n\020physical_de"
    "fence\030\007 \002(\r\022\025\n\rmagic_defence\030\010 \002(\r\022\025\n\rsk"
    "ill_defence\030\t \002(\r\022\024\n\014health_point\030\n \002(\r\022"
    "\020\n\010accurate\030\013 \002(\r\022\r\n\005dodge\030\014 \002(\r\022\r\n\005wrec"
    "k\030\r \002(\r\022\r\n\005parry\030\016 \002(\r\022\027\n\017critical_strik"
    "e\030\017 \002(\r\022\020\n\010tenacity\030\020 \002(\r\022\014\n\004slay\030\021 \002(\r\022"
    "\017\n\007courage\030\022 \002(\r\022\r\n\005charm\030\023 \002(\r\022\r\n\005trick"
    "\030\024 \002(\r\022\023\n\013proficiency\030\025 \002(\r\022\017\n\007hp_line\030\026"
    " \002(\r\")\n\022CSBattlePrepareReq\022\023\n\013instance_i"
    "d\030\001 \002(\r\"j\n\022CSBattlePrepareRsp\022)\n\014map_con"
    "tents\030\001 \002(\0132\023.CSMapContentList_t\022)\n\016mons"
    "ter_values\030\002 \003(\0132\021.CSMonsterValue_t", 1835);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_config.proto", &protobuf_RegisterTypes);
  CSRangeInfo::default_instance_ = new CSRangeInfo();
  CSMonsterInfo_t::default_instance_ = new CSMonsterInfo_t();
  CSMapMonster_t::default_instance_ = new CSMapMonster_t();
  CSMapMonsterGroup_t::default_instance_ = new CSMapMonsterGroup_t();
  CSMapContent_t::default_instance_ = new CSMapContent_t();
  CSMapContent_t_CSMonsterNum::default_instance_ = new CSMapContent_t_CSMonsterNum();
  CSMapContentList_t::default_instance_ = new CSMapContentList_t();
  CSMonsterValue_t::default_instance_ = new CSMonsterValue_t();
  CSBattlePrepareReq::default_instance_ = new CSBattlePrepareReq();
  CSBattlePrepareRsp::default_instance_ = new CSBattlePrepareRsp();
  CSRangeInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterInfo_t::default_instance_->InitAsDefaultInstance();
  CSMapMonster_t::default_instance_->InitAsDefaultInstance();
  CSMapMonsterGroup_t::default_instance_->InitAsDefaultInstance();
  CSMapContent_t::default_instance_->InitAsDefaultInstance();
  CSMapContent_t_CSMonsterNum::default_instance_->InitAsDefaultInstance();
  CSMapContentList_t::default_instance_->InitAsDefaultInstance();
  CSMonsterValue_t::default_instance_->InitAsDefaultInstance();
  CSBattlePrepareReq::default_instance_->InitAsDefaultInstance();
  CSBattlePrepareRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fconfig_2eproto {
  StaticDescriptorInitializer_cs_5fconfig_2eproto() {
    protobuf_AddDesc_cs_5fconfig_2eproto();
  }
} static_descriptor_initializer_cs_5fconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CSRangeInfo::kStartFieldNumber;
const int CSRangeInfo::kEndFieldNumber;
#endif  // !_MSC_VER

CSRangeInfo::CSRangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRangeInfo::InitAsDefaultInstance() {
  start_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSRangeInfo::CSRangeInfo(const CSRangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRangeInfo::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRangeInfo::~CSRangeInfo() {
  SharedDtor();
}

void CSRangeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void CSRangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRangeInfo_descriptor_;
}

const CSRangeInfo& CSRangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSRangeInfo* CSRangeInfo::default_instance_ = NULL;

CSRangeInfo* CSRangeInfo::New() const {
  return new CSRangeInfo;
}

void CSRangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::CSPoint::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::CSPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSPoint start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }
      
      // required .CSPoint end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSPoint start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }
  
  // required .CSPoint end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSPoint start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }
  
  // required .CSPoint end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRangeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSPoint start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }
    
    // required .CSPoint end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRangeInfo::MergeFrom(const CSRangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::CSPoint::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::CSPoint::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRangeInfo::CopyFrom(const CSRangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRangeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void CSRangeInfo::Swap(CSRangeInfo* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRangeInfo_descriptor_;
  metadata.reflection = CSRangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterInfo_t::kRaidIdFieldNumber;
const int CSMonsterInfo_t::kSpeedFieldNumber;
const int CSMonsterInfo_t::kTypeFieldNumber;
const int CSMonsterInfo_t::kIsBossFieldNumber;
const int CSMonsterInfo_t::kBodyRangeFieldNumber;
const int CSMonsterInfo_t::kPhysicalAttackFieldNumber;
const int CSMonsterInfo_t::kMagicAttackFieldNumber;
const int CSMonsterInfo_t::kSkillAttackFieldNumber;
const int CSMonsterInfo_t::kPhysicalDefenceFieldNumber;
const int CSMonsterInfo_t::kMagicDefenceFieldNumber;
const int CSMonsterInfo_t::kSkillDefenceFieldNumber;
const int CSMonsterInfo_t::kHealthPointFieldNumber;
const int CSMonsterInfo_t::kAccurateFieldNumber;
const int CSMonsterInfo_t::kDodgeFieldNumber;
const int CSMonsterInfo_t::kWreckFieldNumber;
const int CSMonsterInfo_t::kParryFieldNumber;
const int CSMonsterInfo_t::kCriticalStrikeFieldNumber;
const int CSMonsterInfo_t::kTenacityFieldNumber;
const int CSMonsterInfo_t::kSlayFieldNumber;
const int CSMonsterInfo_t::kProficiencyFieldNumber;
const int CSMonsterInfo_t::kVisionFieldNumber;
const int CSMonsterInfo_t::kBirthFieldNumber;
#endif  // !_MSC_VER

CSMonsterInfo_t::CSMonsterInfo_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterInfo_t::InitAsDefaultInstance() {
  body_range_ = const_cast< ::CSRangeInfo*>(&::CSRangeInfo::default_instance());
  birth_ = const_cast< ::CSRangeInfo*>(&::CSRangeInfo::default_instance());
}

CSMonsterInfo_t::CSMonsterInfo_t(const CSMonsterInfo_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterInfo_t::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  speed_ = 0u;
  type_ = 0u;
  is_boss_ = false;
  body_range_ = NULL;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  proficiency_ = 0u;
  vision_ = 0u;
  birth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterInfo_t::~CSMonsterInfo_t() {
  SharedDtor();
}

void CSMonsterInfo_t::SharedDtor() {
  if (this != default_instance_) {
    delete body_range_;
    delete birth_;
  }
}

void CSMonsterInfo_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterInfo_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterInfo_t_descriptor_;
}

const CSMonsterInfo_t& CSMonsterInfo_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMonsterInfo_t* CSMonsterInfo_t::default_instance_ = NULL;

CSMonsterInfo_t* CSMonsterInfo_t::New() const {
  return new CSMonsterInfo_t;
}

void CSMonsterInfo_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    speed_ = 0u;
    type_ = 0u;
    is_boss_ = false;
    if (has_body_range()) {
      if (body_range_ != NULL) body_range_->::CSRangeInfo::Clear();
    }
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    physical_defence_ = 0u;
    magic_defence_ = 0u;
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    critical_strike_ = 0u;
    tenacity_ = 0u;
    slay_ = 0u;
    proficiency_ = 0u;
    vision_ = 0u;
    if (has_birth()) {
      if (birth_ != NULL) birth_->::CSRangeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterInfo_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }
      
      // required uint32 speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_boss;
        break;
      }
      
      // required bool is_boss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_boss_)));
          set_has_is_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body_range;
        break;
      }
      
      // required .CSRangeInfo body_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_physical_attack;
        break;
      }
      
      // required uint32 physical_attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_magic_attack;
        break;
      }
      
      // required uint32 magic_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skill_attack;
        break;
      }
      
      // required uint32 skill_attack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_physical_defence;
        break;
      }
      
      // required uint32 physical_defence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magic_defence;
        break;
      }
      
      // required uint32 magic_defence = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_defence;
        break;
      }
      
      // required uint32 skill_defence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_health_point;
        break;
      }
      
      // required uint32 health_point = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_accurate;
        break;
      }
      
      // required uint32 accurate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dodge;
        break;
      }
      
      // required uint32 dodge = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wreck;
        break;
      }
      
      // required uint32 wreck = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_parry;
        break;
      }
      
      // required uint32 parry = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_critical_strike;
        break;
      }
      
      // required uint32 critical_strike = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tenacity;
        break;
      }
      
      // required uint32 tenacity = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_slay;
        break;
      }
      
      // required uint32 slay = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_proficiency;
        break;
      }
      
      // required uint32 proficiency = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vision;
        break;
      }
      
      // required uint32 vision = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_)));
          set_has_vision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_birth;
        break;
      }
      
      // required .CSRangeInfo birth = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterInfo_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }
  
  // required uint32 speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->speed(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required bool is_boss = 4;
  if (has_is_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_boss(), output);
  }
  
  // required .CSRangeInfo body_range = 5;
  if (has_body_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body_range(), output);
  }
  
  // required uint32 physical_attack = 6;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->physical_attack(), output);
  }
  
  // required uint32 magic_attack = 7;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magic_attack(), output);
  }
  
  // required uint32 skill_attack = 8;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->skill_attack(), output);
  }
  
  // required uint32 physical_defence = 9;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->physical_defence(), output);
  }
  
  // required uint32 magic_defence = 10;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->magic_defence(), output);
  }
  
  // required uint32 skill_defence = 11;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skill_defence(), output);
  }
  
  // required uint32 health_point = 12;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->health_point(), output);
  }
  
  // required uint32 accurate = 13;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->accurate(), output);
  }
  
  // required uint32 dodge = 14;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dodge(), output);
  }
  
  // required uint32 wreck = 15;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->wreck(), output);
  }
  
  // required uint32 parry = 16;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->parry(), output);
  }
  
  // required uint32 critical_strike = 17;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->critical_strike(), output);
  }
  
  // required uint32 tenacity = 18;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tenacity(), output);
  }
  
  // required uint32 slay = 19;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->slay(), output);
  }
  
  // required uint32 proficiency = 20;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->proficiency(), output);
  }
  
  // required uint32 vision = 21;
  if (has_vision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vision(), output);
  }
  
  // required .CSRangeInfo birth = 22;
  if (has_birth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->birth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterInfo_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }
  
  // required uint32 speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required bool is_boss = 4;
  if (has_is_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_boss(), target);
  }
  
  // required .CSRangeInfo body_range = 5;
  if (has_body_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body_range(), target);
  }
  
  // required uint32 physical_attack = 6;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->physical_attack(), target);
  }
  
  // required uint32 magic_attack = 7;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->magic_attack(), target);
  }
  
  // required uint32 skill_attack = 8;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->skill_attack(), target);
  }
  
  // required uint32 physical_defence = 9;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->physical_defence(), target);
  }
  
  // required uint32 magic_defence = 10;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->magic_defence(), target);
  }
  
  // required uint32 skill_defence = 11;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skill_defence(), target);
  }
  
  // required uint32 health_point = 12;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->health_point(), target);
  }
  
  // required uint32 accurate = 13;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->accurate(), target);
  }
  
  // required uint32 dodge = 14;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dodge(), target);
  }
  
  // required uint32 wreck = 15;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->wreck(), target);
  }
  
  // required uint32 parry = 16;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->parry(), target);
  }
  
  // required uint32 critical_strike = 17;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->critical_strike(), target);
  }
  
  // required uint32 tenacity = 18;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tenacity(), target);
  }
  
  // required uint32 slay = 19;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->slay(), target);
  }
  
  // required uint32 proficiency = 20;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->proficiency(), target);
  }
  
  // required uint32 vision = 21;
  if (has_vision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->vision(), target);
  }
  
  // required .CSRangeInfo birth = 22;
  if (has_birth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->birth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterInfo_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }
    
    // required uint32 speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required bool is_boss = 4;
    if (has_is_boss()) {
      total_size += 1 + 1;
    }
    
    // required .CSRangeInfo body_range = 5;
    if (has_body_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_range());
    }
    
    // required uint32 physical_attack = 6;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }
    
    // required uint32 magic_attack = 7;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }
    
    // required uint32 skill_attack = 8;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 physical_defence = 9;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }
    
    // required uint32 magic_defence = 10;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }
    
    // required uint32 skill_defence = 11;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }
    
    // required uint32 health_point = 12;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }
    
    // required uint32 accurate = 13;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }
    
    // required uint32 dodge = 14;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // required uint32 wreck = 15;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }
    
    // required uint32 parry = 16;
    if (has_parry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 critical_strike = 17;
    if (has_critical_strike()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }
    
    // required uint32 tenacity = 18;
    if (has_tenacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }
    
    // required uint32 slay = 19;
    if (has_slay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }
    
    // required uint32 proficiency = 20;
    if (has_proficiency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }
    
    // required uint32 vision = 21;
    if (has_vision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vision());
    }
    
    // required .CSRangeInfo birth = 22;
    if (has_birth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birth());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterInfo_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterInfo_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterInfo_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterInfo_t::MergeFrom(const CSMonsterInfo_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_boss()) {
      set_is_boss(from.is_boss());
    }
    if (from.has_body_range()) {
      mutable_body_range()->::CSRangeInfo::MergeFrom(from.body_range());
    }
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
    if (from.has_vision()) {
      set_vision(from.vision());
    }
    if (from.has_birth()) {
      mutable_birth()->::CSRangeInfo::MergeFrom(from.birth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterInfo_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterInfo_t::CopyFrom(const CSMonsterInfo_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterInfo_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;
  
  if (has_body_range()) {
    if (!this->body_range().IsInitialized()) return false;
  }
  if (has_birth()) {
    if (!this->birth().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterInfo_t::Swap(CSMonsterInfo_t* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(speed_, other->speed_);
    std::swap(type_, other->type_);
    std::swap(is_boss_, other->is_boss_);
    std::swap(body_range_, other->body_range_);
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(vision_, other->vision_);
    std::swap(birth_, other->birth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterInfo_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterInfo_t_descriptor_;
  metadata.reflection = CSMonsterInfo_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMapMonster_t::kRaidIdFieldNumber;
const int CSMapMonster_t::kMonsterIdFieldNumber;
const int CSMapMonster_t::kMonsterValueTypeFieldNumber;
const int CSMapMonster_t::kMonsterLevelFieldNumber;
const int CSMapMonster_t::kBirthPlaceFieldNumber;
const int CSMapMonster_t::kPatrolPlaceFieldNumber;
const int CSMapMonster_t::kEliteFieldNumber;
#endif  // !_MSC_VER

CSMapMonster_t::CSMapMonster_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMapMonster_t::InitAsDefaultInstance() {
  birth_place_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  patrol_place_ = const_cast< ::CSRangeInfo*>(&::CSRangeInfo::default_instance());
}

CSMapMonster_t::CSMapMonster_t(const CSMapMonster_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMapMonster_t::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  monster_id_ = 0u;
  monster_value_type_ = 0u;
  monster_level_ = 0u;
  birth_place_ = NULL;
  patrol_place_ = NULL;
  elite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMapMonster_t::~CSMapMonster_t() {
  SharedDtor();
}

void CSMapMonster_t::SharedDtor() {
  if (this != default_instance_) {
    delete birth_place_;
    delete patrol_place_;
  }
}

void CSMapMonster_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMapMonster_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMapMonster_t_descriptor_;
}

const CSMapMonster_t& CSMapMonster_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMapMonster_t* CSMapMonster_t::default_instance_ = NULL;

CSMapMonster_t* CSMapMonster_t::New() const {
  return new CSMapMonster_t;
}

void CSMapMonster_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    monster_id_ = 0u;
    monster_value_type_ = 0u;
    monster_level_ = 0u;
    if (has_birth_place()) {
      if (birth_place_ != NULL) birth_place_->::CSPoint::Clear();
    }
    if (has_patrol_place()) {
      if (patrol_place_ != NULL) patrol_place_->::CSRangeInfo::Clear();
    }
    elite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMapMonster_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monster_id;
        break;
      }
      
      // required uint32 monster_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_value_type;
        break;
      }
      
      // required uint32 monster_value_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_value_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_value_type_)));
          set_has_monster_value_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster_level;
        break;
      }
      
      // required uint32 monster_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_level_)));
          set_has_monster_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_birth_place;
        break;
      }
      
      // required .CSPoint birth_place = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birth_place:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birth_place()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_patrol_place;
        break;
      }
      
      // required .CSRangeInfo patrol_place = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patrol_place:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patrol_place()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_elite;
        break;
      }
      
      // required bool elite = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elite_)));
          set_has_elite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMapMonster_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }
  
  // required uint32 monster_id = 2;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monster_id(), output);
  }
  
  // required uint32 monster_value_type = 3;
  if (has_monster_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monster_value_type(), output);
  }
  
  // required uint32 monster_level = 4;
  if (has_monster_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->monster_level(), output);
  }
  
  // required .CSPoint birth_place = 5;
  if (has_birth_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->birth_place(), output);
  }
  
  // required .CSRangeInfo patrol_place = 6;
  if (has_patrol_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->patrol_place(), output);
  }
  
  // required bool elite = 7;
  if (has_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->elite(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMapMonster_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }
  
  // required uint32 monster_id = 2;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monster_id(), target);
  }
  
  // required uint32 monster_value_type = 3;
  if (has_monster_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monster_value_type(), target);
  }
  
  // required uint32 monster_level = 4;
  if (has_monster_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->monster_level(), target);
  }
  
  // required .CSPoint birth_place = 5;
  if (has_birth_place()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->birth_place(), target);
  }
  
  // required .CSRangeInfo patrol_place = 6;
  if (has_patrol_place()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->patrol_place(), target);
  }
  
  // required bool elite = 7;
  if (has_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->elite(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMapMonster_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }
    
    // required uint32 monster_id = 2;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }
    
    // required uint32 monster_value_type = 3;
    if (has_monster_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_value_type());
    }
    
    // required uint32 monster_level = 4;
    if (has_monster_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_level());
    }
    
    // required .CSPoint birth_place = 5;
    if (has_birth_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birth_place());
    }
    
    // required .CSRangeInfo patrol_place = 6;
    if (has_patrol_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patrol_place());
    }
    
    // required bool elite = 7;
    if (has_elite()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMapMonster_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMapMonster_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMapMonster_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMapMonster_t::MergeFrom(const CSMapMonster_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_monster_value_type()) {
      set_monster_value_type(from.monster_value_type());
    }
    if (from.has_monster_level()) {
      set_monster_level(from.monster_level());
    }
    if (from.has_birth_place()) {
      mutable_birth_place()->::CSPoint::MergeFrom(from.birth_place());
    }
    if (from.has_patrol_place()) {
      mutable_patrol_place()->::CSRangeInfo::MergeFrom(from.patrol_place());
    }
    if (from.has_elite()) {
      set_elite(from.elite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMapMonster_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMapMonster_t::CopyFrom(const CSMapMonster_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMapMonster_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_birth_place()) {
    if (!this->birth_place().IsInitialized()) return false;
  }
  if (has_patrol_place()) {
    if (!this->patrol_place().IsInitialized()) return false;
  }
  return true;
}

void CSMapMonster_t::Swap(CSMapMonster_t* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(monster_id_, other->monster_id_);
    std::swap(monster_value_type_, other->monster_value_type_);
    std::swap(monster_level_, other->monster_level_);
    std::swap(birth_place_, other->birth_place_);
    std::swap(patrol_place_, other->patrol_place_);
    std::swap(elite_, other->elite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMapMonster_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMapMonster_t_descriptor_;
  metadata.reflection = CSMapMonster_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMapMonsterGroup_t::kRefreshTimeFieldNumber;
const int CSMapMonsterGroup_t::kTimesFieldNumber;
const int CSMapMonsterGroup_t::kMonstersFieldNumber;
const int CSMapMonsterGroup_t::kGroupIdFieldNumber;
#endif  // !_MSC_VER

CSMapMonsterGroup_t::CSMapMonsterGroup_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMapMonsterGroup_t::InitAsDefaultInstance() {
}

CSMapMonsterGroup_t::CSMapMonsterGroup_t(const CSMapMonsterGroup_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMapMonsterGroup_t::SharedCtor() {
  _cached_size_ = 0;
  refresh_time_ = 0;
  times_ = 0u;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMapMonsterGroup_t::~CSMapMonsterGroup_t() {
  SharedDtor();
}

void CSMapMonsterGroup_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMapMonsterGroup_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMapMonsterGroup_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMapMonsterGroup_t_descriptor_;
}

const CSMapMonsterGroup_t& CSMapMonsterGroup_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMapMonsterGroup_t* CSMapMonsterGroup_t::default_instance_ = NULL;

CSMapMonsterGroup_t* CSMapMonsterGroup_t::New() const {
  return new CSMapMonsterGroup_t;
}

void CSMapMonsterGroup_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_time_ = 0;
    times_ = 0u;
    group_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMapMonsterGroup_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float refresh_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // required uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsters;
        break;
      }
      
      // repeated .CSMapMonster_t monsters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsters;
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }
      
      // optional uint32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMapMonsterGroup_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float refresh_time = 1;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->refresh_time(), output);
  }
  
  // required uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }
  
  // repeated .CSMapMonster_t monsters = 3;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsters(i), output);
  }
  
  // optional uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMapMonsterGroup_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float refresh_time = 1;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->refresh_time(), target);
  }
  
  // required uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }
  
  // repeated .CSMapMonster_t monsters = 3;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsters(i), target);
  }
  
  // optional uint32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMapMonsterGroup_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float refresh_time = 1;
    if (has_refresh_time()) {
      total_size += 1 + 4;
    }
    
    // required uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }
    
    // optional uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }
    
  }
  // repeated .CSMapMonster_t monsters = 3;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMapMonsterGroup_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMapMonsterGroup_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMapMonsterGroup_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMapMonsterGroup_t::MergeFrom(const CSMapMonsterGroup_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMapMonsterGroup_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMapMonsterGroup_t::CopyFrom(const CSMapMonsterGroup_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMapMonsterGroup_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSMapMonsterGroup_t::Swap(CSMapMonsterGroup_t* other) {
  if (other != this) {
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(times_, other->times_);
    monsters_.Swap(&other->monsters_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMapMonsterGroup_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMapMonsterGroup_t_descriptor_;
  metadata.reflection = CSMapMonsterGroup_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMapContent_t_CSMonsterNum::kMonsterIdFieldNumber;
const int CSMapContent_t_CSMonsterNum::kMonsterNumFieldNumber;
#endif  // !_MSC_VER

CSMapContent_t_CSMonsterNum::CSMapContent_t_CSMonsterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMapContent_t_CSMonsterNum::InitAsDefaultInstance() {
}

CSMapContent_t_CSMonsterNum::CSMapContent_t_CSMonsterNum(const CSMapContent_t_CSMonsterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMapContent_t_CSMonsterNum::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0u;
  monster_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMapContent_t_CSMonsterNum::~CSMapContent_t_CSMonsterNum() {
  SharedDtor();
}

void CSMapContent_t_CSMonsterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMapContent_t_CSMonsterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMapContent_t_CSMonsterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMapContent_t_CSMonsterNum_descriptor_;
}

const CSMapContent_t_CSMonsterNum& CSMapContent_t_CSMonsterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMapContent_t_CSMonsterNum* CSMapContent_t_CSMonsterNum::default_instance_ = NULL;

CSMapContent_t_CSMonsterNum* CSMapContent_t_CSMonsterNum::New() const {
  return new CSMapContent_t_CSMonsterNum;
}

void CSMapContent_t_CSMonsterNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0u;
    monster_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMapContent_t_CSMonsterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monster_num;
        break;
      }
      
      // required uint32 monster_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_num_)));
          set_has_monster_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMapContent_t_CSMonsterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }
  
  // required uint32 monster_num = 2;
  if (has_monster_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monster_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMapContent_t_CSMonsterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }
  
  // required uint32 monster_num = 2;
  if (has_monster_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monster_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMapContent_t_CSMonsterNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }
    
    // required uint32 monster_num = 2;
    if (has_monster_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMapContent_t_CSMonsterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMapContent_t_CSMonsterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMapContent_t_CSMonsterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMapContent_t_CSMonsterNum::MergeFrom(const CSMapContent_t_CSMonsterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_monster_num()) {
      set_monster_num(from.monster_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMapContent_t_CSMonsterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMapContent_t_CSMonsterNum::CopyFrom(const CSMapContent_t_CSMonsterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMapContent_t_CSMonsterNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSMapContent_t_CSMonsterNum::Swap(CSMapContent_t_CSMonsterNum* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(monster_num_, other->monster_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMapContent_t_CSMonsterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMapContent_t_CSMonsterNum_descriptor_;
  metadata.reflection = CSMapContent_t_CSMonsterNum_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSMapContent_t::kMapIdFieldNumber;
const int CSMapContent_t::kTransDesFieldNumber;
const int CSMapContent_t::kTransPlaceFieldNumber;
const int CSMapContent_t::kBirthPlaceGenFieldNumber;
const int CSMapContent_t::kMonsterGroupFieldNumber;
const int CSMapContent_t::kMonsterBirthFieldNumber;
const int CSMapContent_t::kMonsterNumsFieldNumber;
#endif  // !_MSC_VER

CSMapContent_t::CSMapContent_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMapContent_t::InitAsDefaultInstance() {
  trans_place_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMapContent_t::CSMapContent_t(const CSMapContent_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMapContent_t::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  trans_des_ = 0u;
  trans_place_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMapContent_t::~CSMapContent_t() {
  SharedDtor();
}

void CSMapContent_t::SharedDtor() {
  if (this != default_instance_) {
    delete trans_place_;
  }
}

void CSMapContent_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMapContent_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMapContent_t_descriptor_;
}

const CSMapContent_t& CSMapContent_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMapContent_t* CSMapContent_t::default_instance_ = NULL;

CSMapContent_t* CSMapContent_t::New() const {
  return new CSMapContent_t;
}

void CSMapContent_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    trans_des_ = 0u;
    if (has_trans_place()) {
      if (trans_place_ != NULL) trans_place_->::CSPoint::Clear();
    }
  }
  birth_place_gen_.Clear();
  monster_group_.Clear();
  monster_birth_.Clear();
  monster_nums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMapContent_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trans_des;
        break;
      }
      
      // required uint32 trans_des = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_des:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_des_)));
          set_has_trans_des();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trans_place;
        break;
      }
      
      // required .CSPoint trans_place = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_place:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans_place()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_birth_place_gen;
        break;
      }
      
      // repeated .CSPoint birth_place_gen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birth_place_gen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_birth_place_gen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_birth_place_gen;
        if (input->ExpectTag(42)) goto parse_monster_group;
        break;
      }
      
      // repeated .CSMapMonsterGroup_t monster_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_monster_group;
        if (input->ExpectTag(50)) goto parse_monster_birth;
        break;
      }
      
      // repeated .CSPoint monster_birth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_birth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_birth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_monster_birth;
        if (input->ExpectTag(58)) goto parse_monster_nums;
        break;
      }
      
      // repeated .CSMapContent_t.CSMonsterNum monster_nums = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_nums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_nums()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_monster_nums;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMapContent_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  // required uint32 trans_des = 2;
  if (has_trans_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trans_des(), output);
  }
  
  // required .CSPoint trans_place = 3;
  if (has_trans_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trans_place(), output);
  }
  
  // repeated .CSPoint birth_place_gen = 4;
  for (int i = 0; i < this->birth_place_gen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->birth_place_gen(i), output);
  }
  
  // repeated .CSMapMonsterGroup_t monster_group = 5;
  for (int i = 0; i < this->monster_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->monster_group(i), output);
  }
  
  // repeated .CSPoint monster_birth = 6;
  for (int i = 0; i < this->monster_birth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->monster_birth(i), output);
  }
  
  // repeated .CSMapContent_t.CSMonsterNum monster_nums = 7;
  for (int i = 0; i < this->monster_nums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->monster_nums(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMapContent_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }
  
  // required uint32 trans_des = 2;
  if (has_trans_des()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trans_des(), target);
  }
  
  // required .CSPoint trans_place = 3;
  if (has_trans_place()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trans_place(), target);
  }
  
  // repeated .CSPoint birth_place_gen = 4;
  for (int i = 0; i < this->birth_place_gen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->birth_place_gen(i), target);
  }
  
  // repeated .CSMapMonsterGroup_t monster_group = 5;
  for (int i = 0; i < this->monster_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->monster_group(i), target);
  }
  
  // repeated .CSPoint monster_birth = 6;
  for (int i = 0; i < this->monster_birth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->monster_birth(i), target);
  }
  
  // repeated .CSMapContent_t.CSMonsterNum monster_nums = 7;
  for (int i = 0; i < this->monster_nums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->monster_nums(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMapContent_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
    // required uint32 trans_des = 2;
    if (has_trans_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_des());
    }
    
    // required .CSPoint trans_place = 3;
    if (has_trans_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans_place());
    }
    
  }
  // repeated .CSPoint birth_place_gen = 4;
  total_size += 1 * this->birth_place_gen_size();
  for (int i = 0; i < this->birth_place_gen_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->birth_place_gen(i));
  }
  
  // repeated .CSMapMonsterGroup_t monster_group = 5;
  total_size += 1 * this->monster_group_size();
  for (int i = 0; i < this->monster_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_group(i));
  }
  
  // repeated .CSPoint monster_birth = 6;
  total_size += 1 * this->monster_birth_size();
  for (int i = 0; i < this->monster_birth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_birth(i));
  }
  
  // repeated .CSMapContent_t.CSMonsterNum monster_nums = 7;
  total_size += 1 * this->monster_nums_size();
  for (int i = 0; i < this->monster_nums_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_nums(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMapContent_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMapContent_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMapContent_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMapContent_t::MergeFrom(const CSMapContent_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  birth_place_gen_.MergeFrom(from.birth_place_gen_);
  monster_group_.MergeFrom(from.monster_group_);
  monster_birth_.MergeFrom(from.monster_birth_);
  monster_nums_.MergeFrom(from.monster_nums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_trans_des()) {
      set_trans_des(from.trans_des());
    }
    if (from.has_trans_place()) {
      mutable_trans_place()->::CSPoint::MergeFrom(from.trans_place());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMapContent_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMapContent_t::CopyFrom(const CSMapContent_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMapContent_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_trans_place()) {
    if (!this->trans_place().IsInitialized()) return false;
  }
  for (int i = 0; i < birth_place_gen_size(); i++) {
    if (!this->birth_place_gen(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monster_group_size(); i++) {
    if (!this->monster_group(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monster_birth_size(); i++) {
    if (!this->monster_birth(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monster_nums_size(); i++) {
    if (!this->monster_nums(i).IsInitialized()) return false;
  }
  return true;
}

void CSMapContent_t::Swap(CSMapContent_t* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(trans_des_, other->trans_des_);
    std::swap(trans_place_, other->trans_place_);
    birth_place_gen_.Swap(&other->birth_place_gen_);
    monster_group_.Swap(&other->monster_group_);
    monster_birth_.Swap(&other->monster_birth_);
    monster_nums_.Swap(&other->monster_nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMapContent_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMapContent_t_descriptor_;
  metadata.reflection = CSMapContent_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMapContentList_t::kInstanceIdFieldNumber;
const int CSMapContentList_t::kMapContentsFieldNumber;
#endif  // !_MSC_VER

CSMapContentList_t::CSMapContentList_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMapContentList_t::InitAsDefaultInstance() {
}

CSMapContentList_t::CSMapContentList_t(const CSMapContentList_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMapContentList_t::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMapContentList_t::~CSMapContentList_t() {
  SharedDtor();
}

void CSMapContentList_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMapContentList_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMapContentList_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMapContentList_t_descriptor_;
}

const CSMapContentList_t& CSMapContentList_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMapContentList_t* CSMapContentList_t::default_instance_ = NULL;

CSMapContentList_t* CSMapContentList_t::New() const {
  return new CSMapContentList_t;
}

void CSMapContentList_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
  }
  map_contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMapContentList_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map_contents;
        break;
      }
      
      // repeated .CSMapContent_t map_contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map_contents;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMapContentList_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }
  
  // repeated .CSMapContent_t map_contents = 2;
  for (int i = 0; i < this->map_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map_contents(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMapContentList_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }
  
  // repeated .CSMapContent_t map_contents = 2;
  for (int i = 0; i < this->map_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->map_contents(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMapContentList_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
  }
  // repeated .CSMapContent_t map_contents = 2;
  total_size += 1 * this->map_contents_size();
  for (int i = 0; i < this->map_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_contents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMapContentList_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMapContentList_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMapContentList_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMapContentList_t::MergeFrom(const CSMapContentList_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_contents_.MergeFrom(from.map_contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMapContentList_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMapContentList_t::CopyFrom(const CSMapContentList_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMapContentList_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < map_contents_size(); i++) {
    if (!this->map_contents(i).IsInitialized()) return false;
  }
  return true;
}

void CSMapContentList_t::Swap(CSMapContentList_t* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    map_contents_.Swap(&other->map_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMapContentList_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMapContentList_t_descriptor_;
  metadata.reflection = CSMapContentList_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterValue_t::kIdFieldNumber;
const int CSMonsterValue_t::kTypeFieldNumber;
const int CSMonsterValue_t::kLevelFieldNumber;
const int CSMonsterValue_t::kPhysicalAttackFieldNumber;
const int CSMonsterValue_t::kMagicAttackFieldNumber;
const int CSMonsterValue_t::kSkillAttackFieldNumber;
const int CSMonsterValue_t::kPhysicalDefenceFieldNumber;
const int CSMonsterValue_t::kMagicDefenceFieldNumber;
const int CSMonsterValue_t::kSkillDefenceFieldNumber;
const int CSMonsterValue_t::kHealthPointFieldNumber;
const int CSMonsterValue_t::kAccurateFieldNumber;
const int CSMonsterValue_t::kDodgeFieldNumber;
const int CSMonsterValue_t::kWreckFieldNumber;
const int CSMonsterValue_t::kParryFieldNumber;
const int CSMonsterValue_t::kCriticalStrikeFieldNumber;
const int CSMonsterValue_t::kTenacityFieldNumber;
const int CSMonsterValue_t::kSlayFieldNumber;
const int CSMonsterValue_t::kCourageFieldNumber;
const int CSMonsterValue_t::kCharmFieldNumber;
const int CSMonsterValue_t::kTrickFieldNumber;
const int CSMonsterValue_t::kProficiencyFieldNumber;
const int CSMonsterValue_t::kHpLineFieldNumber;
#endif  // !_MSC_VER

CSMonsterValue_t::CSMonsterValue_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterValue_t::InitAsDefaultInstance() {
}

CSMonsterValue_t::CSMonsterValue_t(const CSMonsterValue_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterValue_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  level_ = 0u;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  courage_ = 0u;
  charm_ = 0u;
  trick_ = 0u;
  proficiency_ = 0u;
  hp_line_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterValue_t::~CSMonsterValue_t() {
  SharedDtor();
}

void CSMonsterValue_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterValue_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterValue_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterValue_t_descriptor_;
}

const CSMonsterValue_t& CSMonsterValue_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSMonsterValue_t* CSMonsterValue_t::default_instance_ = NULL;

CSMonsterValue_t* CSMonsterValue_t::New() const {
  return new CSMonsterValue_t;
}

void CSMonsterValue_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    level_ = 0u;
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
    physical_defence_ = 0u;
    magic_defence_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
    critical_strike_ = 0u;
    tenacity_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    slay_ = 0u;
    courage_ = 0u;
    charm_ = 0u;
    trick_ = 0u;
    proficiency_ = 0u;
    hp_line_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterValue_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physical_attack;
        break;
      }
      
      // required uint32 physical_attack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_magic_attack;
        break;
      }
      
      // required uint32 magic_attack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_attack;
        break;
      }
      
      // required uint32 skill_attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_physical_defence;
        break;
      }
      
      // required uint32 physical_defence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_magic_defence;
        break;
      }
      
      // required uint32 magic_defence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill_defence;
        break;
      }
      
      // required uint32 skill_defence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_health_point;
        break;
      }
      
      // required uint32 health_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_accurate;
        break;
      }
      
      // required uint32 accurate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dodge;
        break;
      }
      
      // required uint32 dodge = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wreck;
        break;
      }
      
      // required uint32 wreck = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_parry;
        break;
      }
      
      // required uint32 parry = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_critical_strike;
        break;
      }
      
      // required uint32 critical_strike = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tenacity;
        break;
      }
      
      // required uint32 tenacity = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_slay;
        break;
      }
      
      // required uint32 slay = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_courage;
        break;
      }
      
      // required uint32 courage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_courage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &courage_)));
          set_has_courage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_charm;
        break;
      }
      
      // required uint32 charm = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_trick;
        break;
      }
      
      // required uint32 trick = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trick_)));
          set_has_trick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_proficiency;
        break;
      }
      
      // required uint32 proficiency = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hp_line;
        break;
      }
      
      // required uint32 hp_line = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_line_)));
          set_has_hp_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterValue_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // required uint32 physical_attack = 4;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->physical_attack(), output);
  }
  
  // required uint32 magic_attack = 5;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magic_attack(), output);
  }
  
  // required uint32 skill_attack = 6;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_attack(), output);
  }
  
  // required uint32 physical_defence = 7;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->physical_defence(), output);
  }
  
  // required uint32 magic_defence = 8;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->magic_defence(), output);
  }
  
  // required uint32 skill_defence = 9;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skill_defence(), output);
  }
  
  // required uint32 health_point = 10;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->health_point(), output);
  }
  
  // required uint32 accurate = 11;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->accurate(), output);
  }
  
  // required uint32 dodge = 12;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dodge(), output);
  }
  
  // required uint32 wreck = 13;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wreck(), output);
  }
  
  // required uint32 parry = 14;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->parry(), output);
  }
  
  // required uint32 critical_strike = 15;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->critical_strike(), output);
  }
  
  // required uint32 tenacity = 16;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->tenacity(), output);
  }
  
  // required uint32 slay = 17;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->slay(), output);
  }
  
  // required uint32 courage = 18;
  if (has_courage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->courage(), output);
  }
  
  // required uint32 charm = 19;
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->charm(), output);
  }
  
  // required uint32 trick = 20;
  if (has_trick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->trick(), output);
  }
  
  // required uint32 proficiency = 21;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->proficiency(), output);
  }
  
  // required uint32 hp_line = 22;
  if (has_hp_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->hp_line(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterValue_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // required uint32 physical_attack = 4;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->physical_attack(), target);
  }
  
  // required uint32 magic_attack = 5;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->magic_attack(), target);
  }
  
  // required uint32 skill_attack = 6;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_attack(), target);
  }
  
  // required uint32 physical_defence = 7;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->physical_defence(), target);
  }
  
  // required uint32 magic_defence = 8;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->magic_defence(), target);
  }
  
  // required uint32 skill_defence = 9;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skill_defence(), target);
  }
  
  // required uint32 health_point = 10;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->health_point(), target);
  }
  
  // required uint32 accurate = 11;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->accurate(), target);
  }
  
  // required uint32 dodge = 12;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dodge(), target);
  }
  
  // required uint32 wreck = 13;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wreck(), target);
  }
  
  // required uint32 parry = 14;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->parry(), target);
  }
  
  // required uint32 critical_strike = 15;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->critical_strike(), target);
  }
  
  // required uint32 tenacity = 16;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->tenacity(), target);
  }
  
  // required uint32 slay = 17;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->slay(), target);
  }
  
  // required uint32 courage = 18;
  if (has_courage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->courage(), target);
  }
  
  // required uint32 charm = 19;
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->charm(), target);
  }
  
  // required uint32 trick = 20;
  if (has_trick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->trick(), target);
  }
  
  // required uint32 proficiency = 21;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->proficiency(), target);
  }
  
  // required uint32 hp_line = 22;
  if (has_hp_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->hp_line(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterValue_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 physical_attack = 4;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }
    
    // required uint32 magic_attack = 5;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }
    
    // required uint32 skill_attack = 6;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }
    
    // required uint32 physical_defence = 7;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }
    
    // required uint32 magic_defence = 8;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 skill_defence = 9;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }
    
    // required uint32 health_point = 10;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }
    
    // required uint32 accurate = 11;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }
    
    // required uint32 dodge = 12;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // required uint32 wreck = 13;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }
    
    // required uint32 parry = 14;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }
    
    // required uint32 critical_strike = 15;
    if (has_critical_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }
    
    // required uint32 tenacity = 16;
    if (has_tenacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 slay = 17;
    if (has_slay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }
    
    // required uint32 courage = 18;
    if (has_courage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->courage());
    }
    
    // required uint32 charm = 19;
    if (has_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }
    
    // required uint32 trick = 20;
    if (has_trick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trick());
    }
    
    // required uint32 proficiency = 21;
    if (has_proficiency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }
    
    // required uint32 hp_line = 22;
    if (has_hp_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp_line());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterValue_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterValue_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterValue_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterValue_t::MergeFrom(const CSMonsterValue_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_courage()) {
      set_courage(from.courage());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_trick()) {
      set_trick(from.trick());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
    if (from.has_hp_line()) {
      set_hp_line(from.hp_line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterValue_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterValue_t::CopyFrom(const CSMonsterValue_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterValue_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;
  
  return true;
}

void CSMonsterValue_t::Swap(CSMonsterValue_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(courage_, other->courage_);
    std::swap(charm_, other->charm_);
    std::swap(trick_, other->trick_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(hp_line_, other->hp_line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterValue_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterValue_t_descriptor_;
  metadata.reflection = CSMonsterValue_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattlePrepareReq::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

CSBattlePrepareReq::CSBattlePrepareReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePrepareReq::InitAsDefaultInstance() {
}

CSBattlePrepareReq::CSBattlePrepareReq(const CSBattlePrepareReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePrepareReq::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePrepareReq::~CSBattlePrepareReq() {
  SharedDtor();
}

void CSBattlePrepareReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePrepareReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePrepareReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePrepareReq_descriptor_;
}

const CSBattlePrepareReq& CSBattlePrepareReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSBattlePrepareReq* CSBattlePrepareReq::default_instance_ = NULL;

CSBattlePrepareReq* CSBattlePrepareReq::New() const {
  return new CSBattlePrepareReq;
}

void CSBattlePrepareReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePrepareReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattlePrepareReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePrepareReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePrepareReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePrepareReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePrepareReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePrepareReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePrepareReq::MergeFrom(const CSBattlePrepareReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePrepareReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePrepareReq::CopyFrom(const CSBattlePrepareReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePrepareReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSBattlePrepareReq::Swap(CSBattlePrepareReq* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePrepareReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePrepareReq_descriptor_;
  metadata.reflection = CSBattlePrepareReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattlePrepareRsp::kMapContentsFieldNumber;
const int CSBattlePrepareRsp::kMonsterValuesFieldNumber;
#endif  // !_MSC_VER

CSBattlePrepareRsp::CSBattlePrepareRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePrepareRsp::InitAsDefaultInstance() {
  map_contents_ = const_cast< ::CSMapContentList_t*>(&::CSMapContentList_t::default_instance());
}

CSBattlePrepareRsp::CSBattlePrepareRsp(const CSBattlePrepareRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePrepareRsp::SharedCtor() {
  _cached_size_ = 0;
  map_contents_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePrepareRsp::~CSBattlePrepareRsp() {
  SharedDtor();
}

void CSBattlePrepareRsp::SharedDtor() {
  if (this != default_instance_) {
    delete map_contents_;
  }
}

void CSBattlePrepareRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePrepareRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePrepareRsp_descriptor_;
}

const CSBattlePrepareRsp& CSBattlePrepareRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fconfig_2eproto();  return *default_instance_;
}

CSBattlePrepareRsp* CSBattlePrepareRsp::default_instance_ = NULL;

CSBattlePrepareRsp* CSBattlePrepareRsp::New() const {
  return new CSBattlePrepareRsp;
}

void CSBattlePrepareRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_contents()) {
      if (map_contents_ != NULL) map_contents_->::CSMapContentList_t::Clear();
    }
  }
  monster_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePrepareRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSMapContentList_t map_contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_values;
        break;
      }
      
      // repeated .CSMonsterValue_t monster_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattlePrepareRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSMapContentList_t map_contents = 1;
  if (has_map_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_contents(), output);
  }
  
  // repeated .CSMonsterValue_t monster_values = 2;
  for (int i = 0; i < this->monster_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster_values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePrepareRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSMapContentList_t map_contents = 1;
  if (has_map_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_contents(), target);
  }
  
  // repeated .CSMonsterValue_t monster_values = 2;
  for (int i = 0; i < this->monster_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster_values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePrepareRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSMapContentList_t map_contents = 1;
    if (has_map_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_contents());
    }
    
  }
  // repeated .CSMonsterValue_t monster_values = 2;
  total_size += 1 * this->monster_values_size();
  for (int i = 0; i < this->monster_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePrepareRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePrepareRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePrepareRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePrepareRsp::MergeFrom(const CSBattlePrepareRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_values_.MergeFrom(from.monster_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_contents()) {
      mutable_map_contents()->::CSMapContentList_t::MergeFrom(from.map_contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePrepareRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePrepareRsp::CopyFrom(const CSBattlePrepareRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePrepareRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_map_contents()) {
    if (!this->map_contents().IsInitialized()) return false;
  }
  for (int i = 0; i < monster_values_size(); i++) {
    if (!this->monster_values(i).IsInitialized()) return false;
  }
  return true;
}

void CSBattlePrepareRsp::Swap(CSBattlePrepareRsp* other) {
  if (other != this) {
    std::swap(map_contents_, other->map_contents_);
    monster_values_.Swap(&other->monster_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePrepareRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePrepareRsp_descriptor_;
  metadata.reflection = CSBattlePrepareRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
