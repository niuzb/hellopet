// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_basic.proto

#ifndef PROTOBUF_cs_5fbasic_2eproto__INCLUDED
#define PROTOBUF_cs_5fbasic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "head.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fbasic_2eproto();
void protobuf_AssignDesc_cs_5fbasic_2eproto();
void protobuf_ShutdownFile_cs_5fbasic_2eproto();

class CSMessageHeader;
class ErrorCode;
class CSErrorCode;
class CSCheckSessionReq;
class CSCheckSessionRsp;
class CSGetRoleListReq;
class CSGetRoleListRsp;
class CSGetRoleListRsp_Roles;
class CSCreateRoleReq;
class CSCreateRoleRsp;
class CSLoginReq;
class CSLoginRsp;
class CSCrtRoleReq;
class CSDelRoleReq;
class CSCrtRoleRsp;
class CSQueryShardReq;
class CSServerBase;
class CSShardBase;
class CSQueryShardRsp;
class FlushOnline;
class FlushServer;
class PlayerOffline;
class CSPingReq;
class CSPingRsp;
class CSTaskAccept;
class CSNickNameReq;
class CSNickNameRsp;
class CSLoginAnnouncementReq;

enum CSMessageConst {
  cs_msg_min_size = 10,
  cs_msg_max_size = 65537
};
bool CSMessageConst_IsValid(int value);
const CSMessageConst CSMessageConst_MIN = cs_msg_min_size;
const CSMessageConst CSMessageConst_MAX = cs_msg_max_size;
const int CSMessageConst_ARRAYSIZE = CSMessageConst_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSMessageConst_descriptor();
inline const ::std::string& CSMessageConst_Name(CSMessageConst value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSMessageConst_descriptor(), value);
}
inline bool CSMessageConst_Parse(
    const ::std::string& name, CSMessageConst* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSMessageConst>(
    CSMessageConst_descriptor(), name, value);
}
// ===================================================================

class CSMessageHeader : public ::google::protobuf::Message {
 public:
  CSMessageHeader();
  virtual ~CSMessageHeader();
  
  CSMessageHeader(const CSMessageHeader& from);
  
  inline CSMessageHeader& operator=(const CSMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMessageHeader& default_instance();
  
  void Swap(CSMessageHeader* other);
  
  // implements Message ----------------------------------------------
  
  CSMessageHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMessageHeader& from);
  void MergeFrom(const CSMessageHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .head_msg.CSMsgName msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline head_msg::CSMsgName msg_id() const;
  inline void set_msg_id(head_msg::CSMsgName value);
  
  // optional uint32 errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint64 gateway_session = 3;
  inline bool has_gateway_session() const;
  inline void clear_gateway_session();
  static const int kGatewaySessionFieldNumber = 3;
  inline ::google::protobuf::uint64 gateway_session() const;
  inline void set_gateway_session(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CSMessageHeader)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_gateway_session();
  inline void clear_has_gateway_session();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int msg_id_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint64 gateway_session_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSMessageHeader* default_instance_;
};
// -------------------------------------------------------------------

class ErrorCode : public ::google::protobuf::Message {
 public:
  ErrorCode();
  virtual ~ErrorCode();
  
  ErrorCode(const ErrorCode& from);
  
  inline ErrorCode& operator=(const ErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorCode& default_instance();
  
  void Swap(ErrorCode* other);
  
  // implements Message ----------------------------------------------
  
  ErrorCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorCode& from);
  void MergeFrom(const ErrorCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ErrorCode)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static ErrorCode* default_instance_;
};
// -------------------------------------------------------------------

class CSErrorCode : public ::google::protobuf::Message {
 public:
  CSErrorCode();
  virtual ~CSErrorCode();
  
  CSErrorCode(const CSErrorCode& from);
  
  inline CSErrorCode& operator=(const CSErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSErrorCode& default_instance();
  
  void Swap(CSErrorCode* other);
  
  // implements Message ----------------------------------------------
  
  CSErrorCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSErrorCode& from);
  void MergeFrom(const CSErrorCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // required uint32 param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSErrorCode)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_param();
  inline void clear_has_param();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSErrorCode* default_instance_;
};
// -------------------------------------------------------------------

class CSCheckSessionReq : public ::google::protobuf::Message {
 public:
  CSCheckSessionReq();
  virtual ~CSCheckSessionReq();
  
  CSCheckSessionReq(const CSCheckSessionReq& from);
  
  inline CSCheckSessionReq& operator=(const CSCheckSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCheckSessionReq& default_instance();
  
  void Swap(CSCheckSessionReq* other);
  
  // implements Message ----------------------------------------------
  
  CSCheckSessionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCheckSessionReq& from);
  void MergeFrom(const CSCheckSessionReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes sess_id = 1;
  inline bool has_sess_id() const;
  inline void clear_sess_id();
  static const int kSessIdFieldNumber = 1;
  inline const ::std::string& sess_id() const;
  inline void set_sess_id(const ::std::string& value);
  inline void set_sess_id(const char* value);
  inline void set_sess_id(const void* value, size_t size);
  inline ::std::string* mutable_sess_id();
  inline ::std::string* release_sess_id();
  
  // required int32 channel_id_self = 2;
  inline bool has_channel_id_self() const;
  inline void clear_channel_id_self();
  static const int kChannelIdSelfFieldNumber = 2;
  inline ::google::protobuf::int32 channel_id_self() const;
  inline void set_channel_id_self(::google::protobuf::int32 value);
  
  // optional int32 server_id = 3 [default = 0];
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional uint32 user_id = 4 [default = 0];
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // optional bytes app_id = 5 [default = ""];
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 5;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const void* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  
  // optional bytes app_key = 6 [default = ""];
  inline bool has_app_key() const;
  inline void clear_app_key();
  static const int kAppKeyFieldNumber = 6;
  inline const ::std::string& app_key() const;
  inline void set_app_key(const ::std::string& value);
  inline void set_app_key(const char* value);
  inline void set_app_key(const void* value, size_t size);
  inline ::std::string* mutable_app_key();
  inline ::std::string* release_app_key();
  
  // optional bytes cp_id = 7 [default = ""];
  inline bool has_cp_id() const;
  inline void clear_cp_id();
  static const int kCpIdFieldNumber = 7;
  inline const ::std::string& cp_id() const;
  inline void set_cp_id(const ::std::string& value);
  inline void set_cp_id(const char* value);
  inline void set_cp_id(const void* value, size_t size);
  inline ::std::string* mutable_cp_id();
  inline ::std::string* release_cp_id();
  
  // optional bytes channel_id = 8 [default = ""];
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 8;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const void* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  
  // optional bytes extra_data = 9 [default = ""];
  inline bool has_extra_data() const;
  inline void clear_extra_data();
  static const int kExtraDataFieldNumber = 9;
  inline const ::std::string& extra_data() const;
  inline void set_extra_data(const ::std::string& value);
  inline void set_extra_data(const char* value);
  inline void set_extra_data(const void* value, size_t size);
  inline ::std::string* mutable_extra_data();
  inline ::std::string* release_extra_data();
  
  // optional uint32 game_id = 10 [default = 0];
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 10;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCheckSessionReq)
 private:
  inline void set_has_sess_id();
  inline void clear_has_sess_id();
  inline void set_has_channel_id_self();
  inline void clear_has_channel_id_self();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_app_key();
  inline void clear_has_app_key();
  inline void set_has_cp_id();
  inline void clear_has_cp_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_extra_data();
  inline void clear_has_extra_data();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sess_id_;
  ::google::protobuf::int32 channel_id_self_;
  ::google::protobuf::int32 server_id_;
  ::std::string* app_id_;
  ::std::string* app_key_;
  ::std::string* cp_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 game_id_;
  ::std::string* channel_id_;
  ::std::string* extra_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSCheckSessionReq* default_instance_;
};
// -------------------------------------------------------------------

class CSCheckSessionRsp : public ::google::protobuf::Message {
 public:
  CSCheckSessionRsp();
  virtual ~CSCheckSessionRsp();
  
  CSCheckSessionRsp(const CSCheckSessionRsp& from);
  
  inline CSCheckSessionRsp& operator=(const CSCheckSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCheckSessionRsp& default_instance();
  
  void Swap(CSCheckSessionRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSCheckSessionRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCheckSessionRsp& from);
  void MergeFrom(const CSCheckSessionRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required int32 channel_id = 2 [default = 0];
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);
  
  // optional bytes access_token = 3 [default = ""];
  inline bool has_access_token() const;
  inline void clear_access_token();
  static const int kAccessTokenFieldNumber = 3;
  inline const ::std::string& access_token() const;
  inline void set_access_token(const ::std::string& value);
  inline void set_access_token(const char* value);
  inline void set_access_token(const void* value, size_t size);
  inline ::std::string* mutable_access_token();
  inline ::std::string* release_access_token();
  
  // optional bytes extra_data = 4 [default = ""];
  inline bool has_extra_data() const;
  inline void clear_extra_data();
  static const int kExtraDataFieldNumber = 4;
  inline const ::std::string& extra_data() const;
  inline void set_extra_data(const ::std::string& value);
  inline void set_extra_data(const char* value);
  inline void set_extra_data(const void* value, size_t size);
  inline ::std::string* mutable_extra_data();
  inline ::std::string* release_extra_data();
  
  // @@protoc_insertion_point(class_scope:CSCheckSessionRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_access_token();
  inline void clear_has_access_token();
  inline void set_has_extra_data();
  inline void clear_has_extra_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::int32 channel_id_;
  ::std::string* access_token_;
  ::std::string* extra_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSCheckSessionRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSGetRoleListReq : public ::google::protobuf::Message {
 public:
  CSGetRoleListReq();
  virtual ~CSGetRoleListReq();
  
  CSGetRoleListReq(const CSGetRoleListReq& from);
  
  inline CSGetRoleListReq& operator=(const CSGetRoleListReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGetRoleListReq& default_instance();
  
  void Swap(CSGetRoleListReq* other);
  
  // implements Message ----------------------------------------------
  
  CSGetRoleListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGetRoleListReq& from);
  void MergeFrom(const CSGetRoleListReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSGetRoleListReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSGetRoleListReq* default_instance_;
};
// -------------------------------------------------------------------

class CSGetRoleListRsp_Roles : public ::google::protobuf::Message {
 public:
  CSGetRoleListRsp_Roles();
  virtual ~CSGetRoleListRsp_Roles();
  
  CSGetRoleListRsp_Roles(const CSGetRoleListRsp_Roles& from);
  
  inline CSGetRoleListRsp_Roles& operator=(const CSGetRoleListRsp_Roles& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGetRoleListRsp_Roles& default_instance();
  
  void Swap(CSGetRoleListRsp_Roles* other);
  
  // implements Message ----------------------------------------------
  
  CSGetRoleListRsp_Roles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGetRoleListRsp_Roles& from);
  void MergeFrom(const CSGetRoleListRsp_Roles& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSGetRoleListRsp.Roles)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSGetRoleListRsp_Roles* default_instance_;
};
// -------------------------------------------------------------------

class CSGetRoleListRsp : public ::google::protobuf::Message {
 public:
  CSGetRoleListRsp();
  virtual ~CSGetRoleListRsp();
  
  CSGetRoleListRsp(const CSGetRoleListRsp& from);
  
  inline CSGetRoleListRsp& operator=(const CSGetRoleListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGetRoleListRsp& default_instance();
  
  void Swap(CSGetRoleListRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSGetRoleListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGetRoleListRsp& from);
  void MergeFrom(const CSGetRoleListRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSGetRoleListRsp_Roles Roles;
  
  // accessors -------------------------------------------------------
  
  // repeated .CSGetRoleListRsp.Roles roles = 1;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 1;
  inline const ::CSGetRoleListRsp_Roles& roles(int index) const;
  inline ::CSGetRoleListRsp_Roles* mutable_roles(int index);
  inline ::CSGetRoleListRsp_Roles* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::CSGetRoleListRsp_Roles >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSGetRoleListRsp_Roles >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:CSGetRoleListRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSGetRoleListRsp_Roles > roles_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSGetRoleListRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSCreateRoleReq : public ::google::protobuf::Message {
 public:
  CSCreateRoleReq();
  virtual ~CSCreateRoleReq();
  
  CSCreateRoleReq(const CSCreateRoleReq& from);
  
  inline CSCreateRoleReq& operator=(const CSCreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCreateRoleReq& default_instance();
  
  void Swap(CSCreateRoleReq* other);
  
  // implements Message ----------------------------------------------
  
  CSCreateRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCreateRoleReq& from);
  void MergeFrom(const CSCreateRoleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 role_type = 2;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCreateRoleReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 role_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSCreateRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSCreateRoleRsp : public ::google::protobuf::Message {
 public:
  CSCreateRoleRsp();
  virtual ~CSCreateRoleRsp();
  
  CSCreateRoleRsp(const CSCreateRoleRsp& from);
  
  inline CSCreateRoleRsp& operator=(const CSCreateRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCreateRoleRsp& default_instance();
  
  void Swap(CSCreateRoleRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSCreateRoleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCreateRoleRsp& from);
  void MergeFrom(const CSCreateRoleRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 role_type = 5;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCreateRoleRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::std::string* name_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 role_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSCreateRoleRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSLoginReq : public ::google::protobuf::Message {
 public:
  CSLoginReq();
  virtual ~CSLoginReq();
  
  CSLoginReq(const CSLoginReq& from);
  
  inline CSLoginReq& operator=(const CSLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLoginReq& default_instance();
  
  void Swap(CSLoginReq* other);
  
  // implements Message ----------------------------------------------
  
  CSLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSLoginReq& from);
  void MergeFrom(const CSLoginReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 server_id = 4;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // optional uint64 tokenid = 6;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 6;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CSLoginReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_tokenid();
  inline void clear_has_tokenid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint64 tokenid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class CSLoginRsp : public ::google::protobuf::Message {
 public:
  CSLoginRsp();
  virtual ~CSLoginRsp();
  
  CSLoginRsp(const CSLoginRsp& from);
  
  inline CSLoginRsp& operator=(const CSLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLoginRsp& default_instance();
  
  void Swap(CSLoginRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSLoginRsp& from);
  void MergeFrom(const CSLoginRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 tokenid = 1;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 1;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);
  
  // required uint32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 3;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 4;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 4;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 lv = 6;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 6;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // required uint32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // required uint32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSLoginRsp)
 private:
  inline void set_has_tokenid();
  inline void clear_has_tokenid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 tokenid_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::std::string* name_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSCrtRoleReq : public ::google::protobuf::Message {
 public:
  CSCrtRoleReq();
  virtual ~CSCrtRoleReq();
  
  CSCrtRoleReq(const CSCrtRoleReq& from);
  
  inline CSCrtRoleReq& operator=(const CSCrtRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCrtRoleReq& default_instance();
  
  void Swap(CSCrtRoleReq* other);
  
  // implements Message ----------------------------------------------
  
  CSCrtRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCrtRoleReq& from);
  void MergeFrom(const CSCrtRoleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 role_type = 4;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCrtRoleReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 channel_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 role_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSCrtRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSDelRoleReq : public ::google::protobuf::Message {
 public:
  CSDelRoleReq();
  virtual ~CSDelRoleReq();
  
  CSDelRoleReq(const CSDelRoleReq& from);
  
  inline CSDelRoleReq& operator=(const CSDelRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSDelRoleReq& default_instance();
  
  void Swap(CSDelRoleReq* other);
  
  // implements Message ----------------------------------------------
  
  CSDelRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSDelRoleReq& from);
  void MergeFrom(const CSDelRoleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSDelRoleReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSDelRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSCrtRoleRsp : public ::google::protobuf::Message {
 public:
  CSCrtRoleRsp();
  virtual ~CSCrtRoleRsp();
  
  CSCrtRoleRsp(const CSCrtRoleRsp& from);
  
  inline CSCrtRoleRsp& operator=(const CSCrtRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCrtRoleRsp& default_instance();
  
  void Swap(CSCrtRoleRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSCrtRoleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCrtRoleRsp& from);
  void MergeFrom(const CSCrtRoleRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 tokenid = 1;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 1;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);
  
  // required uint32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
  // required uint32 xpos = 3;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 3;
  inline ::google::protobuf::uint32 xpos() const;
  inline void set_xpos(::google::protobuf::uint32 value);
  
  // required uint32 ypos = 4;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 4;
  inline ::google::protobuf::uint32 ypos() const;
  inline void set_ypos(::google::protobuf::uint32 value);
  
  // required uint32 orient = 5;
  inline bool has_orient() const;
  inline void clear_orient();
  static const int kOrientFieldNumber = 5;
  inline ::google::protobuf::uint32 orient() const;
  inline void set_orient(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCrtRoleRsp)
 private:
  inline void set_has_tokenid();
  inline void clear_has_tokenid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_orient();
  inline void clear_has_orient();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 tokenid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 xpos_;
  ::google::protobuf::uint32 ypos_;
  ::google::protobuf::uint32 orient_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSCrtRoleRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSQueryShardReq : public ::google::protobuf::Message {
 public:
  CSQueryShardReq();
  virtual ~CSQueryShardReq();
  
  CSQueryShardReq(const CSQueryShardReq& from);
  
  inline CSQueryShardReq& operator=(const CSQueryShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSQueryShardReq& default_instance();
  
  void Swap(CSQueryShardReq* other);
  
  // implements Message ----------------------------------------------
  
  CSQueryShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSQueryShardReq& from);
  void MergeFrom(const CSQueryShardReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSQueryShardReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSQueryShardReq* default_instance_;
};
// -------------------------------------------------------------------

class CSServerBase : public ::google::protobuf::Message {
 public:
  CSServerBase();
  virtual ~CSServerBase();
  
  CSServerBase(const CSServerBase& from);
  
  inline CSServerBase& operator=(const CSServerBase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSServerBase& default_instance();
  
  void Swap(CSServerBase* other);
  
  // implements Message ----------------------------------------------
  
  CSServerBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSServerBase& from);
  void MergeFrom(const CSServerBase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // required bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // required uint32 online = 4;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 4;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);
  
  // required uint32 newsvr = 5;
  inline bool has_newsvr() const;
  inline void clear_newsvr();
  static const int kNewsvrFieldNumber = 5;
  inline ::google::protobuf::uint32 newsvr() const;
  inline void set_newsvr(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSServerBase)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_newsvr();
  inline void clear_has_newsvr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* desc_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 online_;
  ::google::protobuf::uint32 newsvr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSServerBase* default_instance_;
};
// -------------------------------------------------------------------

class CSShardBase : public ::google::protobuf::Message {
 public:
  CSShardBase();
  virtual ~CSShardBase();
  
  CSShardBase(const CSShardBase& from);
  
  inline CSShardBase& operator=(const CSShardBase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSShardBase& default_instance();
  
  void Swap(CSShardBase* other);
  
  // implements Message ----------------------------------------------
  
  CSShardBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSShardBase& from);
  void MergeFrom(const CSShardBase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 os = 2;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 2;
  inline ::google::protobuf::uint32 os() const;
  inline void set_os(::google::protobuf::uint32 value);
  
  // required uint32 provider = 3;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline ::google::protobuf::uint32 provider() const;
  inline void set_provider(::google::protobuf::uint32 value);
  
  // repeated .CSServerBase svrs = 4;
  inline int svrs_size() const;
  inline void clear_svrs();
  static const int kSvrsFieldNumber = 4;
  inline const ::CSServerBase& svrs(int index) const;
  inline ::CSServerBase* mutable_svrs(int index);
  inline ::CSServerBase* add_svrs();
  inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
      svrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
      mutable_svrs();
  
  // @@protoc_insertion_point(class_scope:CSShardBase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_provider();
  inline void clear_has_provider();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 os_;
  ::google::protobuf::RepeatedPtrField< ::CSServerBase > svrs_;
  ::google::protobuf::uint32 provider_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSShardBase* default_instance_;
};
// -------------------------------------------------------------------

class CSQueryShardRsp : public ::google::protobuf::Message {
 public:
  CSQueryShardRsp();
  virtual ~CSQueryShardRsp();
  
  CSQueryShardRsp(const CSQueryShardRsp& from);
  
  inline CSQueryShardRsp& operator=(const CSQueryShardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSQueryShardRsp& default_instance();
  
  void Swap(CSQueryShardRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSQueryShardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSQueryShardRsp& from);
  void MergeFrom(const CSQueryShardRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .CSShardBase shards = 1;
  inline int shards_size() const;
  inline void clear_shards();
  static const int kShardsFieldNumber = 1;
  inline const ::CSShardBase& shards(int index) const;
  inline ::CSShardBase* mutable_shards(int index);
  inline ::CSShardBase* add_shards();
  inline const ::google::protobuf::RepeatedPtrField< ::CSShardBase >&
      shards() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSShardBase >*
      mutable_shards();
  
  // @@protoc_insertion_point(class_scope:CSQueryShardRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSShardBase > shards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSQueryShardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FlushOnline : public ::google::protobuf::Message {
 public:
  FlushOnline();
  virtual ~FlushOnline();
  
  FlushOnline(const FlushOnline& from);
  
  inline FlushOnline& operator=(const FlushOnline& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushOnline& default_instance();
  
  void Swap(FlushOnline* other);
  
  // implements Message ----------------------------------------------
  
  FlushOnline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushOnline& from);
  void MergeFrom(const FlushOnline& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:FlushOnline)
 private:
  inline void set_has_online();
  inline void clear_has_online();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 online_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static FlushOnline* default_instance_;
};
// -------------------------------------------------------------------

class FlushServer : public ::google::protobuf::Message {
 public:
  FlushServer();
  virtual ~FlushServer();
  
  FlushServer(const FlushServer& from);
  
  inline FlushServer& operator=(const FlushServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushServer& default_instance();
  
  void Swap(FlushServer* other);
  
  // implements Message ----------------------------------------------
  
  FlushServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushServer& from);
  void MergeFrom(const FlushServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated .CSServerBase svrs = 2;
  inline int svrs_size() const;
  inline void clear_svrs();
  static const int kSvrsFieldNumber = 2;
  inline const ::CSServerBase& svrs(int index) const;
  inline ::CSServerBase* mutable_svrs(int index);
  inline ::CSServerBase* add_svrs();
  inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
      svrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
      mutable_svrs();
  
  // @@protoc_insertion_point(class_scope:FlushServer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSServerBase > svrs_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static FlushServer* default_instance_;
};
// -------------------------------------------------------------------

class PlayerOffline : public ::google::protobuf::Message {
 public:
  PlayerOffline();
  virtual ~PlayerOffline();
  
  PlayerOffline(const PlayerOffline& from);
  
  inline PlayerOffline& operator=(const PlayerOffline& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerOffline& default_instance();
  
  void Swap(PlayerOffline* other);
  
  // implements Message ----------------------------------------------
  
  PlayerOffline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerOffline& from);
  void MergeFrom(const PlayerOffline& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PlayerOffline)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerOffline* default_instance_;
};
// -------------------------------------------------------------------

class CSPingReq : public ::google::protobuf::Message {
 public:
  CSPingReq();
  virtual ~CSPingReq();
  
  CSPingReq(const CSPingReq& from);
  
  inline CSPingReq& operator=(const CSPingReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPingReq& default_instance();
  
  void Swap(CSPingReq* other);
  
  // implements Message ----------------------------------------------
  
  CSPingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPingReq& from);
  void MergeFrom(const CSPingReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 clientTime = 1;
  inline bool has_clienttime() const;
  inline void clear_clienttime();
  static const int kClientTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 clienttime() const;
  inline void set_clienttime(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CSPingReq)
 private:
  inline void set_has_clienttime();
  inline void clear_has_clienttime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 clienttime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSPingReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPingRsp : public ::google::protobuf::Message {
 public:
  CSPingRsp();
  virtual ~CSPingRsp();
  
  CSPingRsp(const CSPingRsp& from);
  
  inline CSPingRsp& operator=(const CSPingRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPingRsp& default_instance();
  
  void Swap(CSPingRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSPingRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPingRsp& from);
  void MergeFrom(const CSPingRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 clientTime = 1;
  inline bool has_clienttime() const;
  inline void clear_clienttime();
  static const int kClientTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 clienttime() const;
  inline void set_clienttime(::google::protobuf::uint64 value);
  
  // required uint64 serverTime = 2;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 servertime() const;
  inline void set_servertime(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:CSPingRsp)
 private:
  inline void set_has_clienttime();
  inline void clear_has_clienttime();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 clienttime_;
  ::google::protobuf::uint64 servertime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSPingRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSTaskAccept : public ::google::protobuf::Message {
 public:
  CSTaskAccept();
  virtual ~CSTaskAccept();
  
  CSTaskAccept(const CSTaskAccept& from);
  
  inline CSTaskAccept& operator=(const CSTaskAccept& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSTaskAccept& default_instance();
  
  void Swap(CSTaskAccept* other);
  
  // implements Message ----------------------------------------------
  
  CSTaskAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSTaskAccept& from);
  void MergeFrom(const CSTaskAccept& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSTaskAccept)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSTaskAccept* default_instance_;
};
// -------------------------------------------------------------------

class CSNickNameReq : public ::google::protobuf::Message {
 public:
  CSNickNameReq();
  virtual ~CSNickNameReq();
  
  CSNickNameReq(const CSNickNameReq& from);
  
  inline CSNickNameReq& operator=(const CSNickNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSNickNameReq& default_instance();
  
  void Swap(CSNickNameReq* other);
  
  // implements Message ----------------------------------------------
  
  CSNickNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSNickNameReq& from);
  void MergeFrom(const CSNickNameReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 sexual = 1;
  inline bool has_sexual() const;
  inline void clear_sexual();
  static const int kSexualFieldNumber = 1;
  inline ::google::protobuf::uint32 sexual() const;
  inline void set_sexual(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSNickNameReq)
 private:
  inline void set_has_sexual();
  inline void clear_has_sexual();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sexual_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSNickNameReq* default_instance_;
};
// -------------------------------------------------------------------

class CSNickNameRsp : public ::google::protobuf::Message {
 public:
  CSNickNameRsp();
  virtual ~CSNickNameRsp();
  
  CSNickNameRsp(const CSNickNameRsp& from);
  
  inline CSNickNameRsp& operator=(const CSNickNameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSNickNameRsp& default_instance();
  
  void Swap(CSNickNameRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSNickNameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSNickNameRsp& from);
  void MergeFrom(const CSNickNameRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes nick = 1;
  inline int nick_size() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 1;
  inline const ::std::string& nick(int index) const;
  inline ::std::string* mutable_nick(int index);
  inline void set_nick(int index, const ::std::string& value);
  inline void set_nick(int index, const char* value);
  inline void set_nick(int index, const void* value, size_t size);
  inline ::std::string* add_nick();
  inline void add_nick(const ::std::string& value);
  inline void add_nick(const char* value);
  inline void add_nick(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nick() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nick();
  
  // required uint32 sexual = 2;
  inline bool has_sexual() const;
  inline void clear_sexual();
  static const int kSexualFieldNumber = 2;
  inline ::google::protobuf::uint32 sexual() const;
  inline void set_sexual(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSNickNameRsp)
 private:
  inline void set_has_sexual();
  inline void clear_has_sexual();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> nick_;
  ::google::protobuf::uint32 sexual_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSNickNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSLoginAnnouncementReq : public ::google::protobuf::Message {
 public:
  CSLoginAnnouncementReq();
  virtual ~CSLoginAnnouncementReq();
  
  CSLoginAnnouncementReq(const CSLoginAnnouncementReq& from);
  
  inline CSLoginAnnouncementReq& operator=(const CSLoginAnnouncementReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLoginAnnouncementReq& default_instance();
  
  void Swap(CSLoginAnnouncementReq* other);
  
  // implements Message ----------------------------------------------
  
  CSLoginAnnouncementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSLoginAnnouncementReq& from);
  void MergeFrom(const CSLoginAnnouncementReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSLoginAnnouncementReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbasic_2eproto();
  friend void protobuf_AssignDesc_cs_5fbasic_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbasic_2eproto();
  
  void InitAsDefaultInstance();
  static CSLoginAnnouncementReq* default_instance_;
};
// ===================================================================


// ===================================================================

// CSMessageHeader

// required .head_msg.CSMsgName msg_id = 1;
inline bool CSMessageHeader::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMessageHeader::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMessageHeader::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMessageHeader::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
inline head_msg::CSMsgName CSMessageHeader::msg_id() const {
  return static_cast< head_msg::CSMsgName >(msg_id_);
}
inline void CSMessageHeader::set_msg_id(head_msg::CSMsgName value) {
  GOOGLE_DCHECK(head_msg::CSMsgName_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
}

// optional uint32 errcode = 2;
inline bool CSMessageHeader::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMessageHeader::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMessageHeader::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMessageHeader::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 CSMessageHeader::errcode() const {
  return errcode_;
}
inline void CSMessageHeader::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional uint64 gateway_session = 3;
inline bool CSMessageHeader::has_gateway_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMessageHeader::set_has_gateway_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMessageHeader::clear_has_gateway_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMessageHeader::clear_gateway_session() {
  gateway_session_ = GOOGLE_ULONGLONG(0);
  clear_has_gateway_session();
}
inline ::google::protobuf::uint64 CSMessageHeader::gateway_session() const {
  return gateway_session_;
}
inline void CSMessageHeader::set_gateway_session(::google::protobuf::uint64 value) {
  set_has_gateway_session();
  gateway_session_ = value;
}

// -------------------------------------------------------------------

// ErrorCode

// -------------------------------------------------------------------

// CSErrorCode

// required uint32 errcode = 1;
inline bool CSErrorCode::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSErrorCode::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSErrorCode::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSErrorCode::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 CSErrorCode::errcode() const {
  return errcode_;
}
inline void CSErrorCode::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
}

// required uint32 param = 2;
inline bool CSErrorCode::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSErrorCode::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSErrorCode::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSErrorCode::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 CSErrorCode::param() const {
  return param_;
}
inline void CSErrorCode::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// CSCheckSessionReq

// required bytes sess_id = 1;
inline bool CSCheckSessionReq::has_sess_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCheckSessionReq::set_has_sess_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCheckSessionReq::clear_has_sess_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCheckSessionReq::clear_sess_id() {
  if (sess_id_ != &::google::protobuf::internal::kEmptyString) {
    sess_id_->clear();
  }
  clear_has_sess_id();
}
inline const ::std::string& CSCheckSessionReq::sess_id() const {
  return *sess_id_;
}
inline void CSCheckSessionReq::set_sess_id(const ::std::string& value) {
  set_has_sess_id();
  if (sess_id_ == &::google::protobuf::internal::kEmptyString) {
    sess_id_ = new ::std::string;
  }
  sess_id_->assign(value);
}
inline void CSCheckSessionReq::set_sess_id(const char* value) {
  set_has_sess_id();
  if (sess_id_ == &::google::protobuf::internal::kEmptyString) {
    sess_id_ = new ::std::string;
  }
  sess_id_->assign(value);
}
inline void CSCheckSessionReq::set_sess_id(const void* value, size_t size) {
  set_has_sess_id();
  if (sess_id_ == &::google::protobuf::internal::kEmptyString) {
    sess_id_ = new ::std::string;
  }
  sess_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionReq::mutable_sess_id() {
  set_has_sess_id();
  if (sess_id_ == &::google::protobuf::internal::kEmptyString) {
    sess_id_ = new ::std::string;
  }
  return sess_id_;
}
inline ::std::string* CSCheckSessionReq::release_sess_id() {
  clear_has_sess_id();
  if (sess_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sess_id_;
    sess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 channel_id_self = 2;
inline bool CSCheckSessionReq::has_channel_id_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCheckSessionReq::set_has_channel_id_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCheckSessionReq::clear_has_channel_id_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCheckSessionReq::clear_channel_id_self() {
  channel_id_self_ = 0;
  clear_has_channel_id_self();
}
inline ::google::protobuf::int32 CSCheckSessionReq::channel_id_self() const {
  return channel_id_self_;
}
inline void CSCheckSessionReq::set_channel_id_self(::google::protobuf::int32 value) {
  set_has_channel_id_self();
  channel_id_self_ = value;
}

// optional int32 server_id = 3 [default = 0];
inline bool CSCheckSessionReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCheckSessionReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCheckSessionReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCheckSessionReq::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 CSCheckSessionReq::server_id() const {
  return server_id_;
}
inline void CSCheckSessionReq::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 user_id = 4 [default = 0];
inline bool CSCheckSessionReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSCheckSessionReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSCheckSessionReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSCheckSessionReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 CSCheckSessionReq::user_id() const {
  return user_id_;
}
inline void CSCheckSessionReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bytes app_id = 5 [default = ""];
inline bool CSCheckSessionReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSCheckSessionReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSCheckSessionReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSCheckSessionReq::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& CSCheckSessionReq::app_id() const {
  return *app_id_;
}
inline void CSCheckSessionReq::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void CSCheckSessionReq::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void CSCheckSessionReq::set_app_id(const void* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionReq::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* CSCheckSessionReq::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes app_key = 6 [default = ""];
inline bool CSCheckSessionReq::has_app_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSCheckSessionReq::set_has_app_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSCheckSessionReq::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSCheckSessionReq::clear_app_key() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    app_key_->clear();
  }
  clear_has_app_key();
}
inline const ::std::string& CSCheckSessionReq::app_key() const {
  return *app_key_;
}
inline void CSCheckSessionReq::set_app_key(const ::std::string& value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void CSCheckSessionReq::set_app_key(const char* value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void CSCheckSessionReq::set_app_key(const void* value, size_t size) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionReq::mutable_app_key() {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  return app_key_;
}
inline ::std::string* CSCheckSessionReq::release_app_key() {
  clear_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_key_;
    app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes cp_id = 7 [default = ""];
inline bool CSCheckSessionReq::has_cp_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSCheckSessionReq::set_has_cp_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSCheckSessionReq::clear_has_cp_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSCheckSessionReq::clear_cp_id() {
  if (cp_id_ != &::google::protobuf::internal::kEmptyString) {
    cp_id_->clear();
  }
  clear_has_cp_id();
}
inline const ::std::string& CSCheckSessionReq::cp_id() const {
  return *cp_id_;
}
inline void CSCheckSessionReq::set_cp_id(const ::std::string& value) {
  set_has_cp_id();
  if (cp_id_ == &::google::protobuf::internal::kEmptyString) {
    cp_id_ = new ::std::string;
  }
  cp_id_->assign(value);
}
inline void CSCheckSessionReq::set_cp_id(const char* value) {
  set_has_cp_id();
  if (cp_id_ == &::google::protobuf::internal::kEmptyString) {
    cp_id_ = new ::std::string;
  }
  cp_id_->assign(value);
}
inline void CSCheckSessionReq::set_cp_id(const void* value, size_t size) {
  set_has_cp_id();
  if (cp_id_ == &::google::protobuf::internal::kEmptyString) {
    cp_id_ = new ::std::string;
  }
  cp_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionReq::mutable_cp_id() {
  set_has_cp_id();
  if (cp_id_ == &::google::protobuf::internal::kEmptyString) {
    cp_id_ = new ::std::string;
  }
  return cp_id_;
}
inline ::std::string* CSCheckSessionReq::release_cp_id() {
  clear_has_cp_id();
  if (cp_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cp_id_;
    cp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes channel_id = 8 [default = ""];
inline bool CSCheckSessionReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSCheckSessionReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSCheckSessionReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSCheckSessionReq::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& CSCheckSessionReq::channel_id() const {
  return *channel_id_;
}
inline void CSCheckSessionReq::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void CSCheckSessionReq::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void CSCheckSessionReq::set_channel_id(const void* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionReq::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}
inline ::std::string* CSCheckSessionReq::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes extra_data = 9 [default = ""];
inline bool CSCheckSessionReq::has_extra_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSCheckSessionReq::set_has_extra_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSCheckSessionReq::clear_has_extra_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSCheckSessionReq::clear_extra_data() {
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    extra_data_->clear();
  }
  clear_has_extra_data();
}
inline const ::std::string& CSCheckSessionReq::extra_data() const {
  return *extra_data_;
}
inline void CSCheckSessionReq::set_extra_data(const ::std::string& value) {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  extra_data_->assign(value);
}
inline void CSCheckSessionReq::set_extra_data(const char* value) {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  extra_data_->assign(value);
}
inline void CSCheckSessionReq::set_extra_data(const void* value, size_t size) {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  extra_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionReq::mutable_extra_data() {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  return extra_data_;
}
inline ::std::string* CSCheckSessionReq::release_extra_data() {
  clear_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_data_;
    extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 game_id = 10 [default = 0];
inline bool CSCheckSessionReq::has_game_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSCheckSessionReq::set_has_game_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSCheckSessionReq::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSCheckSessionReq::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 CSCheckSessionReq::game_id() const {
  return game_id_;
}
inline void CSCheckSessionReq::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// CSCheckSessionRsp

// required uint32 user_id = 1;
inline bool CSCheckSessionRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCheckSessionRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCheckSessionRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCheckSessionRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 CSCheckSessionRsp::user_id() const {
  return user_id_;
}
inline void CSCheckSessionRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 channel_id = 2 [default = 0];
inline bool CSCheckSessionRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCheckSessionRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCheckSessionRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCheckSessionRsp::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 CSCheckSessionRsp::channel_id() const {
  return channel_id_;
}
inline void CSCheckSessionRsp::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional bytes access_token = 3 [default = ""];
inline bool CSCheckSessionRsp::has_access_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCheckSessionRsp::set_has_access_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCheckSessionRsp::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCheckSessionRsp::clear_access_token() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    access_token_->clear();
  }
  clear_has_access_token();
}
inline const ::std::string& CSCheckSessionRsp::access_token() const {
  return *access_token_;
}
inline void CSCheckSessionRsp::set_access_token(const ::std::string& value) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
}
inline void CSCheckSessionRsp::set_access_token(const char* value) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
}
inline void CSCheckSessionRsp::set_access_token(const void* value, size_t size) {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionRsp::mutable_access_token() {
  set_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    access_token_ = new ::std::string;
  }
  return access_token_;
}
inline ::std::string* CSCheckSessionRsp::release_access_token() {
  clear_has_access_token();
  if (access_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = access_token_;
    access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes extra_data = 4 [default = ""];
inline bool CSCheckSessionRsp::has_extra_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSCheckSessionRsp::set_has_extra_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSCheckSessionRsp::clear_has_extra_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSCheckSessionRsp::clear_extra_data() {
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    extra_data_->clear();
  }
  clear_has_extra_data();
}
inline const ::std::string& CSCheckSessionRsp::extra_data() const {
  return *extra_data_;
}
inline void CSCheckSessionRsp::set_extra_data(const ::std::string& value) {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  extra_data_->assign(value);
}
inline void CSCheckSessionRsp::set_extra_data(const char* value) {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  extra_data_->assign(value);
}
inline void CSCheckSessionRsp::set_extra_data(const void* value, size_t size) {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  extra_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCheckSessionRsp::mutable_extra_data() {
  set_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    extra_data_ = new ::std::string;
  }
  return extra_data_;
}
inline ::std::string* CSCheckSessionRsp::release_extra_data() {
  clear_has_extra_data();
  if (extra_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_data_;
    extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CSGetRoleListReq

// required uint32 uid = 1;
inline bool CSGetRoleListReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGetRoleListReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGetRoleListReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGetRoleListReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CSGetRoleListReq::uid() const {
  return uid_;
}
inline void CSGetRoleListReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 channel_id = 2;
inline bool CSGetRoleListReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGetRoleListReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGetRoleListReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGetRoleListReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSGetRoleListReq::channel_id() const {
  return channel_id_;
}
inline void CSGetRoleListReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 server_id = 3;
inline bool CSGetRoleListReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSGetRoleListReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSGetRoleListReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSGetRoleListReq::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 CSGetRoleListReq::server_id() const {
  return server_id_;
}
inline void CSGetRoleListReq::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// CSGetRoleListRsp_Roles

// required uint32 uid = 1;
inline bool CSGetRoleListRsp_Roles::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGetRoleListRsp_Roles::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGetRoleListRsp_Roles::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGetRoleListRsp_Roles::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CSGetRoleListRsp_Roles::uid() const {
  return uid_;
}
inline void CSGetRoleListRsp_Roles::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSGetRoleListRsp_Roles::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGetRoleListRsp_Roles::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGetRoleListRsp_Roles::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGetRoleListRsp_Roles::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSGetRoleListRsp_Roles::reg_time() const {
  return reg_time_;
}
inline void CSGetRoleListRsp_Roles::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSGetRoleListRsp_Roles::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSGetRoleListRsp_Roles::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSGetRoleListRsp_Roles::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSGetRoleListRsp_Roles::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSGetRoleListRsp_Roles::channel_id() const {
  return channel_id_;
}
inline void CSGetRoleListRsp_Roles::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 server_id = 4;
inline bool CSGetRoleListRsp_Roles::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSGetRoleListRsp_Roles::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSGetRoleListRsp_Roles::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSGetRoleListRsp_Roles::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 CSGetRoleListRsp_Roles::server_id() const {
  return server_id_;
}
inline void CSGetRoleListRsp_Roles::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// CSGetRoleListRsp

// repeated .CSGetRoleListRsp.Roles roles = 1;
inline int CSGetRoleListRsp::roles_size() const {
  return roles_.size();
}
inline void CSGetRoleListRsp::clear_roles() {
  roles_.Clear();
}
inline const ::CSGetRoleListRsp_Roles& CSGetRoleListRsp::roles(int index) const {
  return roles_.Get(index);
}
inline ::CSGetRoleListRsp_Roles* CSGetRoleListRsp::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::CSGetRoleListRsp_Roles* CSGetRoleListRsp::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSGetRoleListRsp_Roles >&
CSGetRoleListRsp::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSGetRoleListRsp_Roles >*
CSGetRoleListRsp::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// CSCreateRoleReq

// required bytes name = 1;
inline bool CSCreateRoleReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCreateRoleReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCreateRoleReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCreateRoleReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSCreateRoleReq::name() const {
  return *name_;
}
inline void CSCreateRoleReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCreateRoleReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCreateRoleReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCreateRoleReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSCreateRoleReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 role_type = 2;
inline bool CSCreateRoleReq::has_role_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCreateRoleReq::set_has_role_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCreateRoleReq::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCreateRoleReq::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 CSCreateRoleReq::role_type() const {
  return role_type_;
}
inline void CSCreateRoleReq::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// CSCreateRoleRsp

// required uint32 userid = 1;
inline bool CSCreateRoleRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCreateRoleRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCreateRoleRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCreateRoleRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSCreateRoleRsp::userid() const {
  return userid_;
}
inline void CSCreateRoleRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSCreateRoleRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCreateRoleRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCreateRoleRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCreateRoleRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSCreateRoleRsp::reg_time() const {
  return reg_time_;
}
inline void CSCreateRoleRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSCreateRoleRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCreateRoleRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCreateRoleRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCreateRoleRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSCreateRoleRsp::channel_id() const {
  return channel_id_;
}
inline void CSCreateRoleRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required bytes name = 4;
inline bool CSCreateRoleRsp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSCreateRoleRsp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSCreateRoleRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSCreateRoleRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSCreateRoleRsp::name() const {
  return *name_;
}
inline void CSCreateRoleRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCreateRoleRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCreateRoleRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCreateRoleRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSCreateRoleRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 role_type = 5;
inline bool CSCreateRoleRsp::has_role_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSCreateRoleRsp::set_has_role_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSCreateRoleRsp::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSCreateRoleRsp::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 CSCreateRoleRsp::role_type() const {
  return role_type_;
}
inline void CSCreateRoleRsp::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// CSLoginReq

// required uint32 uid = 1;
inline bool CSLoginReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSLoginReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSLoginReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSLoginReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CSLoginReq::uid() const {
  return uid_;
}
inline void CSLoginReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSLoginReq::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSLoginReq::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSLoginReq::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSLoginReq::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSLoginReq::reg_time() const {
  return reg_time_;
}
inline void CSLoginReq::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSLoginReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSLoginReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSLoginReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSLoginReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSLoginReq::channel_id() const {
  return channel_id_;
}
inline void CSLoginReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 server_id = 4;
inline bool CSLoginReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSLoginReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSLoginReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSLoginReq::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 CSLoginReq::server_id() const {
  return server_id_;
}
inline void CSLoginReq::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint64 tokenid = 6;
inline bool CSLoginReq::has_tokenid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSLoginReq::set_has_tokenid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSLoginReq::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSLoginReq::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 CSLoginReq::tokenid() const {
  return tokenid_;
}
inline void CSLoginReq::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
}

// -------------------------------------------------------------------

// CSLoginRsp

// required uint64 tokenid = 1;
inline bool CSLoginRsp::has_tokenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSLoginRsp::set_has_tokenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSLoginRsp::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSLoginRsp::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 CSLoginRsp::tokenid() const {
  return tokenid_;
}
inline void CSLoginRsp::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
}

// required uint32 userid = 2;
inline bool CSLoginRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSLoginRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSLoginRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSLoginRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSLoginRsp::userid() const {
  return userid_;
}
inline void CSLoginRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 3;
inline bool CSLoginRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSLoginRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSLoginRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSLoginRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSLoginRsp::reg_time() const {
  return reg_time_;
}
inline void CSLoginRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 4;
inline bool CSLoginRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSLoginRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSLoginRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSLoginRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSLoginRsp::channel_id() const {
  return channel_id_;
}
inline void CSLoginRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required bytes name = 5;
inline bool CSLoginRsp::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSLoginRsp::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSLoginRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSLoginRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSLoginRsp::name() const {
  return *name_;
}
inline void CSLoginRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSLoginRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSLoginRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSLoginRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSLoginRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 lv = 6;
inline bool CSLoginRsp::has_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSLoginRsp::set_has_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSLoginRsp::clear_has_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSLoginRsp::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 CSLoginRsp::lv() const {
  return lv_;
}
inline void CSLoginRsp::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 exp = 7;
inline bool CSLoginRsp::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSLoginRsp::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSLoginRsp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSLoginRsp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 CSLoginRsp::exp() const {
  return exp_;
}
inline void CSLoginRsp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 type = 8;
inline bool CSLoginRsp::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSLoginRsp::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSLoginRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSLoginRsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSLoginRsp::type() const {
  return type_;
}
inline void CSLoginRsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CSCrtRoleReq

// required uint32 userid = 1;
inline bool CSCrtRoleReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCrtRoleReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCrtRoleReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCrtRoleReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSCrtRoleReq::userid() const {
  return userid_;
}
inline void CSCrtRoleReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 channel_id = 2;
inline bool CSCrtRoleReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCrtRoleReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCrtRoleReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCrtRoleReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSCrtRoleReq::channel_id() const {
  return channel_id_;
}
inline void CSCrtRoleReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required bytes name = 3;
inline bool CSCrtRoleReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCrtRoleReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCrtRoleReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCrtRoleReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSCrtRoleReq::name() const {
  return *name_;
}
inline void CSCrtRoleReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCrtRoleReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSCrtRoleReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSCrtRoleReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSCrtRoleReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 role_type = 4;
inline bool CSCrtRoleReq::has_role_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSCrtRoleReq::set_has_role_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSCrtRoleReq::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSCrtRoleReq::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 CSCrtRoleReq::role_type() const {
  return role_type_;
}
inline void CSCrtRoleReq::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// CSDelRoleReq

// -------------------------------------------------------------------

// CSCrtRoleRsp

// required uint64 tokenid = 1;
inline bool CSCrtRoleRsp::has_tokenid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCrtRoleRsp::set_has_tokenid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCrtRoleRsp::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCrtRoleRsp::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 CSCrtRoleRsp::tokenid() const {
  return tokenid_;
}
inline void CSCrtRoleRsp::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
}

// required uint32 mapid = 2;
inline bool CSCrtRoleRsp::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCrtRoleRsp::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCrtRoleRsp::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCrtRoleRsp::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::mapid() const {
  return mapid_;
}
inline void CSCrtRoleRsp::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required uint32 xpos = 3;
inline bool CSCrtRoleRsp::has_xpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCrtRoleRsp::set_has_xpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCrtRoleRsp::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCrtRoleRsp::clear_xpos() {
  xpos_ = 0u;
  clear_has_xpos();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::xpos() const {
  return xpos_;
}
inline void CSCrtRoleRsp::set_xpos(::google::protobuf::uint32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required uint32 ypos = 4;
inline bool CSCrtRoleRsp::has_ypos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSCrtRoleRsp::set_has_ypos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSCrtRoleRsp::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSCrtRoleRsp::clear_ypos() {
  ypos_ = 0u;
  clear_has_ypos();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::ypos() const {
  return ypos_;
}
inline void CSCrtRoleRsp::set_ypos(::google::protobuf::uint32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required uint32 orient = 5;
inline bool CSCrtRoleRsp::has_orient() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSCrtRoleRsp::set_has_orient() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSCrtRoleRsp::clear_has_orient() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSCrtRoleRsp::clear_orient() {
  orient_ = 0u;
  clear_has_orient();
}
inline ::google::protobuf::uint32 CSCrtRoleRsp::orient() const {
  return orient_;
}
inline void CSCrtRoleRsp::set_orient(::google::protobuf::uint32 value) {
  set_has_orient();
  orient_ = value;
}

// -------------------------------------------------------------------

// CSQueryShardReq

// -------------------------------------------------------------------

// CSServerBase

// required bytes desc = 1;
inline bool CSServerBase::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSServerBase::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSServerBase::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSServerBase::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& CSServerBase::desc() const {
  return *desc_;
}
inline void CSServerBase::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CSServerBase::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CSServerBase::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSServerBase::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* CSServerBase::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes ip = 2;
inline bool CSServerBase::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSServerBase::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSServerBase::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSServerBase::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CSServerBase::ip() const {
  return *ip_;
}
inline void CSServerBase::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CSServerBase::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CSServerBase::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSServerBase::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CSServerBase::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 port = 3;
inline bool CSServerBase::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSServerBase::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSServerBase::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSServerBase::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CSServerBase::port() const {
  return port_;
}
inline void CSServerBase::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required uint32 online = 4;
inline bool CSServerBase::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSServerBase::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSServerBase::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSServerBase::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 CSServerBase::online() const {
  return online_;
}
inline void CSServerBase::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
}

// required uint32 newsvr = 5;
inline bool CSServerBase::has_newsvr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSServerBase::set_has_newsvr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSServerBase::clear_has_newsvr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSServerBase::clear_newsvr() {
  newsvr_ = 0u;
  clear_has_newsvr();
}
inline ::google::protobuf::uint32 CSServerBase::newsvr() const {
  return newsvr_;
}
inline void CSServerBase::set_newsvr(::google::protobuf::uint32 value) {
  set_has_newsvr();
  newsvr_ = value;
}

// -------------------------------------------------------------------

// CSShardBase

// required uint32 id = 1;
inline bool CSShardBase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSShardBase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSShardBase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSShardBase::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSShardBase::id() const {
  return id_;
}
inline void CSShardBase::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 os = 2;
inline bool CSShardBase::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSShardBase::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSShardBase::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSShardBase::clear_os() {
  os_ = 0u;
  clear_has_os();
}
inline ::google::protobuf::uint32 CSShardBase::os() const {
  return os_;
}
inline void CSShardBase::set_os(::google::protobuf::uint32 value) {
  set_has_os();
  os_ = value;
}

// required uint32 provider = 3;
inline bool CSShardBase::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSShardBase::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSShardBase::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSShardBase::clear_provider() {
  provider_ = 0u;
  clear_has_provider();
}
inline ::google::protobuf::uint32 CSShardBase::provider() const {
  return provider_;
}
inline void CSShardBase::set_provider(::google::protobuf::uint32 value) {
  set_has_provider();
  provider_ = value;
}

// repeated .CSServerBase svrs = 4;
inline int CSShardBase::svrs_size() const {
  return svrs_.size();
}
inline void CSShardBase::clear_svrs() {
  svrs_.Clear();
}
inline const ::CSServerBase& CSShardBase::svrs(int index) const {
  return svrs_.Get(index);
}
inline ::CSServerBase* CSShardBase::mutable_svrs(int index) {
  return svrs_.Mutable(index);
}
inline ::CSServerBase* CSShardBase::add_svrs() {
  return svrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
CSShardBase::svrs() const {
  return svrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
CSShardBase::mutable_svrs() {
  return &svrs_;
}

// -------------------------------------------------------------------

// CSQueryShardRsp

// repeated .CSShardBase shards = 1;
inline int CSQueryShardRsp::shards_size() const {
  return shards_.size();
}
inline void CSQueryShardRsp::clear_shards() {
  shards_.Clear();
}
inline const ::CSShardBase& CSQueryShardRsp::shards(int index) const {
  return shards_.Get(index);
}
inline ::CSShardBase* CSQueryShardRsp::mutable_shards(int index) {
  return shards_.Mutable(index);
}
inline ::CSShardBase* CSQueryShardRsp::add_shards() {
  return shards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSShardBase >&
CSQueryShardRsp::shards() const {
  return shards_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSShardBase >*
CSQueryShardRsp::mutable_shards() {
  return &shards_;
}

// -------------------------------------------------------------------

// FlushOnline

// required uint32 online = 1;
inline bool FlushOnline::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushOnline::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushOnline::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushOnline::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 FlushOnline::online() const {
  return online_;
}
inline void FlushOnline::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// FlushServer

// required uint32 id = 1;
inline bool FlushServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushServer::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FlushServer::id() const {
  return id_;
}
inline void FlushServer::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .CSServerBase svrs = 2;
inline int FlushServer::svrs_size() const {
  return svrs_.size();
}
inline void FlushServer::clear_svrs() {
  svrs_.Clear();
}
inline const ::CSServerBase& FlushServer::svrs(int index) const {
  return svrs_.Get(index);
}
inline ::CSServerBase* FlushServer::mutable_svrs(int index) {
  return svrs_.Mutable(index);
}
inline ::CSServerBase* FlushServer::add_svrs() {
  return svrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSServerBase >&
FlushServer::svrs() const {
  return svrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSServerBase >*
FlushServer::mutable_svrs() {
  return &svrs_;
}

// -------------------------------------------------------------------

// PlayerOffline

// -------------------------------------------------------------------

// CSPingReq

// required uint64 clientTime = 1;
inline bool CSPingReq::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPingReq::set_has_clienttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPingReq::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPingReq::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
inline ::google::protobuf::uint64 CSPingReq::clienttime() const {
  return clienttime_;
}
inline void CSPingReq::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
}

// -------------------------------------------------------------------

// CSPingRsp

// required uint64 clientTime = 1;
inline bool CSPingRsp::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPingRsp::set_has_clienttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPingRsp::clear_has_clienttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPingRsp::clear_clienttime() {
  clienttime_ = GOOGLE_ULONGLONG(0);
  clear_has_clienttime();
}
inline ::google::protobuf::uint64 CSPingRsp::clienttime() const {
  return clienttime_;
}
inline void CSPingRsp::set_clienttime(::google::protobuf::uint64 value) {
  set_has_clienttime();
  clienttime_ = value;
}

// required uint64 serverTime = 2;
inline bool CSPingRsp::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPingRsp::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPingRsp::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPingRsp::clear_servertime() {
  servertime_ = GOOGLE_ULONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::uint64 CSPingRsp::servertime() const {
  return servertime_;
}
inline void CSPingRsp::set_servertime(::google::protobuf::uint64 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// CSTaskAccept

// -------------------------------------------------------------------

// CSNickNameReq

// required uint32 sexual = 1;
inline bool CSNickNameReq::has_sexual() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSNickNameReq::set_has_sexual() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSNickNameReq::clear_has_sexual() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSNickNameReq::clear_sexual() {
  sexual_ = 0u;
  clear_has_sexual();
}
inline ::google::protobuf::uint32 CSNickNameReq::sexual() const {
  return sexual_;
}
inline void CSNickNameReq::set_sexual(::google::protobuf::uint32 value) {
  set_has_sexual();
  sexual_ = value;
}

// required uint32 zone_id = 2;
inline bool CSNickNameReq::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSNickNameReq::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSNickNameReq::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSNickNameReq::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 CSNickNameReq::zone_id() const {
  return zone_id_;
}
inline void CSNickNameReq::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// CSNickNameRsp

// repeated bytes nick = 1;
inline int CSNickNameRsp::nick_size() const {
  return nick_.size();
}
inline void CSNickNameRsp::clear_nick() {
  nick_.Clear();
}
inline const ::std::string& CSNickNameRsp::nick(int index) const {
  return nick_.Get(index);
}
inline ::std::string* CSNickNameRsp::mutable_nick(int index) {
  return nick_.Mutable(index);
}
inline void CSNickNameRsp::set_nick(int index, const ::std::string& value) {
  nick_.Mutable(index)->assign(value);
}
inline void CSNickNameRsp::set_nick(int index, const char* value) {
  nick_.Mutable(index)->assign(value);
}
inline void CSNickNameRsp::set_nick(int index, const void* value, size_t size) {
  nick_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSNickNameRsp::add_nick() {
  return nick_.Add();
}
inline void CSNickNameRsp::add_nick(const ::std::string& value) {
  nick_.Add()->assign(value);
}
inline void CSNickNameRsp::add_nick(const char* value) {
  nick_.Add()->assign(value);
}
inline void CSNickNameRsp::add_nick(const void* value, size_t size) {
  nick_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CSNickNameRsp::nick() const {
  return nick_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CSNickNameRsp::mutable_nick() {
  return &nick_;
}

// required uint32 sexual = 2;
inline bool CSNickNameRsp::has_sexual() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSNickNameRsp::set_has_sexual() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSNickNameRsp::clear_has_sexual() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSNickNameRsp::clear_sexual() {
  sexual_ = 0u;
  clear_has_sexual();
}
inline ::google::protobuf::uint32 CSNickNameRsp::sexual() const {
  return sexual_;
}
inline void CSNickNameRsp::set_sexual(::google::protobuf::uint32 value) {
  set_has_sexual();
  sexual_ = value;
}

// -------------------------------------------------------------------

// CSLoginAnnouncementReq


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< CSMessageConst>() {
  return CSMessageConst_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fbasic_2eproto__INCLUDED
