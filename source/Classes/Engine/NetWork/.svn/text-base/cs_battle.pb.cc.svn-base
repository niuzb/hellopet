// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMonsterCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMonsterCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleMonsterCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleMonsterCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCastleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCastleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleUserLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleUserLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLoadCompleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLoadCompleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLoadCompleteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLoadCompleteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattleTimeoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattleTimeoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerDelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerDelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerRevivalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBattlePlayerRevivalRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitMonsterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitMonsterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitMonsterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitMonsterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSMonsterHPReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSMonsterHPReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSMonsterHPRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSMonsterHPRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterDieReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterDieReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterDieRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterDieRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitCastleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitCastleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitCastleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitCastleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCastleDieReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCastleDieReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCastleDieRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCastleDieRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterAttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterAttackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterEffectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterEffectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBuffEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBuffEffectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBuffEffectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterHitRsp_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterHitRsp_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillBeginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillBeginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSkillBeginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSkillBeginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHitPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHitPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHitPlayerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHitPlayerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHPRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHPRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerHPReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerHPReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMonsterBloodRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMonsterBloodRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerDieShowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerDieShowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerDieShowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerDieShowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerMayImproveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerMayImproveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPlayerMayImproveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPlayerMayImproveRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fbattle_2eproto() {
  protobuf_AddDesc_cs_5fbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_battle.proto");
  GOOGLE_CHECK(file != NULL);
  CSPoint_descriptor_ = file->message_type(0);
  static const int CSPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, ypos_),
  };
  CSPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPoint_descriptor_,
      CSPoint::default_instance_,
      CSPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPoint));
  CSBattleMoveReq_descriptor_ = file->message_type(1);
  static const int CSBattleMoveReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, time_),
  };
  CSBattleMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMoveReq_descriptor_,
      CSBattleMoveReq::default_instance_,
      CSBattleMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMoveReq));
  CSBattleMoveRsp_descriptor_ = file->message_type(2);
  static const int CSBattleMoveRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, time_),
  };
  CSBattleMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMoveRsp_descriptor_,
      CSBattleMoveRsp::default_instance_,
      CSBattleMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMoveRsp));
  CSBattleCreateReq_descriptor_ = file->message_type(3);
  static const int CSBattleCreateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, map_id_),
  };
  CSBattleCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleCreateReq_descriptor_,
      CSBattleCreateReq::default_instance_,
      CSBattleCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleCreateReq));
  MonsterBattleInfo_descriptor_ = file->message_type(4);
  static const int MonsterBattleInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, skill_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, physical_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, magic_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, skill_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, health_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, wreck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, parry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, critical_strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, slay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, proficiency_),
  };
  MonsterBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterBattleInfo_descriptor_,
      MonsterBattleInfo::default_instance_,
      MonsterBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterBattleInfo));
  MonsterInfo_descriptor_ = file->message_type(5);
  static const int MonsterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, speed_),
  };
  MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterInfo_descriptor_,
      MonsterInfo::default_instance_,
      MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterInfo));
  CSBattleCreateRsp_descriptor_ = file->message_type(6);
  static const int CSBattleCreateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, timeout_),
  };
  CSBattleCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleCreateRsp_descriptor_,
      CSBattleCreateRsp::default_instance_,
      CSBattleCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleCreateRsp));
  CSBattleMonsterCreateReq_descriptor_ = file->message_type(7);
  static const int CSBattleMonsterCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateReq, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateReq, pos_),
  };
  CSBattleMonsterCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMonsterCreateReq_descriptor_,
      CSBattleMonsterCreateReq::default_instance_,
      CSBattleMonsterCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMonsterCreateReq));
  CSBattleMonsterCreateRsp_descriptor_ = file->message_type(8);
  static const int CSBattleMonsterCreateRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, pos_),
  };
  CSBattleMonsterCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleMonsterCreateRsp_descriptor_,
      CSBattleMonsterCreateRsp::default_instance_,
      CSBattleMonsterCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleMonsterCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleMonsterCreateRsp));
  CSCastleInfo_descriptor_ = file->message_type(9);
  static const int CSCastleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleInfo, blood_),
  };
  CSCastleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCastleInfo_descriptor_,
      CSCastleInfo::default_instance_,
      CSCastleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCastleInfo));
  CSBattleUserJoinReq_descriptor_ = file->message_type(10);
  static const int CSBattleUserJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinReq, roomid_),
  };
  CSBattleUserJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserJoinReq_descriptor_,
      CSBattleUserJoinReq::default_instance_,
      CSBattleUserJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserJoinReq));
  CSBattleUserJoinRsp_descriptor_ = file->message_type(11);
  static const int CSBattleUserJoinRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, castleinfo_),
  };
  CSBattleUserJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserJoinRsp_descriptor_,
      CSBattleUserJoinRsp::default_instance_,
      CSBattleUserJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserJoinRsp));
  CSBattleUserLeaveRsp_descriptor_ = file->message_type(12);
  static const int CSBattleUserLeaveRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, channel_id_),
  };
  CSBattleUserLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleUserLeaveRsp_descriptor_,
      CSBattleUserLeaveRsp::default_instance_,
      CSBattleUserLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleUserLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleUserLeaveRsp));
  CSBattleLoadCompleteReq_descriptor_ = file->message_type(13);
  static const int CSBattleLoadCompleteReq_offsets_[1] = {
  };
  CSBattleLoadCompleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLoadCompleteReq_descriptor_,
      CSBattleLoadCompleteReq::default_instance_,
      CSBattleLoadCompleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLoadCompleteReq));
  CSBattleLoadCompleteRsp_descriptor_ = file->message_type(14);
  static const int CSBattleLoadCompleteRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, timeout_),
  };
  CSBattleLoadCompleteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLoadCompleteRsp_descriptor_,
      CSBattleLoadCompleteRsp::default_instance_,
      CSBattleLoadCompleteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLoadCompleteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLoadCompleteRsp));
  CSBattleLeaveReq_descriptor_ = file->message_type(15);
  static const int CSBattleLeaveReq_offsets_[1] = {
  };
  CSBattleLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLeaveReq_descriptor_,
      CSBattleLeaveReq::default_instance_,
      CSBattleLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLeaveReq));
  CSBattleLeaveRsp_descriptor_ = file->message_type(16);
  static const int CSBattleLeaveRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, initiative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, dead_mon_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, rewards_),
  };
  CSBattleLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleLeaveRsp_descriptor_,
      CSBattleLeaveRsp::default_instance_,
      CSBattleLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleLeaveRsp));
  CSBattleTimeoutRsp_descriptor_ = file->message_type(17);
  static const int CSBattleTimeoutRsp_offsets_[1] = {
  };
  CSBattleTimeoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattleTimeoutRsp_descriptor_,
      CSBattleTimeoutRsp::default_instance_,
      CSBattleTimeoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleTimeoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattleTimeoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattleTimeoutRsp));
  CSBattlePlayerDelRsp_descriptor_ = file->message_type(18);
  static const int CSBattlePlayerDelRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, exchange_id_),
  };
  CSBattlePlayerDelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerDelRsp_descriptor_,
      CSBattlePlayerDelRsp::default_instance_,
      CSBattlePlayerDelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerDelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerDelRsp));
  CSBattlePlayerRevivalReq_descriptor_ = file->message_type(19);
  static const int CSBattlePlayerRevivalReq_offsets_[1] = {
  };
  CSBattlePlayerRevivalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerRevivalReq_descriptor_,
      CSBattlePlayerRevivalReq::default_instance_,
      CSBattlePlayerRevivalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerRevivalReq));
  CSBattlePlayerRevivalRsp_descriptor_ = file->message_type(20);
  static const int CSBattlePlayerRevivalRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, channel_id_),
  };
  CSBattlePlayerRevivalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBattlePlayerRevivalRsp_descriptor_,
      CSBattlePlayerRevivalRsp::default_instance_,
      CSBattlePlayerRevivalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBattlePlayerRevivalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBattlePlayerRevivalRsp));
  CSMonsterMoveReq_descriptor_ = file->message_type(21);
  static const int CSMonsterMoveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveReq, direct_),
  };
  CSMonsterMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterMoveReq_descriptor_,
      CSMonsterMoveReq::default_instance_,
      CSMonsterMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterMoveReq));
  CSMonsterMoveRsp_descriptor_ = file->message_type(22);
  static const int CSMonsterMoveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, direct_),
  };
  CSMonsterMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterMoveRsp_descriptor_,
      CSMonsterMoveRsp::default_instance_,
      CSMonsterMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterMoveRsp));
  CSMonsterCreateReq_descriptor_ = file->message_type(23);
  static const int CSMonsterCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateReq, pos_),
  };
  CSMonsterCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterCreateReq_descriptor_,
      CSMonsterCreateReq::default_instance_,
      CSMonsterCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterCreateReq));
  CSMonsterCreateRsp_descriptor_ = file->message_type(24);
  static const int CSMonsterCreateRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateRsp, id_in_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateRsp, side_),
  };
  CSMonsterCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterCreateRsp_descriptor_,
      CSMonsterCreateRsp::default_instance_,
      CSMonsterCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterCreateRsp));
  AttackMonsterInfo_descriptor_ = file->message_type(25);
  static const int AttackMonsterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, hurt_type_),
  };
  AttackMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackMonsterInfo_descriptor_,
      AttackMonsterInfo::default_instance_,
      AttackMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackMonsterInfo));
  CSMonsterHitMonsterReq_descriptor_ = file->message_type(26);
  static const int CSMonsterHitMonsterReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterReq, users_),
  };
  CSMonsterHitMonsterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitMonsterReq_descriptor_,
      CSMonsterHitMonsterReq::default_instance_,
      CSMonsterHitMonsterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitMonsterReq));
  CSMonsterHitMonsterRsp_descriptor_ = file->message_type(27);
  static const int CSMonsterHitMonsterRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterRsp, users_),
  };
  CSMonsterHitMonsterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitMonsterRsp_descriptor_,
      CSMonsterHitMonsterRsp::default_instance_,
      CSMonsterHitMonsterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitMonsterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitMonsterRsp));
  CSSMonsterHPReq_descriptor_ = file->message_type(28);
  static const int CSSMonsterHPReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPReq, blood_),
  };
  CSSMonsterHPReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSMonsterHPReq_descriptor_,
      CSSMonsterHPReq::default_instance_,
      CSSMonsterHPReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSMonsterHPReq));
  CSSMonsterHPRsp_descriptor_ = file->message_type(29);
  static const int CSSMonsterHPRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPRsp, blood_),
  };
  CSSMonsterHPRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSMonsterHPRsp_descriptor_,
      CSSMonsterHPRsp::default_instance_,
      CSSMonsterHPRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSMonsterHPRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSMonsterHPRsp));
  CSMonsterDieReq_descriptor_ = file->message_type(30);
  static const int CSMonsterDieReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieReq, id_),
  };
  CSMonsterDieReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterDieReq_descriptor_,
      CSMonsterDieReq::default_instance_,
      CSMonsterDieReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterDieReq));
  CSMonsterDieRsp_descriptor_ = file->message_type(31);
  static const int CSMonsterDieRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, id_),
  };
  CSMonsterDieRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterDieRsp_descriptor_,
      CSMonsterDieRsp::default_instance_,
      CSMonsterDieRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterDieRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterDieRsp));
  CSMonsterHitCastleReq_descriptor_ = file->message_type(32);
  static const int CSMonsterHitCastleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleReq, castleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleReq, id_),
  };
  CSMonsterHitCastleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitCastleReq_descriptor_,
      CSMonsterHitCastleReq::default_instance_,
      CSMonsterHitCastleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitCastleReq));
  CSMonsterHitCastleRsp_descriptor_ = file->message_type(33);
  static const int CSMonsterHitCastleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleRsp, castleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleRsp, id_),
  };
  CSMonsterHitCastleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitCastleRsp_descriptor_,
      CSMonsterHitCastleRsp::default_instance_,
      CSMonsterHitCastleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitCastleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitCastleRsp));
  CSCastleDieReq_descriptor_ = file->message_type(34);
  static const int CSCastleDieReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleDieReq, id_),
  };
  CSCastleDieReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCastleDieReq_descriptor_,
      CSCastleDieReq::default_instance_,
      CSCastleDieReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleDieReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleDieReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCastleDieReq));
  CSCastleDieRsp_descriptor_ = file->message_type(35);
  static const int CSCastleDieRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleDieRsp, id_),
  };
  CSCastleDieRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCastleDieRsp_descriptor_,
      CSCastleDieRsp::default_instance_,
      CSCastleDieRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleDieRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCastleDieRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCastleDieRsp));
  CSMonsterAttackInfo_descriptor_ = file->message_type(36);
  static const int CSMonsterAttackInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, skill_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, dead_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, shake_time_),
  };
  CSMonsterAttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterAttackInfo_descriptor_,
      CSMonsterAttackInfo::default_instance_,
      CSMonsterAttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterAttackInfo));
  CSMonsterEffectInfo_descriptor_ = file->message_type(37);
  static const int CSMonsterEffectInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, skill_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, id_),
  };
  CSMonsterEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterEffectInfo_descriptor_,
      CSMonsterEffectInfo::default_instance_,
      CSMonsterEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterEffectInfo));
  CSMonsterAttackRsp_descriptor_ = file->message_type(38);
  static const int CSMonsterAttackRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, attacks_),
  };
  CSMonsterAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterAttackRsp_descriptor_,
      CSMonsterAttackRsp::default_instance_,
      CSMonsterAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterAttackRsp));
  CSMonsterEffectRsp_descriptor_ = file->message_type(39);
  static const int CSMonsterEffectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, effects_),
  };
  CSMonsterEffectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterEffectRsp_descriptor_,
      CSMonsterEffectRsp::default_instance_,
      CSMonsterEffectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterEffectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterEffectRsp));
  CSMonsterBuffEffectInfo_descriptor_ = file->message_type(40);
  static const int CSMonsterBuffEffectInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, delay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, dead_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, buff_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, skill_id_),
  };
  CSMonsterBuffEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBuffEffectInfo_descriptor_,
      CSMonsterBuffEffectInfo::default_instance_,
      CSMonsterBuffEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBuffEffectInfo));
  CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_ = CSMonsterBuffEffectInfo_descriptor_->nested_type(0);
  static const int CSMonsterBuffEffectInfo_BuffEffectInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, battle_info_),
  };
  CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_,
      CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_,
      CSMonsterBuffEffectInfo_BuffEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBuffEffectInfo_BuffEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBuffEffectInfo_BuffEffectInfo));
  CSBuffEffectRsp_descriptor_ = file->message_type(41);
  static const int CSBuffEffectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuffEffectRsp, effects_),
  };
  CSBuffEffectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBuffEffectRsp_descriptor_,
      CSBuffEffectRsp::default_instance_,
      CSBuffEffectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuffEffectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBuffEffectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBuffEffectRsp));
  CSMonsterHitRsp_descriptor_ = file->message_type(42);
  static const int CSMonsterHitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, users_),
  };
  CSMonsterHitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitRsp_descriptor_,
      CSMonsterHitRsp::default_instance_,
      CSMonsterHitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitRsp));
  CSMonsterHitRsp_UserInfo_descriptor_ = CSMonsterHitRsp_descriptor_->nested_type(0);
  static const int CSMonsterHitRsp_UserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, hurt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, rage_point_),
  };
  CSMonsterHitRsp_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterHitRsp_UserInfo_descriptor_,
      CSMonsterHitRsp_UserInfo::default_instance_,
      CSMonsterHitRsp_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterHitRsp_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterHitRsp_UserInfo));
  CSSkillBeginReq_descriptor_ = file->message_type(43);
  static const int CSSkillBeginReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, start_dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, start_dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, direct_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, direct_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, aim_),
  };
  CSSkillBeginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillBeginReq_descriptor_,
      CSSkillBeginReq::default_instance_,
      CSSkillBeginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillBeginReq));
  CSSkillBeginRsp_descriptor_ = file->message_type(44);
  static const int CSSkillBeginRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, start_dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, start_dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, direct_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, direct_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, aim_),
  };
  CSSkillBeginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSkillBeginRsp_descriptor_,
      CSSkillBeginRsp::default_instance_,
      CSSkillBeginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSkillBeginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSkillBeginRsp));
  CSPlayerAttackReq_descriptor_ = file->message_type(45);
  static const int CSPlayerAttackReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, monsters_),
  };
  CSPlayerAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerAttackReq_descriptor_,
      CSPlayerAttackReq::default_instance_,
      CSPlayerAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerAttackReq));
  CSPlayerAttackRsp_descriptor_ = file->message_type(46);
  static const int CSPlayerAttackRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, monsters_),
  };
  CSPlayerAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerAttackRsp_descriptor_,
      CSPlayerAttackRsp::default_instance_,
      CSPlayerAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerAttackRsp));
  AttackPlayerInfo_descriptor_ = file->message_type(47);
  static const int AttackPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, hurt_type_),
  };
  AttackPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackPlayerInfo_descriptor_,
      AttackPlayerInfo::default_instance_,
      AttackPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackPlayerInfo));
  CSPlayerHitPlayerReq_descriptor_ = file->message_type(48);
  static const int CSPlayerHitPlayerReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, users_),
  };
  CSPlayerHitPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHitPlayerReq_descriptor_,
      CSPlayerHitPlayerReq::default_instance_,
      CSPlayerHitPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHitPlayerReq));
  CSPlayerHitPlayerRsp_descriptor_ = file->message_type(49);
  static const int CSPlayerHitPlayerRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, start_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, start_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, end_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, users_),
  };
  CSPlayerHitPlayerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHitPlayerRsp_descriptor_,
      CSPlayerHitPlayerRsp::default_instance_,
      CSPlayerHitPlayerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHitPlayerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHitPlayerRsp));
  CSPlayerHPRsp_descriptor_ = file->message_type(50);
  static const int CSPlayerHPRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, source_reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, source_channel_id_),
  };
  CSPlayerHPRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHPRsp_descriptor_,
      CSPlayerHPRsp::default_instance_,
      CSPlayerHPRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHPRsp));
  CSPlayerHPReq_descriptor_ = file->message_type(51);
  static const int CSPlayerHPReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPReq, blood_),
  };
  CSPlayerHPReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerHPReq_descriptor_,
      CSPlayerHPReq::default_instance_,
      CSPlayerHPReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerHPReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerHPReq));
  CSMonsterBloodRsp_descriptor_ = file->message_type(52);
  static const int CSMonsterBloodRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, monsters_),
  };
  CSMonsterBloodRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMonsterBloodRsp_descriptor_,
      CSMonsterBloodRsp::default_instance_,
      CSMonsterBloodRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMonsterBloodRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMonsterBloodRsp));
  CSPlayerDieShowReq_descriptor_ = file->message_type(53);
  static const int CSPlayerDieShowReq_offsets_[1] = {
  };
  CSPlayerDieShowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerDieShowReq_descriptor_,
      CSPlayerDieShowReq::default_instance_,
      CSPlayerDieShowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerDieShowReq));
  CSPlayerDieShowRsp_descriptor_ = file->message_type(54);
  static const int CSPlayerDieShowRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, defend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, hp_),
  };
  CSPlayerDieShowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerDieShowRsp_descriptor_,
      CSPlayerDieShowRsp::default_instance_,
      CSPlayerDieShowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerDieShowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerDieShowRsp));
  CSPlayerMayImproveReq_descriptor_ = file->message_type(55);
  static const int CSPlayerMayImproveReq_offsets_[1] = {
  };
  CSPlayerMayImproveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerMayImproveReq_descriptor_,
      CSPlayerMayImproveReq::default_instance_,
      CSPlayerMayImproveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerMayImproveReq));
  CSPlayerMayImproveRsp_descriptor_ = file->message_type(56);
  static const int CSPlayerMayImproveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveRsp, imp_item_),
  };
  CSPlayerMayImproveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPlayerMayImproveRsp_descriptor_,
      CSPlayerMayImproveRsp::default_instance_,
      CSPlayerMayImproveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPlayerMayImproveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPlayerMayImproveRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPoint_descriptor_, &CSPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMoveReq_descriptor_, &CSBattleMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMoveRsp_descriptor_, &CSBattleMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleCreateReq_descriptor_, &CSBattleCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterBattleInfo_descriptor_, &MonsterBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterInfo_descriptor_, &MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleCreateRsp_descriptor_, &CSBattleCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMonsterCreateReq_descriptor_, &CSBattleMonsterCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleMonsterCreateRsp_descriptor_, &CSBattleMonsterCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCastleInfo_descriptor_, &CSCastleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserJoinReq_descriptor_, &CSBattleUserJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserJoinRsp_descriptor_, &CSBattleUserJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleUserLeaveRsp_descriptor_, &CSBattleUserLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLoadCompleteReq_descriptor_, &CSBattleLoadCompleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLoadCompleteRsp_descriptor_, &CSBattleLoadCompleteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLeaveReq_descriptor_, &CSBattleLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleLeaveRsp_descriptor_, &CSBattleLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattleTimeoutRsp_descriptor_, &CSBattleTimeoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerDelRsp_descriptor_, &CSBattlePlayerDelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerRevivalReq_descriptor_, &CSBattlePlayerRevivalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBattlePlayerRevivalRsp_descriptor_, &CSBattlePlayerRevivalRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterMoveReq_descriptor_, &CSMonsterMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterMoveRsp_descriptor_, &CSMonsterMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterCreateReq_descriptor_, &CSMonsterCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterCreateRsp_descriptor_, &CSMonsterCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackMonsterInfo_descriptor_, &AttackMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitMonsterReq_descriptor_, &CSMonsterHitMonsterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitMonsterRsp_descriptor_, &CSMonsterHitMonsterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSMonsterHPReq_descriptor_, &CSSMonsterHPReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSMonsterHPRsp_descriptor_, &CSSMonsterHPRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterDieReq_descriptor_, &CSMonsterDieReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterDieRsp_descriptor_, &CSMonsterDieRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitCastleReq_descriptor_, &CSMonsterHitCastleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitCastleRsp_descriptor_, &CSMonsterHitCastleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCastleDieReq_descriptor_, &CSCastleDieReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCastleDieRsp_descriptor_, &CSCastleDieRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterAttackInfo_descriptor_, &CSMonsterAttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterEffectInfo_descriptor_, &CSMonsterEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterAttackRsp_descriptor_, &CSMonsterAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterEffectRsp_descriptor_, &CSMonsterEffectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBuffEffectInfo_descriptor_, &CSMonsterBuffEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_, &CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBuffEffectRsp_descriptor_, &CSBuffEffectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitRsp_descriptor_, &CSMonsterHitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterHitRsp_UserInfo_descriptor_, &CSMonsterHitRsp_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillBeginReq_descriptor_, &CSSkillBeginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSkillBeginRsp_descriptor_, &CSSkillBeginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerAttackReq_descriptor_, &CSPlayerAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerAttackRsp_descriptor_, &CSPlayerAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackPlayerInfo_descriptor_, &AttackPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHitPlayerReq_descriptor_, &CSPlayerHitPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHitPlayerRsp_descriptor_, &CSPlayerHitPlayerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHPRsp_descriptor_, &CSPlayerHPRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerHPReq_descriptor_, &CSPlayerHPReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMonsterBloodRsp_descriptor_, &CSMonsterBloodRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerDieShowReq_descriptor_, &CSPlayerDieShowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerDieShowRsp_descriptor_, &CSPlayerDieShowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerMayImproveReq_descriptor_, &CSPlayerMayImproveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPlayerMayImproveRsp_descriptor_, &CSPlayerMayImproveRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fbattle_2eproto() {
  delete CSPoint::default_instance_;
  delete CSPoint_reflection_;
  delete CSBattleMoveReq::default_instance_;
  delete CSBattleMoveReq_reflection_;
  delete CSBattleMoveRsp::default_instance_;
  delete CSBattleMoveRsp_reflection_;
  delete CSBattleCreateReq::default_instance_;
  delete CSBattleCreateReq_reflection_;
  delete MonsterBattleInfo::default_instance_;
  delete MonsterBattleInfo_reflection_;
  delete MonsterInfo::default_instance_;
  delete MonsterInfo_reflection_;
  delete CSBattleCreateRsp::default_instance_;
  delete CSBattleCreateRsp_reflection_;
  delete CSBattleMonsterCreateReq::default_instance_;
  delete CSBattleMonsterCreateReq_reflection_;
  delete CSBattleMonsterCreateRsp::default_instance_;
  delete CSBattleMonsterCreateRsp_reflection_;
  delete CSCastleInfo::default_instance_;
  delete CSCastleInfo_reflection_;
  delete CSBattleUserJoinReq::default_instance_;
  delete CSBattleUserJoinReq_reflection_;
  delete CSBattleUserJoinRsp::default_instance_;
  delete CSBattleUserJoinRsp_reflection_;
  delete CSBattleUserLeaveRsp::default_instance_;
  delete CSBattleUserLeaveRsp_reflection_;
  delete CSBattleLoadCompleteReq::default_instance_;
  delete CSBattleLoadCompleteReq_reflection_;
  delete CSBattleLoadCompleteRsp::default_instance_;
  delete CSBattleLoadCompleteRsp_reflection_;
  delete CSBattleLeaveReq::default_instance_;
  delete CSBattleLeaveReq_reflection_;
  delete CSBattleLeaveRsp::default_instance_;
  delete CSBattleLeaveRsp_reflection_;
  delete CSBattleTimeoutRsp::default_instance_;
  delete CSBattleTimeoutRsp_reflection_;
  delete CSBattlePlayerDelRsp::default_instance_;
  delete CSBattlePlayerDelRsp_reflection_;
  delete CSBattlePlayerRevivalReq::default_instance_;
  delete CSBattlePlayerRevivalReq_reflection_;
  delete CSBattlePlayerRevivalRsp::default_instance_;
  delete CSBattlePlayerRevivalRsp_reflection_;
  delete CSMonsterMoveReq::default_instance_;
  delete CSMonsterMoveReq_reflection_;
  delete CSMonsterMoveRsp::default_instance_;
  delete CSMonsterMoveRsp_reflection_;
  delete CSMonsterCreateReq::default_instance_;
  delete CSMonsterCreateReq_reflection_;
  delete CSMonsterCreateRsp::default_instance_;
  delete CSMonsterCreateRsp_reflection_;
  delete AttackMonsterInfo::default_instance_;
  delete AttackMonsterInfo_reflection_;
  delete CSMonsterHitMonsterReq::default_instance_;
  delete CSMonsterHitMonsterReq_reflection_;
  delete CSMonsterHitMonsterRsp::default_instance_;
  delete CSMonsterHitMonsterRsp_reflection_;
  delete CSSMonsterHPReq::default_instance_;
  delete CSSMonsterHPReq_reflection_;
  delete CSSMonsterHPRsp::default_instance_;
  delete CSSMonsterHPRsp_reflection_;
  delete CSMonsterDieReq::default_instance_;
  delete CSMonsterDieReq_reflection_;
  delete CSMonsterDieRsp::default_instance_;
  delete CSMonsterDieRsp_reflection_;
  delete CSMonsterHitCastleReq::default_instance_;
  delete CSMonsterHitCastleReq_reflection_;
  delete CSMonsterHitCastleRsp::default_instance_;
  delete CSMonsterHitCastleRsp_reflection_;
  delete CSCastleDieReq::default_instance_;
  delete CSCastleDieReq_reflection_;
  delete CSCastleDieRsp::default_instance_;
  delete CSCastleDieRsp_reflection_;
  delete CSMonsterAttackInfo::default_instance_;
  delete CSMonsterAttackInfo_reflection_;
  delete CSMonsterEffectInfo::default_instance_;
  delete CSMonsterEffectInfo_reflection_;
  delete CSMonsterAttackRsp::default_instance_;
  delete CSMonsterAttackRsp_reflection_;
  delete CSMonsterEffectRsp::default_instance_;
  delete CSMonsterEffectRsp_reflection_;
  delete CSMonsterBuffEffectInfo::default_instance_;
  delete CSMonsterBuffEffectInfo_reflection_;
  delete CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_;
  delete CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_;
  delete CSBuffEffectRsp::default_instance_;
  delete CSBuffEffectRsp_reflection_;
  delete CSMonsterHitRsp::default_instance_;
  delete CSMonsterHitRsp_reflection_;
  delete CSMonsterHitRsp_UserInfo::default_instance_;
  delete CSMonsterHitRsp_UserInfo_reflection_;
  delete CSSkillBeginReq::default_instance_;
  delete CSSkillBeginReq_reflection_;
  delete CSSkillBeginRsp::default_instance_;
  delete CSSkillBeginRsp_reflection_;
  delete CSPlayerAttackReq::default_instance_;
  delete CSPlayerAttackReq_reflection_;
  delete CSPlayerAttackRsp::default_instance_;
  delete CSPlayerAttackRsp_reflection_;
  delete AttackPlayerInfo::default_instance_;
  delete AttackPlayerInfo_reflection_;
  delete CSPlayerHitPlayerReq::default_instance_;
  delete CSPlayerHitPlayerReq_reflection_;
  delete CSPlayerHitPlayerRsp::default_instance_;
  delete CSPlayerHitPlayerRsp_reflection_;
  delete CSPlayerHPRsp::default_instance_;
  delete CSPlayerHPRsp_reflection_;
  delete CSPlayerHPReq::default_instance_;
  delete CSPlayerHPReq_reflection_;
  delete CSMonsterBloodRsp::default_instance_;
  delete CSMonsterBloodRsp_reflection_;
  delete CSPlayerDieShowReq::default_instance_;
  delete CSPlayerDieShowReq_reflection_;
  delete CSPlayerDieShowRsp::default_instance_;
  delete CSPlayerDieShowRsp_reflection_;
  delete CSPlayerMayImproveReq::default_instance_;
  delete CSPlayerMayImproveReq_reflection_;
  delete CSPlayerMayImproveRsp::default_instance_;
  delete CSPlayerMayImproveRsp_reflection_;
}

void protobuf_AddDesc_cs_5fbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_cs_5fcore_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_battle.proto\032\rcs_core.proto\"%\n\007CSPo"
    "int\022\014\n\004xpos\030\001 \002(\005\022\014\n\004ypos\030\002 \002(\005\"\202\001\n\017CSBa"
    "ttleMoveReq\022\n\n\002id\030\001 \002(\r\022\020\n\010reg_time\030\002 \002("
    "\r\022\022\n\nchannel_id\030\003 \002(\r\022\030\n\006direct\030\004 \002(\0132\010."
    "CSPoint\022\025\n\003pos\030\005 \002(\0132\010.CSPoint\022\014\n\004time\030\006"
    " \002(\r\"\202\001\n\017CSBattleMoveRsp\022\n\n\002id\030\001 \002(\r\022\020\n\010"
    "reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\030\n\006di"
    "rect\030\004 \002(\0132\010.CSPoint\022\025\n\003pos\030\005 \002(\0132\010.CSPo"
    "int\022\014\n\004time\030\006 \002(\r\"#\n\021CSBattleCreateReq\022\016"
    "\n\006map_id\030\001 \002(\r\"\303\002\n\021MonsterBattleInfo\022\027\n\017"
    "physical_attack\030\001 \001(\r\022\024\n\014magic_attack\030\002 "
    "\001(\r\022\024\n\014skill_attack\030\003 \001(\r\022\030\n\020physical_de"
    "fence\030\004 \001(\r\022\025\n\rmagic_defence\030\005 \001(\r\022\025\n\rsk"
    "ill_defence\030\006 \001(\r\022\024\n\014health_point\030\007 \001(\r\022"
    "\020\n\010accurate\030\010 \001(\r\022\r\n\005dodge\030\t \001(\r\022\r\n\005wrec"
    "k\030\n \001(\r\022\r\n\005parry\030\013 \001(\r\022\027\n\017critical_strik"
    "e\030\014 \001(\r\022\020\n\010tenacity\030\r \001(\r\022\014\n\004slay\030\016 \001(\r\022"
    "\023\n\013proficiency\030\017 \001(\r\"F\n\013MonsterInfo\022\n\n\002i"
    "d\030\001 \002(\r\022\r\n\005level\030\002 \001(\r\022\r\n\005blood\030\003 \001(\r\022\r\n"
    "\005speed\030\004 \001(\r\"V\n\021CSBattleCreateRsp\022 \n\010use"
    "rinfo\030\001 \001(\0132\016.BasicUserInfo\022\016\n\006map_id\030\002 "
    "\001(\r\022\017\n\007timeout\030\003 \001(\r\"T\n\030CSBattleMonsterC"
    "reateReq\022!\n\013monsterinfo\030\001 \003(\0132\014.MonsterI"
    "nfo\022\025\n\003pos\030\002 \002(\0132\010.CSPoint\"T\n\030CSBattleMo"
    "nsterCreateRsp\022!\n\013monsterinfo\030\001 \003(\0132\014.Mo"
    "nsterInfo\022\025\n\003pos\030\002 \002(\0132\010.CSPoint\"8\n\014CSCa"
    "stleInfo\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \001(\r\022\r\n\005b"
    "lood\030\003 \001(\r\"%\n\023CSBattleUserJoinReq\022\016\n\006roo"
    "mId\030\001 \002(\021\"}\n\023CSBattleUserJoinRsp\022 \n\010user"
    "info\030\001 \002(\0132\016.BasicUserInfo\022!\n\013monsterinf"
    "o\030\002 \003(\0132\014.MonsterInfo\022!\n\ncastleinfo\030\003 \001("
    "\0132\r.CSCastleInfo\"L\n\024CSBattleUserLeaveRsp"
    "\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \001(\r\022\022\n\nch"
    "annel_id\030\003 \001(\r\"\031\n\027CSBattleLoadCompleteRe"
    "q\"*\n\027CSBattleLoadCompleteRsp\022\017\n\007timeout\030"
    "\001 \002(\010\"\022\n\020CSBattleLeaveReq\"{\n\020CSBattleLea"
    "veRsp\022\022\n\ninitiative\030\001 \002(\010\022\014\n\004star\030\002 \001(\r\022"
    "\023\n\013finish_time\030\003 \001(\r\022\024\n\014dead_mon_num\030\004 \001"
    "(\r\022\032\n\007rewards\030\005 \001(\0132\t.CSReward\"\024\n\022CSBatt"
    "leTimeoutRsp\"a\n\024CSBattlePlayerDelRsp\022\016\n\006"
    "userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchanne"
    "l_id\030\003 \002(\r\022\023\n\013exchange_id\030\004 \002(\r\"\032\n\030CSBat"
    "tlePlayerRevivalReq\"P\n\030CSBattlePlayerRev"
    "ivalRsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002("
    "\r\022\022\n\nchannel_id\030\003 \002(\r\".\n\020CSMonsterMoveRe"
    "q\022\n\n\002id\030\001 \002(\r\022\016\n\006direct\030\002 \002(\r\".\n\020CSMonst"
    "erMoveRsp\022\n\n\002id\030\001 \002(\r\022\016\n\006direct\030\002 \002(\r\"7\n"
    "\022CSMonsterCreateReq\022\n\n\002id\030\001 \002(\r\022\025\n\003pos\030\002"
    " \002(\0132\010.CSPoint\"X\n\022CSMonsterCreateRsp\022\n\n\002"
    "id\030\001 \002(\r\022\025\n\003pos\030\002 \002(\0132\010.CSPoint\022\021\n\tid_in"
    "_map\030\003 \001(\r\022\014\n\004side\030\004 \001(\010\"h\n\021AttackMonste"
    "rInfo\022\n\n\002id\030\001 \002(\r\022\025\n\003pos\030\002 \001(\0132\010.CSPoint"
    "\022\r\n\005blood\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\022\021\n\thurt_"
    "type\030\005 \001(\r\"q\n\026CSMonsterHitMonsterReq\022\n\n\002"
    "id\030\001 \002(\r\022\025\n\003pos\030\002 \001(\0132\010.CSPoint\022\021\n\tactio"
    "n_id\030\003 \001(\r\022!\n\005users\030\004 \003(\0132\022.AttackMonste"
    "rInfo\"q\n\026CSMonsterHitMonsterRsp\022\n\n\002id\030\001 "
    "\002(\r\022\025\n\003pos\030\002 \001(\0132\010.CSPoint\022\021\n\taction_id\030"
    "\003 \001(\r\022!\n\005users\030\004 \003(\0132\022.AttackMonsterInfo"
    "\",\n\017CSSMonsterHPReq\022\n\n\002id\030\001 \002(\r\022\r\n\005blood"
    "\030\002 \001(\005\",\n\017CSSMonsterHPRsp\022\n\n\002id\030\001 \002(\r\022\r\n"
    "\005blood\030\002 \001(\005\"\035\n\017CSMonsterDieReq\022\n\n\002id\030\001 "
    "\003(\r\"\035\n\017CSMonsterDieRsp\022\n\n\002id\030\001 \003(\r\"F\n\025CS"
    "MonsterHitCastleReq\022!\n\ncastleinfo\030\001 \002(\0132"
    "\r.CSCastleInfo\022\n\n\002id\030\002 \003(\r\"F\n\025CSMonsterH"
    "itCastleRsp\022!\n\ncastleinfo\030\001 \002(\0132\r.CSCast"
    "leInfo\022\n\n\002id\030\002 \003(\r\"\034\n\016CSCastleDieReq\022\n\n\002"
    "id\030\001 \002(\r\"\034\n\016CSCastleDieRsp\022\n\n\002id\030\001 \002(\r\"\326"
    "\002\n\023CSMonsterAttackInfo\022\n\n\002id\030\001 \002(\r\022\025\n\003po"
    "s\030\002 \002(\0132\010.CSPoint\022\030\n\006direct\030\003 \002(\0132\010.CSPo"
    "int\022\021\n\taction_id\030\004 \002(\r\022\014\n\004type\030\005 \002(\r\022\016\n\006"
    "userid\030\006 \002(\r\022\020\n\010reg_time\030\007 \002(\r\022\022\n\nchanne"
    "l_id\030\010 \002(\r\022\020\n\010skill_id\030\t \002(\r\022\021\n\teffect_i"
    "d\030\n \001(\r\022\033\n\tstart_pos\030\013 \001(\0132\010.CSPoint\022\031\n\007"
    "end_pos\030\014 \001(\0132\010.CSPoint\022\023\n\013skill_speed\030\r"
    " \001(\r\022\022\n\ndelay_time\030\016 \001(\r\022\021\n\tdead_time\030\017 "
    "\001(\r\022\022\n\nshake_time\030\020 \003(\r\"\243\001\n\023CSMonsterEff"
    "ectInfo\022\014\n\004type\030\001 \002(\r\022\021\n\teffect_id\030\002 \001(\r"
    "\022\033\n\tstart_pos\030\003 \001(\0132\010.CSPoint\022\031\n\007end_pos"
    "\030\004 \001(\0132\010.CSPoint\022\023\n\013skill_speed\030\005 \001(\r\022\022\n"
    "\ndelay_time\030\006 \001(\r\022\n\n\002id\030\007 \001(\r\";\n\022CSMonst"
    "erAttackRsp\022%\n\007attacks\030\001 \003(\0132\024.CSMonster"
    "AttackInfo\";\n\022CSMonsterEffectRsp\022%\n\007effe"
    "cts\030\001 \003(\0132\024.CSMonsterEffectInfo\"\373\001\n\027CSMo"
    "nsterBuffEffectInfo\022\021\n\taction_id\030\001 \002(\r\022\021"
    "\n\teffect_id\030\002 \002(\r\022\022\n\ndelay_time\030\003 \002(\r\022\021\n"
    "\tdead_time\030\004 \002(\r\022:\n\tbuff_info\030\005 \003(\0132\'.CS"
    "MonsterBuffEffectInfo.BuffEffectInfo\022\020\n\010"
    "skill_id\030\006 \002(\r\032E\n\016BuffEffectInfo\022\n\n\002id\030\001"
    " \002(\r\022\'\n\013battle_info\030\002 \002(\0132\022.MonsterBattl"
    "eInfo\"<\n\017CSBuffEffectRsp\022)\n\007effects\030\001 \003("
    "\0132\030.CSMonsterBuffEffectInfo\"\263\001\n\017CSMonste"
    "rHitRsp\022(\n\005users\030\001 \003(\0132\031.CSMonsterHitRsp"
    ".UserInfo\032v\n\010UserInfo\022\021\n\thurt_type\030\001 \002(\r"
    "\022\016\n\006userid\030\002 \002(\r\022\020\n\010reg_time\030\003 \002(\r\022\022\n\nch"
    "annel_id\030\004 \002(\r\022\r\n\005blood\030\005 \002(\r\022\022\n\nrage_po"
    "int\030\006 \002(\r\"\352\001\n\017CSSkillBeginReq\022\016\n\006userid\030"
    "\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 "
    "\002(\r\022\021\n\taction_id\030\004 \002(\r\022\025\n\003pos\030\005 \002(\0132\010.CS"
    "Point\022\023\n\013start_dir_x\030\006 \002(\002\022\023\n\013start_dir_"
    "y\030\007 \002(\002\022\034\n\ntarget_pos\030\010 \002(\0132\010.CSPoint\022\020\n"
    "\010direct_x\030\t \002(\002\022\020\n\010direct_y\030\n \002(\002\022\013\n\003aim"
    "\030\013 \002(\010\"\352\001\n\017CSSkillBeginRsp\022\016\n\006userid\030\001 \002"
    "(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r"
    "\022\021\n\taction_id\030\004 \002(\r\022\025\n\003pos\030\005 \002(\0132\010.CSPoi"
    "nt\022\023\n\013start_dir_x\030\006 \002(\002\022\023\n\013start_dir_y\030\007"
    " \002(\002\022\034\n\ntarget_pos\030\010 \002(\0132\010.CSPoint\022\020\n\010di"
    "rect_x\030\t \002(\002\022\020\n\010direct_y\030\n \002(\002\022\013\n\003aim\030\013 "
    "\002(\010\"\370\001\n\021CSPlayerAttackReq\022\016\n\006userid\030\001 \002("
    "\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022"
    "\033\n\tstart_pos\030\004 \002(\0132\010.CSPoint\022\036\n\014start_di"
    "rect\030\005 \002(\0132\010.CSPoint\022\031\n\007end_pos\030\006 \002(\0132\010."
    "CSPoint\022\034\n\nend_direct\030\007 \002(\0132\010.CSPoint\022\021\n"
    "\taction_id\030\010 \002(\r\022$\n\010monsters\030\t \003(\0132\022.Att"
    "ackMonsterInfo\"\370\001\n\021CSPlayerAttackRsp\022\016\n\006"
    "userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchanne"
    "l_id\030\003 \002(\r\022\033\n\tstart_pos\030\004 \002(\0132\010.CSPoint\022"
    "\036\n\014start_direct\030\005 \002(\0132\010.CSPoint\022\031\n\007end_p"
    "os\030\006 \002(\0132\010.CSPoint\022\034\n\nend_direct\030\007 \002(\0132\010"
    ".CSPoint\022\021\n\taction_id\030\010 \002(\r\022$\n\010monsters\030"
    "\t \003(\0132\022.AttackMonsterInfo\"j\n\020AttackPlaye"
    "rInfo\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022"
    "\022\n\nchannel_id\030\003 \002(\r\022\r\n\005blood\030\004 \002(\r\022\021\n\thu"
    "rt_type\030\005 \002(\r\"\367\001\n\024CSPlayerHitPlayerReq\022\016"
    "\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022\n\nchan"
    "nel_id\030\003 \002(\r\022\033\n\tstart_pos\030\004 \002(\0132\010.CSPoin"
    "t\022\036\n\014start_direct\030\005 \002(\0132\010.CSPoint\022\031\n\007end"
    "_pos\030\006 \002(\0132\010.CSPoint\022\034\n\nend_direct\030\007 \002(\013"
    "2\010.CSPoint\022\021\n\taction_id\030\010 \002(\r\022 \n\005users\030\t"
    " \003(\0132\021.AttackPlayerInfo\"\367\001\n\024CSPlayerHitP"
    "layerRsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002"
    "(\r\022\022\n\nchannel_id\030\003 \002(\r\022\033\n\tstart_pos\030\004 \002("
    "\0132\010.CSPoint\022\036\n\014start_direct\030\005 \002(\0132\010.CSPo"
    "int\022\031\n\007end_pos\030\006 \002(\0132\010.CSPoint\022\034\n\nend_di"
    "rect\030\007 \002(\0132\010.CSPoint\022\021\n\taction_id\030\010 \002(\r\022"
    " \n\005users\030\t \003(\0132\021.AttackPlayerInfo\"\233\001\n\rCS"
    "PlayerHPRsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030"
    "\002 \002(\r\022\022\n\nchannel_id\030\003 \002(\r\022\r\n\005blood\030\004 \002(\r"
    "\022\021\n\tsource_id\030\005 \001(\r\022\027\n\017source_reg_time\030\006"
    " \001(\r\022\031\n\021source_channel_id\030\007 \001(\r\"\036\n\rCSPla"
    "yerHPReq\022\r\n\005blood\030\001 \002(\005\"o\n\021CSMonsterBloo"
    "dRsp\022\016\n\006userid\030\001 \002(\r\022\020\n\010reg_time\030\002 \002(\r\022\022"
    "\n\nchannel_id\030\003 \002(\r\022$\n\010monsters\030\004 \003(\0132\022.A"
    "ttackMonsterInfo\"\024\n\022CSPlayerDieShowReq\"@"
    "\n\022CSPlayerDieShowRsp\022\016\n\006attack\030\001 \002(\r\022\016\n\006"
    "defend\030\002 \002(\r\022\n\n\002hp\030\003 \002(\r\"\027\n\025CSPlayerMayI"
    "mproveReq\")\n\025CSPlayerMayImproveRsp\022\020\n\010im"
    "p_item\030\001 \002(\r", 5892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_battle.proto", &protobuf_RegisterTypes);
  CSPoint::default_instance_ = new CSPoint();
  CSBattleMoveReq::default_instance_ = new CSBattleMoveReq();
  CSBattleMoveRsp::default_instance_ = new CSBattleMoveRsp();
  CSBattleCreateReq::default_instance_ = new CSBattleCreateReq();
  MonsterBattleInfo::default_instance_ = new MonsterBattleInfo();
  MonsterInfo::default_instance_ = new MonsterInfo();
  CSBattleCreateRsp::default_instance_ = new CSBattleCreateRsp();
  CSBattleMonsterCreateReq::default_instance_ = new CSBattleMonsterCreateReq();
  CSBattleMonsterCreateRsp::default_instance_ = new CSBattleMonsterCreateRsp();
  CSCastleInfo::default_instance_ = new CSCastleInfo();
  CSBattleUserJoinReq::default_instance_ = new CSBattleUserJoinReq();
  CSBattleUserJoinRsp::default_instance_ = new CSBattleUserJoinRsp();
  CSBattleUserLeaveRsp::default_instance_ = new CSBattleUserLeaveRsp();
  CSBattleLoadCompleteReq::default_instance_ = new CSBattleLoadCompleteReq();
  CSBattleLoadCompleteRsp::default_instance_ = new CSBattleLoadCompleteRsp();
  CSBattleLeaveReq::default_instance_ = new CSBattleLeaveReq();
  CSBattleLeaveRsp::default_instance_ = new CSBattleLeaveRsp();
  CSBattleTimeoutRsp::default_instance_ = new CSBattleTimeoutRsp();
  CSBattlePlayerDelRsp::default_instance_ = new CSBattlePlayerDelRsp();
  CSBattlePlayerRevivalReq::default_instance_ = new CSBattlePlayerRevivalReq();
  CSBattlePlayerRevivalRsp::default_instance_ = new CSBattlePlayerRevivalRsp();
  CSMonsterMoveReq::default_instance_ = new CSMonsterMoveReq();
  CSMonsterMoveRsp::default_instance_ = new CSMonsterMoveRsp();
  CSMonsterCreateReq::default_instance_ = new CSMonsterCreateReq();
  CSMonsterCreateRsp::default_instance_ = new CSMonsterCreateRsp();
  AttackMonsterInfo::default_instance_ = new AttackMonsterInfo();
  CSMonsterHitMonsterReq::default_instance_ = new CSMonsterHitMonsterReq();
  CSMonsterHitMonsterRsp::default_instance_ = new CSMonsterHitMonsterRsp();
  CSSMonsterHPReq::default_instance_ = new CSSMonsterHPReq();
  CSSMonsterHPRsp::default_instance_ = new CSSMonsterHPRsp();
  CSMonsterDieReq::default_instance_ = new CSMonsterDieReq();
  CSMonsterDieRsp::default_instance_ = new CSMonsterDieRsp();
  CSMonsterHitCastleReq::default_instance_ = new CSMonsterHitCastleReq();
  CSMonsterHitCastleRsp::default_instance_ = new CSMonsterHitCastleRsp();
  CSCastleDieReq::default_instance_ = new CSCastleDieReq();
  CSCastleDieRsp::default_instance_ = new CSCastleDieRsp();
  CSMonsterAttackInfo::default_instance_ = new CSMonsterAttackInfo();
  CSMonsterEffectInfo::default_instance_ = new CSMonsterEffectInfo();
  CSMonsterAttackRsp::default_instance_ = new CSMonsterAttackRsp();
  CSMonsterEffectRsp::default_instance_ = new CSMonsterEffectRsp();
  CSMonsterBuffEffectInfo::default_instance_ = new CSMonsterBuffEffectInfo();
  CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_ = new CSMonsterBuffEffectInfo_BuffEffectInfo();
  CSBuffEffectRsp::default_instance_ = new CSBuffEffectRsp();
  CSMonsterHitRsp::default_instance_ = new CSMonsterHitRsp();
  CSMonsterHitRsp_UserInfo::default_instance_ = new CSMonsterHitRsp_UserInfo();
  CSSkillBeginReq::default_instance_ = new CSSkillBeginReq();
  CSSkillBeginRsp::default_instance_ = new CSSkillBeginRsp();
  CSPlayerAttackReq::default_instance_ = new CSPlayerAttackReq();
  CSPlayerAttackRsp::default_instance_ = new CSPlayerAttackRsp();
  AttackPlayerInfo::default_instance_ = new AttackPlayerInfo();
  CSPlayerHitPlayerReq::default_instance_ = new CSPlayerHitPlayerReq();
  CSPlayerHitPlayerRsp::default_instance_ = new CSPlayerHitPlayerRsp();
  CSPlayerHPRsp::default_instance_ = new CSPlayerHPRsp();
  CSPlayerHPReq::default_instance_ = new CSPlayerHPReq();
  CSMonsterBloodRsp::default_instance_ = new CSMonsterBloodRsp();
  CSPlayerDieShowReq::default_instance_ = new CSPlayerDieShowReq();
  CSPlayerDieShowRsp::default_instance_ = new CSPlayerDieShowRsp();
  CSPlayerMayImproveReq::default_instance_ = new CSPlayerMayImproveReq();
  CSPlayerMayImproveRsp::default_instance_ = new CSPlayerMayImproveRsp();
  CSPoint::default_instance_->InitAsDefaultInstance();
  CSBattleMoveReq::default_instance_->InitAsDefaultInstance();
  CSBattleMoveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleCreateReq::default_instance_->InitAsDefaultInstance();
  MonsterBattleInfo::default_instance_->InitAsDefaultInstance();
  MonsterInfo::default_instance_->InitAsDefaultInstance();
  CSBattleCreateRsp::default_instance_->InitAsDefaultInstance();
  CSBattleMonsterCreateReq::default_instance_->InitAsDefaultInstance();
  CSBattleMonsterCreateRsp::default_instance_->InitAsDefaultInstance();
  CSCastleInfo::default_instance_->InitAsDefaultInstance();
  CSBattleUserJoinReq::default_instance_->InitAsDefaultInstance();
  CSBattleUserJoinRsp::default_instance_->InitAsDefaultInstance();
  CSBattleUserLeaveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleLoadCompleteReq::default_instance_->InitAsDefaultInstance();
  CSBattleLoadCompleteRsp::default_instance_->InitAsDefaultInstance();
  CSBattleLeaveReq::default_instance_->InitAsDefaultInstance();
  CSBattleLeaveRsp::default_instance_->InitAsDefaultInstance();
  CSBattleTimeoutRsp::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerDelRsp::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerRevivalReq::default_instance_->InitAsDefaultInstance();
  CSBattlePlayerRevivalRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterMoveReq::default_instance_->InitAsDefaultInstance();
  CSMonsterMoveRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterCreateReq::default_instance_->InitAsDefaultInstance();
  CSMonsterCreateRsp::default_instance_->InitAsDefaultInstance();
  AttackMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterHitMonsterReq::default_instance_->InitAsDefaultInstance();
  CSMonsterHitMonsterRsp::default_instance_->InitAsDefaultInstance();
  CSSMonsterHPReq::default_instance_->InitAsDefaultInstance();
  CSSMonsterHPRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterDieReq::default_instance_->InitAsDefaultInstance();
  CSMonsterDieRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitCastleReq::default_instance_->InitAsDefaultInstance();
  CSMonsterHitCastleRsp::default_instance_->InitAsDefaultInstance();
  CSCastleDieReq::default_instance_->InitAsDefaultInstance();
  CSCastleDieRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterAttackInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterEffectInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterAttackRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterEffectRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterBuffEffectInfo::default_instance_->InitAsDefaultInstance();
  CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_->InitAsDefaultInstance();
  CSBuffEffectRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitRsp::default_instance_->InitAsDefaultInstance();
  CSMonsterHitRsp_UserInfo::default_instance_->InitAsDefaultInstance();
  CSSkillBeginReq::default_instance_->InitAsDefaultInstance();
  CSSkillBeginRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerAttackReq::default_instance_->InitAsDefaultInstance();
  CSPlayerAttackRsp::default_instance_->InitAsDefaultInstance();
  AttackPlayerInfo::default_instance_->InitAsDefaultInstance();
  CSPlayerHitPlayerReq::default_instance_->InitAsDefaultInstance();
  CSPlayerHitPlayerRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerHPRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerHPReq::default_instance_->InitAsDefaultInstance();
  CSMonsterBloodRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerDieShowReq::default_instance_->InitAsDefaultInstance();
  CSPlayerDieShowRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerMayImproveReq::default_instance_->InitAsDefaultInstance();
  CSPlayerMayImproveRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fbattle_2eproto {
  StaticDescriptorInitializer_cs_5fbattle_2eproto() {
    protobuf_AddDesc_cs_5fbattle_2eproto();
  }
} static_descriptor_initializer_cs_5fbattle_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CSPoint::kXposFieldNumber;
const int CSPoint::kYposFieldNumber;
#endif  // !_MSC_VER

CSPoint::CSPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPoint::InitAsDefaultInstance() {
}

CSPoint::CSPoint(const CSPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPoint::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPoint::~CSPoint() {
  SharedDtor();
}

void CSPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPoint_descriptor_;
}

const CSPoint& CSPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPoint* CSPoint::default_instance_ = NULL;

CSPoint* CSPoint::New() const {
  return new CSPoint;
}

void CSPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 xpos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ypos;
        break;
      }
      
      // required int32 ypos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpos(), output);
  }
  
  // required int32 ypos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ypos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xpos(), target);
  }
  
  // required int32 ypos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ypos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xpos = 1;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }
    
    // required int32 ypos = 2;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPoint::MergeFrom(const CSPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPoint::CopyFrom(const CSPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSPoint::Swap(CSPoint* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPoint_descriptor_;
  metadata.reflection = CSPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMoveReq::kIdFieldNumber;
const int CSBattleMoveReq::kRegTimeFieldNumber;
const int CSBattleMoveReq::kChannelIdFieldNumber;
const int CSBattleMoveReq::kDirectFieldNumber;
const int CSBattleMoveReq::kPosFieldNumber;
const int CSBattleMoveReq::kTimeFieldNumber;
#endif  // !_MSC_VER

CSBattleMoveReq::CSBattleMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMoveReq::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMoveReq::CSBattleMoveReq(const CSBattleMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMoveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  direct_ = NULL;
  pos_ = NULL;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMoveReq::~CSBattleMoveReq() {
  SharedDtor();
}

void CSBattleMoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
    delete pos_;
  }
}

void CSBattleMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMoveReq_descriptor_;
}

const CSBattleMoveReq& CSBattleMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMoveReq* CSBattleMoveReq::default_instance_ = NULL;

CSBattleMoveReq* CSBattleMoveReq::New() const {
  return new CSBattleMoveReq;
}

void CSBattleMoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // required uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direct(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direct(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMoveReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMoveReq::MergeFrom(const CSBattleMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMoveReq::CopyFrom(const CSBattleMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMoveReq::Swap(CSBattleMoveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(direct_, other->direct_);
    std::swap(pos_, other->pos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMoveReq_descriptor_;
  metadata.reflection = CSBattleMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMoveRsp::kIdFieldNumber;
const int CSBattleMoveRsp::kRegTimeFieldNumber;
const int CSBattleMoveRsp::kChannelIdFieldNumber;
const int CSBattleMoveRsp::kDirectFieldNumber;
const int CSBattleMoveRsp::kPosFieldNumber;
const int CSBattleMoveRsp::kTimeFieldNumber;
#endif  // !_MSC_VER

CSBattleMoveRsp::CSBattleMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMoveRsp::InitAsDefaultInstance() {
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMoveRsp::CSBattleMoveRsp(const CSBattleMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  direct_ = NULL;
  pos_ = NULL;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMoveRsp::~CSBattleMoveRsp() {
  SharedDtor();
}

void CSBattleMoveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete direct_;
    delete pos_;
  }
}

void CSBattleMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMoveRsp_descriptor_;
}

const CSBattleMoveRsp& CSBattleMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMoveRsp* CSBattleMoveRsp::default_instance_ = NULL;

CSBattleMoveRsp* CSBattleMoveRsp::New() const {
  return new CSBattleMoveRsp;
}

void CSBattleMoveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // required uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direct(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direct(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMoveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMoveRsp::MergeFrom(const CSBattleMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMoveRsp::CopyFrom(const CSBattleMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMoveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMoveRsp::Swap(CSBattleMoveRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(direct_, other->direct_);
    std::swap(pos_, other->pos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMoveRsp_descriptor_;
  metadata.reflection = CSBattleMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleCreateReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

CSBattleCreateReq::CSBattleCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleCreateReq::InitAsDefaultInstance() {
}

CSBattleCreateReq::CSBattleCreateReq(const CSBattleCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleCreateReq::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleCreateReq::~CSBattleCreateReq() {
  SharedDtor();
}

void CSBattleCreateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleCreateReq_descriptor_;
}

const CSBattleCreateReq& CSBattleCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleCreateReq* CSBattleCreateReq::default_instance_ = NULL;

CSBattleCreateReq* CSBattleCreateReq::New() const {
  return new CSBattleCreateReq;
}

void CSBattleCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleCreateReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleCreateReq::MergeFrom(const CSBattleCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleCreateReq::CopyFrom(const CSBattleCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSBattleCreateReq::Swap(CSBattleCreateReq* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleCreateReq_descriptor_;
  metadata.reflection = CSBattleCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterBattleInfo::kPhysicalAttackFieldNumber;
const int MonsterBattleInfo::kMagicAttackFieldNumber;
const int MonsterBattleInfo::kSkillAttackFieldNumber;
const int MonsterBattleInfo::kPhysicalDefenceFieldNumber;
const int MonsterBattleInfo::kMagicDefenceFieldNumber;
const int MonsterBattleInfo::kSkillDefenceFieldNumber;
const int MonsterBattleInfo::kHealthPointFieldNumber;
const int MonsterBattleInfo::kAccurateFieldNumber;
const int MonsterBattleInfo::kDodgeFieldNumber;
const int MonsterBattleInfo::kWreckFieldNumber;
const int MonsterBattleInfo::kParryFieldNumber;
const int MonsterBattleInfo::kCriticalStrikeFieldNumber;
const int MonsterBattleInfo::kTenacityFieldNumber;
const int MonsterBattleInfo::kSlayFieldNumber;
const int MonsterBattleInfo::kProficiencyFieldNumber;
#endif  // !_MSC_VER

MonsterBattleInfo::MonsterBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterBattleInfo::InitAsDefaultInstance() {
}

MonsterBattleInfo::MonsterBattleInfo(const MonsterBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  physical_attack_ = 0u;
  magic_attack_ = 0u;
  skill_attack_ = 0u;
  physical_defence_ = 0u;
  magic_defence_ = 0u;
  skill_defence_ = 0u;
  health_point_ = 0u;
  accurate_ = 0u;
  dodge_ = 0u;
  wreck_ = 0u;
  parry_ = 0u;
  critical_strike_ = 0u;
  tenacity_ = 0u;
  slay_ = 0u;
  proficiency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterBattleInfo::~MonsterBattleInfo() {
  SharedDtor();
}

void MonsterBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterBattleInfo_descriptor_;
}

const MonsterBattleInfo& MonsterBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

MonsterBattleInfo* MonsterBattleInfo::default_instance_ = NULL;

MonsterBattleInfo* MonsterBattleInfo::New() const {
  return new MonsterBattleInfo;
}

void MonsterBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    physical_attack_ = 0u;
    magic_attack_ = 0u;
    skill_attack_ = 0u;
    physical_defence_ = 0u;
    magic_defence_ = 0u;
    skill_defence_ = 0u;
    health_point_ = 0u;
    accurate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dodge_ = 0u;
    wreck_ = 0u;
    parry_ = 0u;
    critical_strike_ = 0u;
    tenacity_ = 0u;
    slay_ = 0u;
    proficiency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 physical_attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic_attack;
        break;
      }
      
      // optional uint32 magic_attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_attack;
        break;
      }
      
      // optional uint32 skill_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_attack_)));
          set_has_skill_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physical_defence;
        break;
      }
      
      // optional uint32 physical_defence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_defence_)));
          set_has_physical_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_magic_defence;
        break;
      }
      
      // optional uint32 magic_defence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_defence_)));
          set_has_magic_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_defence;
        break;
      }
      
      // optional uint32 skill_defence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_defence_)));
          set_has_skill_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_health_point;
        break;
      }
      
      // optional uint32 health_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_point_)));
          set_has_health_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_accurate;
        break;
      }
      
      // optional uint32 accurate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dodge;
        break;
      }
      
      // optional uint32 dodge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wreck;
        break;
      }
      
      // optional uint32 wreck = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wreck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wreck_)));
          set_has_wreck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_parry;
        break;
      }
      
      // optional uint32 parry = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parry_)));
          set_has_parry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critical_strike;
        break;
      }
      
      // optional uint32 critical_strike = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_strike_)));
          set_has_critical_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tenacity;
        break;
      }
      
      // optional uint32 tenacity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tenacity_)));
          set_has_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_slay;
        break;
      }
      
      // optional uint32 slay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slay_)));
          set_has_slay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_proficiency;
        break;
      }
      
      // optional uint32 proficiency = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 physical_attack = 1;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->physical_attack(), output);
  }
  
  // optional uint32 magic_attack = 2;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic_attack(), output);
  }
  
  // optional uint32 skill_attack = 3;
  if (has_skill_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_attack(), output);
  }
  
  // optional uint32 physical_defence = 4;
  if (has_physical_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->physical_defence(), output);
  }
  
  // optional uint32 magic_defence = 5;
  if (has_magic_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magic_defence(), output);
  }
  
  // optional uint32 skill_defence = 6;
  if (has_skill_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_defence(), output);
  }
  
  // optional uint32 health_point = 7;
  if (has_health_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->health_point(), output);
  }
  
  // optional uint32 accurate = 8;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->accurate(), output);
  }
  
  // optional uint32 dodge = 9;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dodge(), output);
  }
  
  // optional uint32 wreck = 10;
  if (has_wreck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wreck(), output);
  }
  
  // optional uint32 parry = 11;
  if (has_parry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->parry(), output);
  }
  
  // optional uint32 critical_strike = 12;
  if (has_critical_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critical_strike(), output);
  }
  
  // optional uint32 tenacity = 13;
  if (has_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tenacity(), output);
  }
  
  // optional uint32 slay = 14;
  if (has_slay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->slay(), output);
  }
  
  // optional uint32 proficiency = 15;
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->proficiency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 physical_attack = 1;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->physical_attack(), target);
  }
  
  // optional uint32 magic_attack = 2;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic_attack(), target);
  }
  
  // optional uint32 skill_attack = 3;
  if (has_skill_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_attack(), target);
  }
  
  // optional uint32 physical_defence = 4;
  if (has_physical_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->physical_defence(), target);
  }
  
  // optional uint32 magic_defence = 5;
  if (has_magic_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->magic_defence(), target);
  }
  
  // optional uint32 skill_defence = 6;
  if (has_skill_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_defence(), target);
  }
  
  // optional uint32 health_point = 7;
  if (has_health_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->health_point(), target);
  }
  
  // optional uint32 accurate = 8;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->accurate(), target);
  }
  
  // optional uint32 dodge = 9;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dodge(), target);
  }
  
  // optional uint32 wreck = 10;
  if (has_wreck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wreck(), target);
  }
  
  // optional uint32 parry = 11;
  if (has_parry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->parry(), target);
  }
  
  // optional uint32 critical_strike = 12;
  if (has_critical_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critical_strike(), target);
  }
  
  // optional uint32 tenacity = 13;
  if (has_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tenacity(), target);
  }
  
  // optional uint32 slay = 14;
  if (has_slay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->slay(), target);
  }
  
  // optional uint32 proficiency = 15;
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->proficiency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterBattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 physical_attack = 1;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_attack());
    }
    
    // optional uint32 magic_attack = 2;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_attack());
    }
    
    // optional uint32 skill_attack = 3;
    if (has_skill_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_attack());
    }
    
    // optional uint32 physical_defence = 4;
    if (has_physical_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_defence());
    }
    
    // optional uint32 magic_defence = 5;
    if (has_magic_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic_defence());
    }
    
    // optional uint32 skill_defence = 6;
    if (has_skill_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_defence());
    }
    
    // optional uint32 health_point = 7;
    if (has_health_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_point());
    }
    
    // optional uint32 accurate = 8;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accurate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dodge = 9;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // optional uint32 wreck = 10;
    if (has_wreck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wreck());
    }
    
    // optional uint32 parry = 11;
    if (has_parry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parry());
    }
    
    // optional uint32 critical_strike = 12;
    if (has_critical_strike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical_strike());
    }
    
    // optional uint32 tenacity = 13;
    if (has_tenacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tenacity());
    }
    
    // optional uint32 slay = 14;
    if (has_slay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slay());
    }
    
    // optional uint32 proficiency = 15;
    if (has_proficiency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterBattleInfo::MergeFrom(const MonsterBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_skill_attack()) {
      set_skill_attack(from.skill_attack());
    }
    if (from.has_physical_defence()) {
      set_physical_defence(from.physical_defence());
    }
    if (from.has_magic_defence()) {
      set_magic_defence(from.magic_defence());
    }
    if (from.has_skill_defence()) {
      set_skill_defence(from.skill_defence());
    }
    if (from.has_health_point()) {
      set_health_point(from.health_point());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_wreck()) {
      set_wreck(from.wreck());
    }
    if (from.has_parry()) {
      set_parry(from.parry());
    }
    if (from.has_critical_strike()) {
      set_critical_strike(from.critical_strike());
    }
    if (from.has_tenacity()) {
      set_tenacity(from.tenacity());
    }
    if (from.has_slay()) {
      set_slay(from.slay());
    }
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterBattleInfo::CopyFrom(const MonsterBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterBattleInfo::IsInitialized() const {
  
  return true;
}

void MonsterBattleInfo::Swap(MonsterBattleInfo* other) {
  if (other != this) {
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(skill_attack_, other->skill_attack_);
    std::swap(physical_defence_, other->physical_defence_);
    std::swap(magic_defence_, other->magic_defence_);
    std::swap(skill_defence_, other->skill_defence_);
    std::swap(health_point_, other->health_point_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(wreck_, other->wreck_);
    std::swap(parry_, other->parry_);
    std::swap(critical_strike_, other->critical_strike_);
    std::swap(tenacity_, other->tenacity_);
    std::swap(slay_, other->slay_);
    std::swap(proficiency_, other->proficiency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterBattleInfo_descriptor_;
  metadata.reflection = MonsterBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterInfo::kIdFieldNumber;
const int MonsterInfo::kLevelFieldNumber;
const int MonsterInfo::kBloodFieldNumber;
const int MonsterInfo::kSpeedFieldNumber;
#endif  // !_MSC_VER

MonsterInfo::MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterInfo::InitAsDefaultInstance() {
}

MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  blood_ = 0u;
  speed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterInfo::~MonsterInfo() {
  SharedDtor();
}

void MonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterInfo_descriptor_;
}

const MonsterInfo& MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

MonsterInfo* MonsterInfo::default_instance_ = NULL;

MonsterInfo* MonsterInfo::New() const {
  return new MonsterInfo;
}

void MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    blood_ = 0u;
    speed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }
      
      // optional uint32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }
      
      // optional uint32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blood(), output);
  }
  
  // optional uint32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blood(), target);
  }
  
  // optional uint32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // optional uint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterInfo::MergeFrom(const MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MonsterInfo::Swap(MonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(blood_, other->blood_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterInfo_descriptor_;
  metadata.reflection = MonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleCreateRsp::kUserinfoFieldNumber;
const int CSBattleCreateRsp::kMapIdFieldNumber;
const int CSBattleCreateRsp::kTimeoutFieldNumber;
#endif  // !_MSC_VER

CSBattleCreateRsp::CSBattleCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleCreateRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::BasicUserInfo*>(&::BasicUserInfo::default_instance());
}

CSBattleCreateRsp::CSBattleCreateRsp(const CSBattleCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  map_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleCreateRsp::~CSBattleCreateRsp() {
  SharedDtor();
}

void CSBattleCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void CSBattleCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleCreateRsp_descriptor_;
}

const CSBattleCreateRsp& CSBattleCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleCreateRsp* CSBattleCreateRsp::default_instance_ = NULL;

CSBattleCreateRsp* CSBattleCreateRsp::New() const {
  return new CSBattleCreateRsp;
}

void CSBattleCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::BasicUserInfo::Clear();
    }
    map_id_ = 0u;
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BasicUserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }
      
      // optional uint32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }
      
      // optional uint32 timeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BasicUserInfo userinfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }
  
  // optional uint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }
  
  // optional uint32 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .BasicUserInfo userinfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }
  
  // optional uint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }
  
  // optional uint32 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleCreateRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BasicUserInfo userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }
    
    // optional uint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
    // optional uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleCreateRsp::MergeFrom(const CSBattleCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::BasicUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleCreateRsp::CopyFrom(const CSBattleCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleCreateRsp::IsInitialized() const {
  
  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void CSBattleCreateRsp::Swap(CSBattleCreateRsp* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(map_id_, other->map_id_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleCreateRsp_descriptor_;
  metadata.reflection = CSBattleCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMonsterCreateReq::kMonsterinfoFieldNumber;
const int CSBattleMonsterCreateReq::kPosFieldNumber;
#endif  // !_MSC_VER

CSBattleMonsterCreateReq::CSBattleMonsterCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMonsterCreateReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMonsterCreateReq::CSBattleMonsterCreateReq(const CSBattleMonsterCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMonsterCreateReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMonsterCreateReq::~CSBattleMonsterCreateReq() {
  SharedDtor();
}

void CSBattleMonsterCreateReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CSBattleMonsterCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMonsterCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMonsterCreateReq_descriptor_;
}

const CSBattleMonsterCreateReq& CSBattleMonsterCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMonsterCreateReq* CSBattleMonsterCreateReq::default_instance_ = NULL;

CSBattleMonsterCreateReq* CSBattleMonsterCreateReq::New() const {
  return new CSBattleMonsterCreateReq;
}

void CSBattleMonsterCreateReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
  }
  monsterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMonsterCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterInfo monsterinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterinfo;
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMonsterCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(i), output);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMonsterCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(i), target);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMonsterCreateReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  // repeated .MonsterInfo monsterinfo = 1;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMonsterCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMonsterCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMonsterCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMonsterCreateReq::MergeFrom(const CSBattleMonsterCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMonsterCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMonsterCreateReq::CopyFrom(const CSBattleMonsterCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMonsterCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMonsterCreateReq::Swap(CSBattleMonsterCreateReq* other) {
  if (other != this) {
    monsterinfo_.Swap(&other->monsterinfo_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMonsterCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMonsterCreateReq_descriptor_;
  metadata.reflection = CSBattleMonsterCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleMonsterCreateRsp::kMonsterinfoFieldNumber;
const int CSBattleMonsterCreateRsp::kPosFieldNumber;
#endif  // !_MSC_VER

CSBattleMonsterCreateRsp::CSBattleMonsterCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleMonsterCreateRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSBattleMonsterCreateRsp::CSBattleMonsterCreateRsp(const CSBattleMonsterCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleMonsterCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleMonsterCreateRsp::~CSBattleMonsterCreateRsp() {
  SharedDtor();
}

void CSBattleMonsterCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CSBattleMonsterCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleMonsterCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleMonsterCreateRsp_descriptor_;
}

const CSBattleMonsterCreateRsp& CSBattleMonsterCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleMonsterCreateRsp* CSBattleMonsterCreateRsp::default_instance_ = NULL;

CSBattleMonsterCreateRsp* CSBattleMonsterCreateRsp::New() const {
  return new CSBattleMonsterCreateRsp;
}

void CSBattleMonsterCreateRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
  }
  monsterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleMonsterCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MonsterInfo monsterinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterinfo;
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleMonsterCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(i), output);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleMonsterCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MonsterInfo monsterinfo = 1;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(i), target);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleMonsterCreateRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  // repeated .MonsterInfo monsterinfo = 1;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleMonsterCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleMonsterCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleMonsterCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleMonsterCreateRsp::MergeFrom(const CSBattleMonsterCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleMonsterCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleMonsterCreateRsp::CopyFrom(const CSBattleMonsterCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleMonsterCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSBattleMonsterCreateRsp::Swap(CSBattleMonsterCreateRsp* other) {
  if (other != this) {
    monsterinfo_.Swap(&other->monsterinfo_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleMonsterCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleMonsterCreateRsp_descriptor_;
  metadata.reflection = CSBattleMonsterCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCastleInfo::kIdFieldNumber;
const int CSCastleInfo::kLevelFieldNumber;
const int CSCastleInfo::kBloodFieldNumber;
#endif  // !_MSC_VER

CSCastleInfo::CSCastleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCastleInfo::InitAsDefaultInstance() {
}

CSCastleInfo::CSCastleInfo(const CSCastleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCastleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  blood_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCastleInfo::~CSCastleInfo() {
  SharedDtor();
}

void CSCastleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCastleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCastleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCastleInfo_descriptor_;
}

const CSCastleInfo& CSCastleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCastleInfo* CSCastleInfo::default_instance_ = NULL;

CSCastleInfo* CSCastleInfo::New() const {
  return new CSCastleInfo;
}

void CSCastleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    blood_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCastleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }
      
      // optional uint32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCastleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCastleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCastleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCastleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCastleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCastleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCastleInfo::MergeFrom(const CSCastleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCastleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCastleInfo::CopyFrom(const CSCastleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCastleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSCastleInfo::Swap(CSCastleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCastleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCastleInfo_descriptor_;
  metadata.reflection = CSCastleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserJoinReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CSBattleUserJoinReq::CSBattleUserJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserJoinReq::InitAsDefaultInstance() {
}

CSBattleUserJoinReq::CSBattleUserJoinReq(const CSBattleUserJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserJoinReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserJoinReq::~CSBattleUserJoinReq() {
  SharedDtor();
}

void CSBattleUserJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserJoinReq_descriptor_;
}

const CSBattleUserJoinReq& CSBattleUserJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleUserJoinReq* CSBattleUserJoinReq::default_instance_ = NULL;

CSBattleUserJoinReq* CSBattleUserJoinReq::New() const {
  return new CSBattleUserJoinReq;
}

void CSBattleUserJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->roomid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->roomid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserJoinReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->roomid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserJoinReq::MergeFrom(const CSBattleUserJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserJoinReq::CopyFrom(const CSBattleUserJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSBattleUserJoinReq::Swap(CSBattleUserJoinReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserJoinReq_descriptor_;
  metadata.reflection = CSBattleUserJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserJoinRsp::kUserinfoFieldNumber;
const int CSBattleUserJoinRsp::kMonsterinfoFieldNumber;
const int CSBattleUserJoinRsp::kCastleinfoFieldNumber;
#endif  // !_MSC_VER

CSBattleUserJoinRsp::CSBattleUserJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserJoinRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::BasicUserInfo*>(&::BasicUserInfo::default_instance());
  castleinfo_ = const_cast< ::CSCastleInfo*>(&::CSCastleInfo::default_instance());
}

CSBattleUserJoinRsp::CSBattleUserJoinRsp(const CSBattleUserJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  castleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserJoinRsp::~CSBattleUserJoinRsp() {
  SharedDtor();
}

void CSBattleUserJoinRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete castleinfo_;
  }
}

void CSBattleUserJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserJoinRsp_descriptor_;
}

const CSBattleUserJoinRsp& CSBattleUserJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleUserJoinRsp* CSBattleUserJoinRsp::default_instance_ = NULL;

CSBattleUserJoinRsp* CSBattleUserJoinRsp::New() const {
  return new CSBattleUserJoinRsp;
}

void CSBattleUserJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::BasicUserInfo::Clear();
    }
    if (has_castleinfo()) {
      if (castleinfo_ != NULL) castleinfo_->::CSCastleInfo::Clear();
    }
  }
  monsterinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BasicUserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterinfo;
        break;
      }
      
      // repeated .MonsterInfo monsterinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterinfo;
        if (input->ExpectTag(26)) goto parse_castleinfo;
        break;
      }
      
      // optional .CSCastleInfo castleinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castleinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_castleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BasicUserInfo userinfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }
  
  // repeated .MonsterInfo monsterinfo = 2;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterinfo(i), output);
  }
  
  // optional .CSCastleInfo castleinfo = 3;
  if (has_castleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->castleinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BasicUserInfo userinfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }
  
  // repeated .MonsterInfo monsterinfo = 2;
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterinfo(i), target);
  }
  
  // optional .CSCastleInfo castleinfo = 3;
  if (has_castleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->castleinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserJoinRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BasicUserInfo userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }
    
    // optional .CSCastleInfo castleinfo = 3;
    if (has_castleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->castleinfo());
    }
    
  }
  // repeated .MonsterInfo monsterinfo = 2;
  total_size += 1 * this->monsterinfo_size();
  for (int i = 0; i < this->monsterinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserJoinRsp::MergeFrom(const CSBattleUserJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfo_.MergeFrom(from.monsterinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::BasicUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_castleinfo()) {
      mutable_castleinfo()->::CSCastleInfo::MergeFrom(from.castleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserJoinRsp::CopyFrom(const CSBattleUserJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < monsterinfo_size(); i++) {
    if (!this->monsterinfo(i).IsInitialized()) return false;
  }
  if (has_castleinfo()) {
    if (!this->castleinfo().IsInitialized()) return false;
  }
  return true;
}

void CSBattleUserJoinRsp::Swap(CSBattleUserJoinRsp* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    monsterinfo_.Swap(&other->monsterinfo_);
    std::swap(castleinfo_, other->castleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserJoinRsp_descriptor_;
  metadata.reflection = CSBattleUserJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleUserLeaveRsp::kUseridFieldNumber;
const int CSBattleUserLeaveRsp::kRegTimeFieldNumber;
const int CSBattleUserLeaveRsp::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CSBattleUserLeaveRsp::CSBattleUserLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleUserLeaveRsp::InitAsDefaultInstance() {
}

CSBattleUserLeaveRsp::CSBattleUserLeaveRsp(const CSBattleUserLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleUserLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleUserLeaveRsp::~CSBattleUserLeaveRsp() {
  SharedDtor();
}

void CSBattleUserLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleUserLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleUserLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleUserLeaveRsp_descriptor_;
}

const CSBattleUserLeaveRsp& CSBattleUserLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleUserLeaveRsp* CSBattleUserLeaveRsp::default_instance_ = NULL;

CSBattleUserLeaveRsp* CSBattleUserLeaveRsp::New() const {
  return new CSBattleUserLeaveRsp;
}

void CSBattleUserLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleUserLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // optional uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // optional uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleUserLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleUserLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleUserLeaveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleUserLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleUserLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleUserLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleUserLeaveRsp::MergeFrom(const CSBattleUserLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleUserLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleUserLeaveRsp::CopyFrom(const CSBattleUserLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleUserLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSBattleUserLeaveRsp::Swap(CSBattleUserLeaveRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleUserLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleUserLeaveRsp_descriptor_;
  metadata.reflection = CSBattleUserLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleLoadCompleteReq::CSBattleLoadCompleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLoadCompleteReq::InitAsDefaultInstance() {
}

CSBattleLoadCompleteReq::CSBattleLoadCompleteReq(const CSBattleLoadCompleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLoadCompleteReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLoadCompleteReq::~CSBattleLoadCompleteReq() {
  SharedDtor();
}

void CSBattleLoadCompleteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLoadCompleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLoadCompleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLoadCompleteReq_descriptor_;
}

const CSBattleLoadCompleteReq& CSBattleLoadCompleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLoadCompleteReq* CSBattleLoadCompleteReq::default_instance_ = NULL;

CSBattleLoadCompleteReq* CSBattleLoadCompleteReq::New() const {
  return new CSBattleLoadCompleteReq;
}

void CSBattleLoadCompleteReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLoadCompleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleLoadCompleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLoadCompleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLoadCompleteReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLoadCompleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLoadCompleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLoadCompleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLoadCompleteReq::MergeFrom(const CSBattleLoadCompleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLoadCompleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLoadCompleteReq::CopyFrom(const CSBattleLoadCompleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLoadCompleteReq::IsInitialized() const {
  
  return true;
}

void CSBattleLoadCompleteReq::Swap(CSBattleLoadCompleteReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLoadCompleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLoadCompleteReq_descriptor_;
  metadata.reflection = CSBattleLoadCompleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleLoadCompleteRsp::kTimeoutFieldNumber;
#endif  // !_MSC_VER

CSBattleLoadCompleteRsp::CSBattleLoadCompleteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLoadCompleteRsp::InitAsDefaultInstance() {
}

CSBattleLoadCompleteRsp::CSBattleLoadCompleteRsp(const CSBattleLoadCompleteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLoadCompleteRsp::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLoadCompleteRsp::~CSBattleLoadCompleteRsp() {
  SharedDtor();
}

void CSBattleLoadCompleteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLoadCompleteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLoadCompleteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLoadCompleteRsp_descriptor_;
}

const CSBattleLoadCompleteRsp& CSBattleLoadCompleteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLoadCompleteRsp* CSBattleLoadCompleteRsp::default_instance_ = NULL;

CSBattleLoadCompleteRsp* CSBattleLoadCompleteRsp::New() const {
  return new CSBattleLoadCompleteRsp;
}

void CSBattleLoadCompleteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLoadCompleteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleLoadCompleteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLoadCompleteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLoadCompleteRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool timeout = 1;
    if (has_timeout()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLoadCompleteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLoadCompleteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLoadCompleteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLoadCompleteRsp::MergeFrom(const CSBattleLoadCompleteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLoadCompleteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLoadCompleteRsp::CopyFrom(const CSBattleLoadCompleteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLoadCompleteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSBattleLoadCompleteRsp::Swap(CSBattleLoadCompleteRsp* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLoadCompleteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLoadCompleteRsp_descriptor_;
  metadata.reflection = CSBattleLoadCompleteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleLeaveReq::CSBattleLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLeaveReq::InitAsDefaultInstance() {
}

CSBattleLeaveReq::CSBattleLeaveReq(const CSBattleLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLeaveReq::~CSBattleLeaveReq() {
  SharedDtor();
}

void CSBattleLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLeaveReq_descriptor_;
}

const CSBattleLeaveReq& CSBattleLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLeaveReq* CSBattleLeaveReq::default_instance_ = NULL;

CSBattleLeaveReq* CSBattleLeaveReq::New() const {
  return new CSBattleLeaveReq;
}

void CSBattleLeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLeaveReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLeaveReq::MergeFrom(const CSBattleLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLeaveReq::CopyFrom(const CSBattleLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLeaveReq::IsInitialized() const {
  
  return true;
}

void CSBattleLeaveReq::Swap(CSBattleLeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLeaveReq_descriptor_;
  metadata.reflection = CSBattleLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattleLeaveRsp::kInitiativeFieldNumber;
const int CSBattleLeaveRsp::kStarFieldNumber;
const int CSBattleLeaveRsp::kFinishTimeFieldNumber;
const int CSBattleLeaveRsp::kDeadMonNumFieldNumber;
const int CSBattleLeaveRsp::kRewardsFieldNumber;
#endif  // !_MSC_VER

CSBattleLeaveRsp::CSBattleLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleLeaveRsp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CSReward*>(&::CSReward::default_instance());
}

CSBattleLeaveRsp::CSBattleLeaveRsp(const CSBattleLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  initiative_ = false;
  star_ = 0u;
  finish_time_ = 0u;
  dead_mon_num_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleLeaveRsp::~CSBattleLeaveRsp() {
  SharedDtor();
}

void CSBattleLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void CSBattleLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleLeaveRsp_descriptor_;
}

const CSBattleLeaveRsp& CSBattleLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleLeaveRsp* CSBattleLeaveRsp::default_instance_ = NULL;

CSBattleLeaveRsp* CSBattleLeaveRsp::New() const {
  return new CSBattleLeaveRsp;
}

void CSBattleLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initiative_ = false;
    star_ = 0u;
    finish_time_ = 0u;
    dead_mon_num_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CSReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool initiative = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initiative_)));
          set_has_initiative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish_time;
        break;
      }
      
      // optional uint32 finish_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_mon_num;
        break;
      }
      
      // optional uint32 dead_mon_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_mon_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_mon_num_)));
          set_has_dead_mon_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }
      
      // optional .CSReward rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattleLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool initiative = 1;
  if (has_initiative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->initiative(), output);
  }
  
  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }
  
  // optional uint32 finish_time = 3;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finish_time(), output);
  }
  
  // optional uint32 dead_mon_num = 4;
  if (has_dead_mon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_mon_num(), output);
  }
  
  // optional .CSReward rewards = 5;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool initiative = 1;
  if (has_initiative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->initiative(), target);
  }
  
  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }
  
  // optional uint32 finish_time = 3;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finish_time(), target);
  }
  
  // optional uint32 dead_mon_num = 4;
  if (has_dead_mon_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_mon_num(), target);
  }
  
  // optional .CSReward rewards = 5;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleLeaveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool initiative = 1;
    if (has_initiative()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
    // optional uint32 finish_time = 3;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_time());
    }
    
    // optional uint32 dead_mon_num = 4;
    if (has_dead_mon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_mon_num());
    }
    
    // optional .CSReward rewards = 5;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleLeaveRsp::MergeFrom(const CSBattleLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initiative()) {
      set_initiative(from.initiative());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
    if (from.has_dead_mon_num()) {
      set_dead_mon_num(from.dead_mon_num());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CSReward::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleLeaveRsp::CopyFrom(const CSBattleLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void CSBattleLeaveRsp::Swap(CSBattleLeaveRsp* other) {
  if (other != this) {
    std::swap(initiative_, other->initiative_);
    std::swap(star_, other->star_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(dead_mon_num_, other->dead_mon_num_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleLeaveRsp_descriptor_;
  metadata.reflection = CSBattleLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattleTimeoutRsp::CSBattleTimeoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattleTimeoutRsp::InitAsDefaultInstance() {
}

CSBattleTimeoutRsp::CSBattleTimeoutRsp(const CSBattleTimeoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattleTimeoutRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattleTimeoutRsp::~CSBattleTimeoutRsp() {
  SharedDtor();
}

void CSBattleTimeoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattleTimeoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattleTimeoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattleTimeoutRsp_descriptor_;
}

const CSBattleTimeoutRsp& CSBattleTimeoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattleTimeoutRsp* CSBattleTimeoutRsp::default_instance_ = NULL;

CSBattleTimeoutRsp* CSBattleTimeoutRsp::New() const {
  return new CSBattleTimeoutRsp;
}

void CSBattleTimeoutRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattleTimeoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattleTimeoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattleTimeoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattleTimeoutRsp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattleTimeoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattleTimeoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattleTimeoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattleTimeoutRsp::MergeFrom(const CSBattleTimeoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattleTimeoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattleTimeoutRsp::CopyFrom(const CSBattleTimeoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattleTimeoutRsp::IsInitialized() const {
  
  return true;
}

void CSBattleTimeoutRsp::Swap(CSBattleTimeoutRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattleTimeoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattleTimeoutRsp_descriptor_;
  metadata.reflection = CSBattleTimeoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattlePlayerDelRsp::kUseridFieldNumber;
const int CSBattlePlayerDelRsp::kRegTimeFieldNumber;
const int CSBattlePlayerDelRsp::kChannelIdFieldNumber;
const int CSBattlePlayerDelRsp::kExchangeIdFieldNumber;
#endif  // !_MSC_VER

CSBattlePlayerDelRsp::CSBattlePlayerDelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerDelRsp::InitAsDefaultInstance() {
}

CSBattlePlayerDelRsp::CSBattlePlayerDelRsp(const CSBattlePlayerDelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerDelRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  exchange_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerDelRsp::~CSBattlePlayerDelRsp() {
  SharedDtor();
}

void CSBattlePlayerDelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerDelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerDelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerDelRsp_descriptor_;
}

const CSBattlePlayerDelRsp& CSBattlePlayerDelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattlePlayerDelRsp* CSBattlePlayerDelRsp::default_instance_ = NULL;

CSBattlePlayerDelRsp* CSBattlePlayerDelRsp::New() const {
  return new CSBattlePlayerDelRsp;
}

void CSBattlePlayerDelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    exchange_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerDelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchange_id;
        break;
      }
      
      // required uint32 exchange_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_id_)));
          set_has_exchange_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattlePlayerDelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 exchange_id = 4;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exchange_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerDelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 exchange_id = 4;
  if (has_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exchange_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerDelRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 exchange_id = 4;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerDelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerDelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerDelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerDelRsp::MergeFrom(const CSBattlePlayerDelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerDelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerDelRsp::CopyFrom(const CSBattlePlayerDelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerDelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSBattlePlayerDelRsp::Swap(CSBattlePlayerDelRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerDelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerDelRsp_descriptor_;
  metadata.reflection = CSBattlePlayerDelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBattlePlayerRevivalReq::CSBattlePlayerRevivalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerRevivalReq::InitAsDefaultInstance() {
}

CSBattlePlayerRevivalReq::CSBattlePlayerRevivalReq(const CSBattlePlayerRevivalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerRevivalReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerRevivalReq::~CSBattlePlayerRevivalReq() {
  SharedDtor();
}

void CSBattlePlayerRevivalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerRevivalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerRevivalReq_descriptor_;
}

const CSBattlePlayerRevivalReq& CSBattlePlayerRevivalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattlePlayerRevivalReq* CSBattlePlayerRevivalReq::default_instance_ = NULL;

CSBattlePlayerRevivalReq* CSBattlePlayerRevivalReq::New() const {
  return new CSBattlePlayerRevivalReq;
}

void CSBattlePlayerRevivalReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerRevivalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBattlePlayerRevivalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerRevivalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerRevivalReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerRevivalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerRevivalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerRevivalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerRevivalReq::MergeFrom(const CSBattlePlayerRevivalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerRevivalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerRevivalReq::CopyFrom(const CSBattlePlayerRevivalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerRevivalReq::IsInitialized() const {
  
  return true;
}

void CSBattlePlayerRevivalReq::Swap(CSBattlePlayerRevivalReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerRevivalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerRevivalReq_descriptor_;
  metadata.reflection = CSBattlePlayerRevivalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBattlePlayerRevivalRsp::kUseridFieldNumber;
const int CSBattlePlayerRevivalRsp::kRegTimeFieldNumber;
const int CSBattlePlayerRevivalRsp::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CSBattlePlayerRevivalRsp::CSBattlePlayerRevivalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBattlePlayerRevivalRsp::InitAsDefaultInstance() {
}

CSBattlePlayerRevivalRsp::CSBattlePlayerRevivalRsp(const CSBattlePlayerRevivalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBattlePlayerRevivalRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBattlePlayerRevivalRsp::~CSBattlePlayerRevivalRsp() {
  SharedDtor();
}

void CSBattlePlayerRevivalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBattlePlayerRevivalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBattlePlayerRevivalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBattlePlayerRevivalRsp_descriptor_;
}

const CSBattlePlayerRevivalRsp& CSBattlePlayerRevivalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBattlePlayerRevivalRsp* CSBattlePlayerRevivalRsp::default_instance_ = NULL;

CSBattlePlayerRevivalRsp* CSBattlePlayerRevivalRsp::New() const {
  return new CSBattlePlayerRevivalRsp;
}

void CSBattlePlayerRevivalRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBattlePlayerRevivalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBattlePlayerRevivalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBattlePlayerRevivalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBattlePlayerRevivalRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBattlePlayerRevivalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBattlePlayerRevivalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBattlePlayerRevivalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBattlePlayerRevivalRsp::MergeFrom(const CSBattlePlayerRevivalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBattlePlayerRevivalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBattlePlayerRevivalRsp::CopyFrom(const CSBattlePlayerRevivalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBattlePlayerRevivalRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSBattlePlayerRevivalRsp::Swap(CSBattlePlayerRevivalRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBattlePlayerRevivalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBattlePlayerRevivalRsp_descriptor_;
  metadata.reflection = CSBattlePlayerRevivalRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterMoveReq::kIdFieldNumber;
const int CSMonsterMoveReq::kDirectFieldNumber;
#endif  // !_MSC_VER

CSMonsterMoveReq::CSMonsterMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterMoveReq::InitAsDefaultInstance() {
}

CSMonsterMoveReq::CSMonsterMoveReq(const CSMonsterMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterMoveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direct_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterMoveReq::~CSMonsterMoveReq() {
  SharedDtor();
}

void CSMonsterMoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterMoveReq_descriptor_;
}

const CSMonsterMoveReq& CSMonsterMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterMoveReq* CSMonsterMoveReq::default_instance_ = NULL;

CSMonsterMoveReq* CSMonsterMoveReq::New() const {
  return new CSMonsterMoveReq;
}

void CSMonsterMoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    direct_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct;
        break;
      }
      
      // required uint32 direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direct(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direct(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterMoveReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterMoveReq::MergeFrom(const CSMonsterMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterMoveReq::CopyFrom(const CSMonsterMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterMoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSMonsterMoveReq::Swap(CSMonsterMoveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direct_, other->direct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterMoveReq_descriptor_;
  metadata.reflection = CSMonsterMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterMoveRsp::kIdFieldNumber;
const int CSMonsterMoveRsp::kDirectFieldNumber;
#endif  // !_MSC_VER

CSMonsterMoveRsp::CSMonsterMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterMoveRsp::InitAsDefaultInstance() {
}

CSMonsterMoveRsp::CSMonsterMoveRsp(const CSMonsterMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direct_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterMoveRsp::~CSMonsterMoveRsp() {
  SharedDtor();
}

void CSMonsterMoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterMoveRsp_descriptor_;
}

const CSMonsterMoveRsp& CSMonsterMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterMoveRsp* CSMonsterMoveRsp::default_instance_ = NULL;

CSMonsterMoveRsp* CSMonsterMoveRsp::New() const {
  return new CSMonsterMoveRsp;
}

void CSMonsterMoveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    direct_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct;
        break;
      }
      
      // required uint32 direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direct(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direct(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterMoveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterMoveRsp::MergeFrom(const CSMonsterMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterMoveRsp::CopyFrom(const CSMonsterMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterMoveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSMonsterMoveRsp::Swap(CSMonsterMoveRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direct_, other->direct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterMoveRsp_descriptor_;
  metadata.reflection = CSMonsterMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterCreateReq::kIdFieldNumber;
const int CSMonsterCreateReq::kPosFieldNumber;
#endif  // !_MSC_VER

CSMonsterCreateReq::CSMonsterCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterCreateReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterCreateReq::CSMonsterCreateReq(const CSMonsterCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterCreateReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterCreateReq::~CSMonsterCreateReq() {
  SharedDtor();
}

void CSMonsterCreateReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CSMonsterCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterCreateReq_descriptor_;
}

const CSMonsterCreateReq& CSMonsterCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterCreateReq* CSMonsterCreateReq::default_instance_ = NULL;

CSMonsterCreateReq* CSMonsterCreateReq::New() const {
  return new CSMonsterCreateReq;
}

void CSMonsterCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterCreateReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterCreateReq::MergeFrom(const CSMonsterCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterCreateReq::CopyFrom(const CSMonsterCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterCreateReq::Swap(CSMonsterCreateReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterCreateReq_descriptor_;
  metadata.reflection = CSMonsterCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterCreateRsp::kIdFieldNumber;
const int CSMonsterCreateRsp::kPosFieldNumber;
const int CSMonsterCreateRsp::kIdInMapFieldNumber;
const int CSMonsterCreateRsp::kSideFieldNumber;
#endif  // !_MSC_VER

CSMonsterCreateRsp::CSMonsterCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterCreateRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterCreateRsp::CSMonsterCreateRsp(const CSMonsterCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  id_in_map_ = 0u;
  side_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterCreateRsp::~CSMonsterCreateRsp() {
  SharedDtor();
}

void CSMonsterCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CSMonsterCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterCreateRsp_descriptor_;
}

const CSMonsterCreateRsp& CSMonsterCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterCreateRsp* CSMonsterCreateRsp::default_instance_ = NULL;

CSMonsterCreateRsp* CSMonsterCreateRsp::New() const {
  return new CSMonsterCreateRsp;
}

void CSMonsterCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    id_in_map_ = 0u;
    side_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_in_map;
        break;
      }
      
      // optional uint32 id_in_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_in_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_in_map_)));
          set_has_id_in_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side;
        break;
      }
      
      // optional bool side = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &side_)));
          set_has_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // optional uint32 id_in_map = 3;
  if (has_id_in_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id_in_map(), output);
  }
  
  // optional bool side = 4;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->side(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // optional uint32 id_in_map = 3;
  if (has_id_in_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id_in_map(), target);
  }
  
  // optional bool side = 4;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->side(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterCreateRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional uint32 id_in_map = 3;
    if (has_id_in_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id_in_map());
    }
    
    // optional bool side = 4;
    if (has_side()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterCreateRsp::MergeFrom(const CSMonsterCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_id_in_map()) {
      set_id_in_map(from.id_in_map());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterCreateRsp::CopyFrom(const CSMonsterCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterCreateRsp::Swap(CSMonsterCreateRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(id_in_map_, other->id_in_map_);
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterCreateRsp_descriptor_;
  metadata.reflection = CSMonsterCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackMonsterInfo::kIdFieldNumber;
const int AttackMonsterInfo::kPosFieldNumber;
const int AttackMonsterInfo::kBloodFieldNumber;
const int AttackMonsterInfo::kStatusFieldNumber;
const int AttackMonsterInfo::kHurtTypeFieldNumber;
#endif  // !_MSC_VER

AttackMonsterInfo::AttackMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackMonsterInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

AttackMonsterInfo::AttackMonsterInfo(const AttackMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  blood_ = 0u;
  status_ = 0u;
  hurt_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackMonsterInfo::~AttackMonsterInfo() {
  SharedDtor();
}

void AttackMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void AttackMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackMonsterInfo_descriptor_;
}

const AttackMonsterInfo& AttackMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

AttackMonsterInfo* AttackMonsterInfo::default_instance_ = NULL;

AttackMonsterInfo* AttackMonsterInfo::New() const {
  return new AttackMonsterInfo;
}

void AttackMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    blood_ = 0u;
    status_ = 0u;
    hurt_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // optional .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }
      
      // optional uint32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hurt_type;
        break;
      }
      
      // optional uint32 hurt_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // optional uint32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blood(), output);
  }
  
  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }
  
  // optional uint32 hurt_type = 5;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hurt_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // optional uint32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blood(), target);
  }
  
  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }
  
  // optional uint32 hurt_type = 5;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hurt_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackMonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional uint32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional uint32 hurt_type = 5;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackMonsterInfo::MergeFrom(const AttackMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackMonsterInfo::CopyFrom(const AttackMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void AttackMonsterInfo::Swap(AttackMonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(blood_, other->blood_);
    std::swap(status_, other->status_);
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackMonsterInfo_descriptor_;
  metadata.reflection = AttackMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitMonsterReq::kIdFieldNumber;
const int CSMonsterHitMonsterReq::kPosFieldNumber;
const int CSMonsterHitMonsterReq::kActionIdFieldNumber;
const int CSMonsterHitMonsterReq::kUsersFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitMonsterReq::CSMonsterHitMonsterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitMonsterReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterHitMonsterReq::CSMonsterHitMonsterReq(const CSMonsterHitMonsterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitMonsterReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitMonsterReq::~CSMonsterHitMonsterReq() {
  SharedDtor();
}

void CSMonsterHitMonsterReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CSMonsterHitMonsterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitMonsterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitMonsterReq_descriptor_;
}

const CSMonsterHitMonsterReq& CSMonsterHitMonsterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitMonsterReq* CSMonsterHitMonsterReq::default_instance_ = NULL;

CSMonsterHitMonsterReq* CSMonsterHitMonsterReq::New() const {
  return new CSMonsterHitMonsterReq;
}

void CSMonsterHitMonsterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitMonsterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // optional .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_id;
        break;
      }
      
      // optional uint32 action_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_users;
        break;
      }
      
      // repeated .AttackMonsterInfo users = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitMonsterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // optional uint32 action_id = 3;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action_id(), output);
  }
  
  // repeated .AttackMonsterInfo users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitMonsterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // optional uint32 action_id = 3;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action_id(), target);
  }
  
  // repeated .AttackMonsterInfo users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitMonsterReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional uint32 action_id = 3;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackMonsterInfo users = 4;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitMonsterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitMonsterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitMonsterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitMonsterReq::MergeFrom(const CSMonsterHitMonsterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitMonsterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitMonsterReq::CopyFrom(const CSMonsterHitMonsterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitMonsterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitMonsterReq::Swap(CSMonsterHitMonsterReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitMonsterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitMonsterReq_descriptor_;
  metadata.reflection = CSMonsterHitMonsterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitMonsterRsp::kIdFieldNumber;
const int CSMonsterHitMonsterRsp::kPosFieldNumber;
const int CSMonsterHitMonsterRsp::kActionIdFieldNumber;
const int CSMonsterHitMonsterRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitMonsterRsp::CSMonsterHitMonsterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitMonsterRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterHitMonsterRsp::CSMonsterHitMonsterRsp(const CSMonsterHitMonsterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitMonsterRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitMonsterRsp::~CSMonsterHitMonsterRsp() {
  SharedDtor();
}

void CSMonsterHitMonsterRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CSMonsterHitMonsterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitMonsterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitMonsterRsp_descriptor_;
}

const CSMonsterHitMonsterRsp& CSMonsterHitMonsterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitMonsterRsp* CSMonsterHitMonsterRsp::default_instance_ = NULL;

CSMonsterHitMonsterRsp* CSMonsterHitMonsterRsp::New() const {
  return new CSMonsterHitMonsterRsp;
}

void CSMonsterHitMonsterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitMonsterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // optional .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_id;
        break;
      }
      
      // optional uint32 action_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_users;
        break;
      }
      
      // repeated .AttackMonsterInfo users = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitMonsterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // optional uint32 action_id = 3;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action_id(), output);
  }
  
  // repeated .AttackMonsterInfo users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitMonsterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // optional uint32 action_id = 3;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action_id(), target);
  }
  
  // repeated .AttackMonsterInfo users = 4;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitMonsterRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional uint32 action_id = 3;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackMonsterInfo users = 4;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitMonsterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitMonsterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitMonsterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitMonsterRsp::MergeFrom(const CSMonsterHitMonsterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitMonsterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitMonsterRsp::CopyFrom(const CSMonsterHitMonsterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitMonsterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitMonsterRsp::Swap(CSMonsterHitMonsterRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitMonsterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitMonsterRsp_descriptor_;
  metadata.reflection = CSMonsterHitMonsterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSMonsterHPReq::kIdFieldNumber;
const int CSSMonsterHPReq::kBloodFieldNumber;
#endif  // !_MSC_VER

CSSMonsterHPReq::CSSMonsterHPReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSMonsterHPReq::InitAsDefaultInstance() {
}

CSSMonsterHPReq::CSSMonsterHPReq(const CSSMonsterHPReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSMonsterHPReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  blood_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSMonsterHPReq::~CSSMonsterHPReq() {
  SharedDtor();
}

void CSSMonsterHPReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSMonsterHPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSMonsterHPReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSMonsterHPReq_descriptor_;
}

const CSSMonsterHPReq& CSSMonsterHPReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSSMonsterHPReq* CSSMonsterHPReq::default_instance_ = NULL;

CSSMonsterHPReq* CSSMonsterHPReq::New() const {
  return new CSSMonsterHPReq;
}

void CSSMonsterHPReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    blood_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSMonsterHPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSMonsterHPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional int32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSMonsterHPReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSMonsterHPReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional int32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSMonsterHPReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSMonsterHPReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSMonsterHPReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSMonsterHPReq::MergeFrom(const CSSMonsterHPReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSMonsterHPReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSMonsterHPReq::CopyFrom(const CSSMonsterHPReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSMonsterHPReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSSMonsterHPReq::Swap(CSSMonsterHPReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSMonsterHPReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSMonsterHPReq_descriptor_;
  metadata.reflection = CSSMonsterHPReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSMonsterHPRsp::kIdFieldNumber;
const int CSSMonsterHPRsp::kBloodFieldNumber;
#endif  // !_MSC_VER

CSSMonsterHPRsp::CSSMonsterHPRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSMonsterHPRsp::InitAsDefaultInstance() {
}

CSSMonsterHPRsp::CSSMonsterHPRsp(const CSSMonsterHPRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSMonsterHPRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  blood_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSMonsterHPRsp::~CSSMonsterHPRsp() {
  SharedDtor();
}

void CSSMonsterHPRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSMonsterHPRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSMonsterHPRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSMonsterHPRsp_descriptor_;
}

const CSSMonsterHPRsp& CSSMonsterHPRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSSMonsterHPRsp* CSSMonsterHPRsp::default_instance_ = NULL;

CSSMonsterHPRsp* CSSMonsterHPRsp::New() const {
  return new CSSMonsterHPRsp;
}

void CSSMonsterHPRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    blood_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSMonsterHPRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSMonsterHPRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional int32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSMonsterHPRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSMonsterHPRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional int32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSMonsterHPRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSMonsterHPRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSMonsterHPRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSMonsterHPRsp::MergeFrom(const CSSMonsterHPRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSMonsterHPRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSMonsterHPRsp::CopyFrom(const CSSMonsterHPRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSMonsterHPRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSSMonsterHPRsp::Swap(CSSMonsterHPRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSMonsterHPRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSMonsterHPRsp_descriptor_;
  metadata.reflection = CSSMonsterHPRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterDieReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterDieReq::CSMonsterDieReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterDieReq::InitAsDefaultInstance() {
}

CSMonsterDieReq::CSMonsterDieReq(const CSMonsterDieReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterDieReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterDieReq::~CSMonsterDieReq() {
  SharedDtor();
}

void CSMonsterDieReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterDieReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterDieReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterDieReq_descriptor_;
}

const CSMonsterDieReq& CSMonsterDieReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterDieReq* CSMonsterDieReq::default_instance_ = NULL;

CSMonsterDieReq* CSMonsterDieReq::New() const {
  return new CSMonsterDieReq;
}

void CSMonsterDieReq::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterDieReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterDieReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterDieReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterDieReq::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterDieReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterDieReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterDieReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterDieReq::MergeFrom(const CSMonsterDieReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterDieReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterDieReq::CopyFrom(const CSMonsterDieReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterDieReq::IsInitialized() const {
  
  return true;
}

void CSMonsterDieReq::Swap(CSMonsterDieReq* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterDieReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterDieReq_descriptor_;
  metadata.reflection = CSMonsterDieReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterDieRsp::kIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterDieRsp::CSMonsterDieRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterDieRsp::InitAsDefaultInstance() {
}

CSMonsterDieRsp::CSMonsterDieRsp(const CSMonsterDieRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterDieRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterDieRsp::~CSMonsterDieRsp() {
  SharedDtor();
}

void CSMonsterDieRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterDieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterDieRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterDieRsp_descriptor_;
}

const CSMonsterDieRsp& CSMonsterDieRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterDieRsp* CSMonsterDieRsp::default_instance_ = NULL;

CSMonsterDieRsp* CSMonsterDieRsp::New() const {
  return new CSMonsterDieRsp;
}

void CSMonsterDieRsp::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterDieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterDieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterDieRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterDieRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterDieRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterDieRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterDieRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterDieRsp::MergeFrom(const CSMonsterDieRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterDieRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterDieRsp::CopyFrom(const CSMonsterDieRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterDieRsp::IsInitialized() const {
  
  return true;
}

void CSMonsterDieRsp::Swap(CSMonsterDieRsp* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterDieRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterDieRsp_descriptor_;
  metadata.reflection = CSMonsterDieRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitCastleReq::kCastleinfoFieldNumber;
const int CSMonsterHitCastleReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitCastleReq::CSMonsterHitCastleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitCastleReq::InitAsDefaultInstance() {
  castleinfo_ = const_cast< ::CSCastleInfo*>(&::CSCastleInfo::default_instance());
}

CSMonsterHitCastleReq::CSMonsterHitCastleReq(const CSMonsterHitCastleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitCastleReq::SharedCtor() {
  _cached_size_ = 0;
  castleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitCastleReq::~CSMonsterHitCastleReq() {
  SharedDtor();
}

void CSMonsterHitCastleReq::SharedDtor() {
  if (this != default_instance_) {
    delete castleinfo_;
  }
}

void CSMonsterHitCastleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitCastleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitCastleReq_descriptor_;
}

const CSMonsterHitCastleReq& CSMonsterHitCastleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitCastleReq* CSMonsterHitCastleReq::default_instance_ = NULL;

CSMonsterHitCastleReq* CSMonsterHitCastleReq::New() const {
  return new CSMonsterHitCastleReq;
}

void CSMonsterHitCastleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_castleinfo()) {
      if (castleinfo_ != NULL) castleinfo_->::CSCastleInfo::Clear();
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitCastleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSCastleInfo castleinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_castleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // repeated uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitCastleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSCastleInfo castleinfo = 1;
  if (has_castleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->castleinfo(), output);
  }
  
  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitCastleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSCastleInfo castleinfo = 1;
  if (has_castleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->castleinfo(), target);
  }
  
  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitCastleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSCastleInfo castleinfo = 1;
    if (has_castleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->castleinfo());
    }
    
  }
  // repeated uint32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitCastleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitCastleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitCastleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitCastleReq::MergeFrom(const CSMonsterHitCastleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_castleinfo()) {
      mutable_castleinfo()->::CSCastleInfo::MergeFrom(from.castleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitCastleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitCastleReq::CopyFrom(const CSMonsterHitCastleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitCastleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_castleinfo()) {
    if (!this->castleinfo().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitCastleReq::Swap(CSMonsterHitCastleReq* other) {
  if (other != this) {
    std::swap(castleinfo_, other->castleinfo_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitCastleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitCastleReq_descriptor_;
  metadata.reflection = CSMonsterHitCastleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitCastleRsp::kCastleinfoFieldNumber;
const int CSMonsterHitCastleRsp::kIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitCastleRsp::CSMonsterHitCastleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitCastleRsp::InitAsDefaultInstance() {
  castleinfo_ = const_cast< ::CSCastleInfo*>(&::CSCastleInfo::default_instance());
}

CSMonsterHitCastleRsp::CSMonsterHitCastleRsp(const CSMonsterHitCastleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitCastleRsp::SharedCtor() {
  _cached_size_ = 0;
  castleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitCastleRsp::~CSMonsterHitCastleRsp() {
  SharedDtor();
}

void CSMonsterHitCastleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete castleinfo_;
  }
}

void CSMonsterHitCastleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitCastleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitCastleRsp_descriptor_;
}

const CSMonsterHitCastleRsp& CSMonsterHitCastleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitCastleRsp* CSMonsterHitCastleRsp::default_instance_ = NULL;

CSMonsterHitCastleRsp* CSMonsterHitCastleRsp::New() const {
  return new CSMonsterHitCastleRsp;
}

void CSMonsterHitCastleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_castleinfo()) {
      if (castleinfo_ != NULL) castleinfo_->::CSCastleInfo::Clear();
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitCastleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CSCastleInfo castleinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_castleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // repeated uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitCastleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CSCastleInfo castleinfo = 1;
  if (has_castleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->castleinfo(), output);
  }
  
  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitCastleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CSCastleInfo castleinfo = 1;
  if (has_castleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->castleinfo(), target);
  }
  
  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitCastleRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CSCastleInfo castleinfo = 1;
    if (has_castleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->castleinfo());
    }
    
  }
  // repeated uint32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitCastleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitCastleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitCastleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitCastleRsp::MergeFrom(const CSMonsterHitCastleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_castleinfo()) {
      mutable_castleinfo()->::CSCastleInfo::MergeFrom(from.castleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitCastleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitCastleRsp::CopyFrom(const CSMonsterHitCastleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitCastleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_castleinfo()) {
    if (!this->castleinfo().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitCastleRsp::Swap(CSMonsterHitCastleRsp* other) {
  if (other != this) {
    std::swap(castleinfo_, other->castleinfo_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitCastleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitCastleRsp_descriptor_;
  metadata.reflection = CSMonsterHitCastleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCastleDieReq::kIdFieldNumber;
#endif  // !_MSC_VER

CSCastleDieReq::CSCastleDieReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCastleDieReq::InitAsDefaultInstance() {
}

CSCastleDieReq::CSCastleDieReq(const CSCastleDieReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCastleDieReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCastleDieReq::~CSCastleDieReq() {
  SharedDtor();
}

void CSCastleDieReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCastleDieReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCastleDieReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCastleDieReq_descriptor_;
}

const CSCastleDieReq& CSCastleDieReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCastleDieReq* CSCastleDieReq::default_instance_ = NULL;

CSCastleDieReq* CSCastleDieReq::New() const {
  return new CSCastleDieReq;
}

void CSCastleDieReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCastleDieReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCastleDieReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCastleDieReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCastleDieReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCastleDieReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCastleDieReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCastleDieReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCastleDieReq::MergeFrom(const CSCastleDieReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCastleDieReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCastleDieReq::CopyFrom(const CSCastleDieReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCastleDieReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSCastleDieReq::Swap(CSCastleDieReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCastleDieReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCastleDieReq_descriptor_;
  metadata.reflection = CSCastleDieReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCastleDieRsp::kIdFieldNumber;
#endif  // !_MSC_VER

CSCastleDieRsp::CSCastleDieRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCastleDieRsp::InitAsDefaultInstance() {
}

CSCastleDieRsp::CSCastleDieRsp(const CSCastleDieRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCastleDieRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCastleDieRsp::~CSCastleDieRsp() {
  SharedDtor();
}

void CSCastleDieRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCastleDieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCastleDieRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCastleDieRsp_descriptor_;
}

const CSCastleDieRsp& CSCastleDieRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSCastleDieRsp* CSCastleDieRsp::default_instance_ = NULL;

CSCastleDieRsp* CSCastleDieRsp::New() const {
  return new CSCastleDieRsp;
}

void CSCastleDieRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCastleDieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCastleDieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCastleDieRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCastleDieRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCastleDieRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCastleDieRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCastleDieRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCastleDieRsp::MergeFrom(const CSCastleDieRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCastleDieRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCastleDieRsp::CopyFrom(const CSCastleDieRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCastleDieRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSCastleDieRsp::Swap(CSCastleDieRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCastleDieRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCastleDieRsp_descriptor_;
  metadata.reflection = CSCastleDieRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterAttackInfo::kIdFieldNumber;
const int CSMonsterAttackInfo::kPosFieldNumber;
const int CSMonsterAttackInfo::kDirectFieldNumber;
const int CSMonsterAttackInfo::kActionIdFieldNumber;
const int CSMonsterAttackInfo::kTypeFieldNumber;
const int CSMonsterAttackInfo::kUseridFieldNumber;
const int CSMonsterAttackInfo::kRegTimeFieldNumber;
const int CSMonsterAttackInfo::kChannelIdFieldNumber;
const int CSMonsterAttackInfo::kSkillIdFieldNumber;
const int CSMonsterAttackInfo::kEffectIdFieldNumber;
const int CSMonsterAttackInfo::kStartPosFieldNumber;
const int CSMonsterAttackInfo::kEndPosFieldNumber;
const int CSMonsterAttackInfo::kSkillSpeedFieldNumber;
const int CSMonsterAttackInfo::kDelayTimeFieldNumber;
const int CSMonsterAttackInfo::kDeadTimeFieldNumber;
const int CSMonsterAttackInfo::kShakeTimeFieldNumber;
#endif  // !_MSC_VER

CSMonsterAttackInfo::CSMonsterAttackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterAttackInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterAttackInfo::CSMonsterAttackInfo(const CSMonsterAttackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterAttackInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = NULL;
  direct_ = NULL;
  action_id_ = 0u;
  type_ = 0u;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  skill_id_ = 0u;
  effect_id_ = 0u;
  start_pos_ = NULL;
  end_pos_ = NULL;
  skill_speed_ = 0u;
  delay_time_ = 0u;
  dead_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterAttackInfo::~CSMonsterAttackInfo() {
  SharedDtor();
}

void CSMonsterAttackInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direct_;
    delete start_pos_;
    delete end_pos_;
  }
}

void CSMonsterAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterAttackInfo_descriptor_;
}

const CSMonsterAttackInfo& CSMonsterAttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterAttackInfo* CSMonsterAttackInfo::default_instance_ = NULL;

CSMonsterAttackInfo* CSMonsterAttackInfo::New() const {
  return new CSMonsterAttackInfo;
}

void CSMonsterAttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
    type_ = 0u;
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_id_ = 0u;
    effect_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    skill_speed_ = 0u;
    delay_time_ = 0u;
    dead_time_ = 0u;
  }
  shake_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direct;
        break;
      }
      
      // required .CSPoint direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_effect_id;
        break;
      }
      
      // optional uint32 effect_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_start_pos;
        break;
      }
      
      // optional .CSPoint start_pos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_end_pos;
        break;
      }
      
      // optional .CSPoint end_pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skill_speed;
        break;
      }
      
      // optional uint32 skill_speed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_speed_)));
          set_has_skill_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_delay_time;
        break;
      }
      
      // optional uint32 delay_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dead_time;
        break;
      }
      
      // optional uint32 dead_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_shake_time;
        break;
      }
      
      // repeated uint32 shake_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shake_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_shake_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shake_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_shake_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  // required .CSPoint direct = 3;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direct(), output);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // required uint32 userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->userid(), output);
  }
  
  // required uint32 reg_time = 7;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 8;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->channel_id(), output);
  }
  
  // required uint32 skill_id = 9;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skill_id(), output);
  }
  
  // optional uint32 effect_id = 10;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->effect_id(), output);
  }
  
  // optional .CSPoint start_pos = 11;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->start_pos(), output);
  }
  
  // optional .CSPoint end_pos = 12;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->end_pos(), output);
  }
  
  // optional uint32 skill_speed = 13;
  if (has_skill_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->skill_speed(), output);
  }
  
  // optional uint32 delay_time = 14;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->delay_time(), output);
  }
  
  // optional uint32 dead_time = 15;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dead_time(), output);
  }
  
  // repeated uint32 shake_time = 16;
  for (int i = 0; i < this->shake_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->shake_time(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterAttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CSPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  // required .CSPoint direct = 3;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direct(), target);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // required uint32 userid = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->userid(), target);
  }
  
  // required uint32 reg_time = 7;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 8;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->channel_id(), target);
  }
  
  // required uint32 skill_id = 9;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skill_id(), target);
  }
  
  // optional uint32 effect_id = 10;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->effect_id(), target);
  }
  
  // optional .CSPoint start_pos = 11;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->start_pos(), target);
  }
  
  // optional .CSPoint end_pos = 12;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->end_pos(), target);
  }
  
  // optional uint32 skill_speed = 13;
  if (has_skill_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->skill_speed(), target);
  }
  
  // optional uint32 delay_time = 14;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->delay_time(), target);
  }
  
  // optional uint32 dead_time = 15;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dead_time(), target);
  }
  
  // repeated uint32 shake_time = 16;
  for (int i = 0; i < this->shake_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->shake_time(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterAttackInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CSPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required .CSPoint direct = 3;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }
    
    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 7;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 8;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 skill_id = 9;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // optional uint32 effect_id = 10;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }
    
    // optional .CSPoint start_pos = 11;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // optional .CSPoint end_pos = 12;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // optional uint32 skill_speed = 13;
    if (has_skill_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_speed());
    }
    
    // optional uint32 delay_time = 14;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }
    
    // optional uint32 dead_time = 15;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }
    
  }
  // repeated uint32 shake_time = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->shake_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shake_time(i));
    }
    total_size += 2 * this->shake_time_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterAttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterAttackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterAttackInfo::MergeFrom(const CSMonsterAttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shake_time_.MergeFrom(from.shake_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_direct()) {
      mutable_direct()->::CSPoint::MergeFrom(from.direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_skill_speed()) {
      set_skill_speed(from.skill_speed());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterAttackInfo::CopyFrom(const CSMonsterAttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterAttackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterAttackInfo::Swap(CSMonsterAttackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(direct_, other->direct_);
    std::swap(action_id_, other->action_id_);
    std::swap(type_, other->type_);
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(skill_speed_, other->skill_speed_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(dead_time_, other->dead_time_);
    shake_time_.Swap(&other->shake_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterAttackInfo_descriptor_;
  metadata.reflection = CSMonsterAttackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterEffectInfo::kTypeFieldNumber;
const int CSMonsterEffectInfo::kEffectIdFieldNumber;
const int CSMonsterEffectInfo::kStartPosFieldNumber;
const int CSMonsterEffectInfo::kEndPosFieldNumber;
const int CSMonsterEffectInfo::kSkillSpeedFieldNumber;
const int CSMonsterEffectInfo::kDelayTimeFieldNumber;
const int CSMonsterEffectInfo::kIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterEffectInfo::CSMonsterEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterEffectInfo::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSMonsterEffectInfo::CSMonsterEffectInfo(const CSMonsterEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  effect_id_ = 0u;
  start_pos_ = NULL;
  end_pos_ = NULL;
  skill_speed_ = 0u;
  delay_time_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterEffectInfo::~CSMonsterEffectInfo() {
  SharedDtor();
}

void CSMonsterEffectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete end_pos_;
  }
}

void CSMonsterEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterEffectInfo_descriptor_;
}

const CSMonsterEffectInfo& CSMonsterEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterEffectInfo* CSMonsterEffectInfo::default_instance_ = NULL;

CSMonsterEffectInfo* CSMonsterEffectInfo::New() const {
  return new CSMonsterEffectInfo;
}

void CSMonsterEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    effect_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    skill_speed_ = 0u;
    delay_time_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_id;
        break;
      }
      
      // optional uint32 effect_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_pos;
        break;
      }
      
      // optional .CSPoint start_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_pos;
        break;
      }
      
      // optional .CSPoint end_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_speed;
        break;
      }
      
      // optional uint32 skill_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_speed_)));
          set_has_skill_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delay_time;
        break;
      }
      
      // optional uint32 delay_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 effect_id = 2;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect_id(), output);
  }
  
  // optional .CSPoint start_pos = 3;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_pos(), output);
  }
  
  // optional .CSPoint end_pos = 4;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end_pos(), output);
  }
  
  // optional uint32 skill_speed = 5;
  if (has_skill_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_speed(), output);
  }
  
  // optional uint32 delay_time = 6;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay_time(), output);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 effect_id = 2;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect_id(), target);
  }
  
  // optional .CSPoint start_pos = 3;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_pos(), target);
  }
  
  // optional .CSPoint end_pos = 4;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end_pos(), target);
  }
  
  // optional uint32 skill_speed = 5;
  if (has_skill_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill_speed(), target);
  }
  
  // optional uint32 delay_time = 6;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay_time(), target);
  }
  
  // optional uint32 id = 7;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterEffectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 effect_id = 2;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }
    
    // optional .CSPoint start_pos = 3;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // optional .CSPoint end_pos = 4;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // optional uint32 skill_speed = 5;
    if (has_skill_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_speed());
    }
    
    // optional uint32 delay_time = 6;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }
    
    // optional uint32 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterEffectInfo::MergeFrom(const CSMonsterEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_skill_speed()) {
      set_skill_speed(from.skill_speed());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterEffectInfo::CopyFrom(const CSMonsterEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  return true;
}

void CSMonsterEffectInfo::Swap(CSMonsterEffectInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(skill_speed_, other->skill_speed_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterEffectInfo_descriptor_;
  metadata.reflection = CSMonsterEffectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterAttackRsp::kAttacksFieldNumber;
#endif  // !_MSC_VER

CSMonsterAttackRsp::CSMonsterAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterAttackRsp::InitAsDefaultInstance() {
}

CSMonsterAttackRsp::CSMonsterAttackRsp(const CSMonsterAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterAttackRsp::~CSMonsterAttackRsp() {
  SharedDtor();
}

void CSMonsterAttackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterAttackRsp_descriptor_;
}

const CSMonsterAttackRsp& CSMonsterAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterAttackRsp* CSMonsterAttackRsp::default_instance_ = NULL;

CSMonsterAttackRsp* CSMonsterAttackRsp::New() const {
  return new CSMonsterAttackRsp;
}

void CSMonsterAttackRsp::Clear() {
  attacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterAttackInfo attacks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attacks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterAttackInfo attacks = 1;
  for (int i = 0; i < this->attacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterAttackInfo attacks = 1;
  for (int i = 0; i < this->attacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterAttackRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterAttackInfo attacks = 1;
  total_size += 1 * this->attacks_size();
  for (int i = 0; i < this->attacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterAttackRsp::MergeFrom(const CSMonsterAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacks_.MergeFrom(from.attacks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterAttackRsp::CopyFrom(const CSMonsterAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterAttackRsp::IsInitialized() const {
  
  for (int i = 0; i < attacks_size(); i++) {
    if (!this->attacks(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterAttackRsp::Swap(CSMonsterAttackRsp* other) {
  if (other != this) {
    attacks_.Swap(&other->attacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterAttackRsp_descriptor_;
  metadata.reflection = CSMonsterAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterEffectRsp::kEffectsFieldNumber;
#endif  // !_MSC_VER

CSMonsterEffectRsp::CSMonsterEffectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterEffectRsp::InitAsDefaultInstance() {
}

CSMonsterEffectRsp::CSMonsterEffectRsp(const CSMonsterEffectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterEffectRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterEffectRsp::~CSMonsterEffectRsp() {
  SharedDtor();
}

void CSMonsterEffectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterEffectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterEffectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterEffectRsp_descriptor_;
}

const CSMonsterEffectRsp& CSMonsterEffectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterEffectRsp* CSMonsterEffectRsp::default_instance_ = NULL;

CSMonsterEffectRsp* CSMonsterEffectRsp::New() const {
  return new CSMonsterEffectRsp;
}

void CSMonsterEffectRsp::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterEffectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterEffectInfo effects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterEffectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterEffectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterEffectRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterEffectInfo effects = 1;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterEffectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterEffectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterEffectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterEffectRsp::MergeFrom(const CSMonsterEffectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterEffectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterEffectRsp::CopyFrom(const CSMonsterEffectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterEffectRsp::IsInitialized() const {
  
  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterEffectRsp::Swap(CSMonsterEffectRsp* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterEffectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterEffectRsp_descriptor_;
  metadata.reflection = CSMonsterEffectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterBuffEffectInfo_BuffEffectInfo::kIdFieldNumber;
const int CSMonsterBuffEffectInfo_BuffEffectInfo::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

CSMonsterBuffEffectInfo_BuffEffectInfo::CSMonsterBuffEffectInfo_BuffEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::MonsterBattleInfo*>(&::MonsterBattleInfo::default_instance());
}

CSMonsterBuffEffectInfo_BuffEffectInfo::CSMonsterBuffEffectInfo_BuffEffectInfo(const CSMonsterBuffEffectInfo_BuffEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battle_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBuffEffectInfo_BuffEffectInfo::~CSMonsterBuffEffectInfo_BuffEffectInfo() {
  SharedDtor();
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo_BuffEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_;
}

const CSMonsterBuffEffectInfo_BuffEffectInfo& CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterBuffEffectInfo_BuffEffectInfo* CSMonsterBuffEffectInfo_BuffEffectInfo::default_instance_ = NULL;

CSMonsterBuffEffectInfo_BuffEffectInfo* CSMonsterBuffEffectInfo_BuffEffectInfo::New() const {
  return new CSMonsterBuffEffectInfo_BuffEffectInfo;
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::MonsterBattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBuffEffectInfo_BuffEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_info;
        break;
      }
      
      // required .MonsterBattleInfo battle_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .MonsterBattleInfo battle_info = 2;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBuffEffectInfo_BuffEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .MonsterBattleInfo battle_info = 2;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBuffEffectInfo_BuffEffectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .MonsterBattleInfo battle_info = 2;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBuffEffectInfo_BuffEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBuffEffectInfo_BuffEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::MergeFrom(const CSMonsterBuffEffectInfo_BuffEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::MonsterBattleInfo::MergeFrom(from.battle_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::CopyFrom(const CSMonsterBuffEffectInfo_BuffEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBuffEffectInfo_BuffEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSMonsterBuffEffectInfo_BuffEffectInfo::Swap(CSMonsterBuffEffectInfo_BuffEffectInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBuffEffectInfo_BuffEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBuffEffectInfo_BuffEffectInfo_descriptor_;
  metadata.reflection = CSMonsterBuffEffectInfo_BuffEffectInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSMonsterBuffEffectInfo::kActionIdFieldNumber;
const int CSMonsterBuffEffectInfo::kEffectIdFieldNumber;
const int CSMonsterBuffEffectInfo::kDelayTimeFieldNumber;
const int CSMonsterBuffEffectInfo::kDeadTimeFieldNumber;
const int CSMonsterBuffEffectInfo::kBuffInfoFieldNumber;
const int CSMonsterBuffEffectInfo::kSkillIdFieldNumber;
#endif  // !_MSC_VER

CSMonsterBuffEffectInfo::CSMonsterBuffEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBuffEffectInfo::InitAsDefaultInstance() {
}

CSMonsterBuffEffectInfo::CSMonsterBuffEffectInfo(const CSMonsterBuffEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = 0u;
  effect_id_ = 0u;
  delay_time_ = 0u;
  dead_time_ = 0u;
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBuffEffectInfo::~CSMonsterBuffEffectInfo() {
  SharedDtor();
}

void CSMonsterBuffEffectInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterBuffEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBuffEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBuffEffectInfo_descriptor_;
}

const CSMonsterBuffEffectInfo& CSMonsterBuffEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterBuffEffectInfo* CSMonsterBuffEffectInfo::default_instance_ = NULL;

CSMonsterBuffEffectInfo* CSMonsterBuffEffectInfo::New() const {
  return new CSMonsterBuffEffectInfo;
}

void CSMonsterBuffEffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_id_ = 0u;
    effect_id_ = 0u;
    delay_time_ = 0u;
    dead_time_ = 0u;
    skill_id_ = 0u;
  }
  buff_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBuffEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_id;
        break;
      }
      
      // required uint32 effect_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delay_time;
        break;
      }
      
      // required uint32 delay_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_)));
          set_has_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_time;
        break;
      }
      
      // required uint32 dead_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buff_info;
        break;
      }
      
      // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buff_info;
        if (input->ExpectTag(48)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBuffEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 action_id = 1;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_id(), output);
  }
  
  // required uint32 effect_id = 2;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effect_id(), output);
  }
  
  // required uint32 delay_time = 3;
  if (has_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->delay_time(), output);
  }
  
  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_time(), output);
  }
  
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  for (int i = 0; i < this->buff_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buff_info(i), output);
  }
  
  // required uint32 skill_id = 6;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBuffEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 action_id = 1;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_id(), target);
  }
  
  // required uint32 effect_id = 2;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effect_id(), target);
  }
  
  // required uint32 delay_time = 3;
  if (has_delay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->delay_time(), target);
  }
  
  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_time(), target);
  }
  
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  for (int i = 0; i < this->buff_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buff_info(i), target);
  }
  
  // required uint32 skill_id = 6;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBuffEffectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required uint32 effect_id = 2;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }
    
    // required uint32 delay_time = 3;
    if (has_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time());
    }
    
    // required uint32 dead_time = 4;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }
    
    // required uint32 skill_id = 6;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
  }
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  total_size += 1 * this->buff_info_size();
  for (int i = 0; i < this->buff_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBuffEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBuffEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBuffEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBuffEffectInfo::MergeFrom(const CSMonsterBuffEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_info_.MergeFrom(from.buff_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_delay_time()) {
      set_delay_time(from.delay_time());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBuffEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBuffEffectInfo::CopyFrom(const CSMonsterBuffEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBuffEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  for (int i = 0; i < buff_info_size(); i++) {
    if (!this->buff_info(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterBuffEffectInfo::Swap(CSMonsterBuffEffectInfo* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(delay_time_, other->delay_time_);
    std::swap(dead_time_, other->dead_time_);
    buff_info_.Swap(&other->buff_info_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBuffEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBuffEffectInfo_descriptor_;
  metadata.reflection = CSMonsterBuffEffectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuffEffectRsp::kEffectsFieldNumber;
#endif  // !_MSC_VER

CSBuffEffectRsp::CSBuffEffectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBuffEffectRsp::InitAsDefaultInstance() {
}

CSBuffEffectRsp::CSBuffEffectRsp(const CSBuffEffectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuffEffectRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuffEffectRsp::~CSBuffEffectRsp() {
  SharedDtor();
}

void CSBuffEffectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBuffEffectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBuffEffectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBuffEffectRsp_descriptor_;
}

const CSBuffEffectRsp& CSBuffEffectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSBuffEffectRsp* CSBuffEffectRsp::default_instance_ = NULL;

CSBuffEffectRsp* CSBuffEffectRsp::New() const {
  return new CSBuffEffectRsp;
}

void CSBuffEffectRsp::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBuffEffectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterBuffEffectInfo effects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuffEffectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBuffEffectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBuffEffectRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuffEffectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBuffEffectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBuffEffectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBuffEffectRsp::MergeFrom(const CSBuffEffectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBuffEffectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuffEffectRsp::CopyFrom(const CSBuffEffectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuffEffectRsp::IsInitialized() const {
  
  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void CSBuffEffectRsp::Swap(CSBuffEffectRsp* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBuffEffectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBuffEffectRsp_descriptor_;
  metadata.reflection = CSBuffEffectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterHitRsp_UserInfo::kHurtTypeFieldNumber;
const int CSMonsterHitRsp_UserInfo::kUseridFieldNumber;
const int CSMonsterHitRsp_UserInfo::kRegTimeFieldNumber;
const int CSMonsterHitRsp_UserInfo::kChannelIdFieldNumber;
const int CSMonsterHitRsp_UserInfo::kBloodFieldNumber;
const int CSMonsterHitRsp_UserInfo::kRagePointFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitRsp_UserInfo::CSMonsterHitRsp_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitRsp_UserInfo::InitAsDefaultInstance() {
}

CSMonsterHitRsp_UserInfo::CSMonsterHitRsp_UserInfo(const CSMonsterHitRsp_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitRsp_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  hurt_type_ = 0u;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  rage_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitRsp_UserInfo::~CSMonsterHitRsp_UserInfo() {
  SharedDtor();
}

void CSMonsterHitRsp_UserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterHitRsp_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitRsp_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitRsp_UserInfo_descriptor_;
}

const CSMonsterHitRsp_UserInfo& CSMonsterHitRsp_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitRsp_UserInfo* CSMonsterHitRsp_UserInfo::default_instance_ = NULL;

CSMonsterHitRsp_UserInfo* CSMonsterHitRsp_UserInfo::New() const {
  return new CSMonsterHitRsp_UserInfo;
}

void CSMonsterHitRsp_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hurt_type_ = 0u;
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
    rage_point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitRsp_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hurt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rage_point;
        break;
      }
      
      // required uint32 rage_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rage_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rage_point_)));
          set_has_rage_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitRsp_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hurt_type = 1;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hurt_type(), output);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_id(), output);
  }
  
  // required uint32 blood = 5;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->blood(), output);
  }
  
  // required uint32 rage_point = 6;
  if (has_rage_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rage_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitRsp_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hurt_type = 1;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hurt_type(), target);
  }
  
  // required uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }
  
  // required uint32 reg_time = 3;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_id(), target);
  }
  
  // required uint32 blood = 5;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->blood(), target);
  }
  
  // required uint32 rage_point = 6;
  if (has_rage_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rage_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitRsp_UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hurt_type = 1;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }
    
    // required uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 3;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 5;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 rage_point = 6;
    if (has_rage_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rage_point());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitRsp_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitRsp_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitRsp_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitRsp_UserInfo::MergeFrom(const CSMonsterHitRsp_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_rage_point()) {
      set_rage_point(from.rage_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitRsp_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitRsp_UserInfo::CopyFrom(const CSMonsterHitRsp_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitRsp_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void CSMonsterHitRsp_UserInfo::Swap(CSMonsterHitRsp_UserInfo* other) {
  if (other != this) {
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(rage_point_, other->rage_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitRsp_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitRsp_UserInfo_descriptor_;
  metadata.reflection = CSMonsterHitRsp_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSMonsterHitRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSMonsterHitRsp::CSMonsterHitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterHitRsp::InitAsDefaultInstance() {
}

CSMonsterHitRsp::CSMonsterHitRsp(const CSMonsterHitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterHitRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterHitRsp::~CSMonsterHitRsp() {
  SharedDtor();
}

void CSMonsterHitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterHitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterHitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterHitRsp_descriptor_;
}

const CSMonsterHitRsp& CSMonsterHitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterHitRsp* CSMonsterHitRsp::default_instance_ = NULL;

CSMonsterHitRsp* CSMonsterHitRsp::New() const {
  return new CSMonsterHitRsp;
}

void CSMonsterHitRsp::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterHitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSMonsterHitRsp.UserInfo users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterHitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterHitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterHitRsp::ByteSize() const {
  int total_size = 0;
  
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterHitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterHitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterHitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterHitRsp::MergeFrom(const CSMonsterHitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterHitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterHitRsp::CopyFrom(const CSMonsterHitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterHitRsp::IsInitialized() const {
  
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterHitRsp::Swap(CSMonsterHitRsp* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterHitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterHitRsp_descriptor_;
  metadata.reflection = CSMonsterHitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSkillBeginReq::kUseridFieldNumber;
const int CSSkillBeginReq::kRegTimeFieldNumber;
const int CSSkillBeginReq::kChannelIdFieldNumber;
const int CSSkillBeginReq::kActionIdFieldNumber;
const int CSSkillBeginReq::kPosFieldNumber;
const int CSSkillBeginReq::kStartDirXFieldNumber;
const int CSSkillBeginReq::kStartDirYFieldNumber;
const int CSSkillBeginReq::kTargetPosFieldNumber;
const int CSSkillBeginReq::kDirectXFieldNumber;
const int CSSkillBeginReq::kDirectYFieldNumber;
const int CSSkillBeginReq::kAimFieldNumber;
#endif  // !_MSC_VER

CSSkillBeginReq::CSSkillBeginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillBeginReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  target_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSSkillBeginReq::CSSkillBeginReq(const CSSkillBeginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillBeginReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  action_id_ = 0u;
  pos_ = NULL;
  start_dir_x_ = 0;
  start_dir_y_ = 0;
  target_pos_ = NULL;
  direct_x_ = 0;
  direct_y_ = 0;
  aim_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillBeginReq::~CSSkillBeginReq() {
  SharedDtor();
}

void CSSkillBeginReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete target_pos_;
  }
}

void CSSkillBeginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillBeginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillBeginReq_descriptor_;
}

const CSSkillBeginReq& CSSkillBeginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSSkillBeginReq* CSSkillBeginReq::default_instance_ = NULL;

CSSkillBeginReq* CSSkillBeginReq::New() const {
  return new CSSkillBeginReq;
}

void CSSkillBeginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    action_id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    start_dir_x_ = 0;
    start_dir_y_ = 0;
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    direct_x_ = 0;
    direct_y_ = 0;
    aim_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillBeginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_start_dir_x;
        break;
      }
      
      // required float start_dir_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_x_)));
          set_has_start_dir_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_start_dir_y;
        break;
      }
      
      // required float start_dir_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_y_)));
          set_has_start_dir_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_target_pos;
        break;
      }
      
      // required .CSPoint target_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_direct_x;
        break;
      }
      
      // required float direct_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_x_)));
          set_has_direct_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_direct_y;
        break;
      }
      
      // required float direct_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_y_)));
          set_has_direct_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_aim;
        break;
      }
      
      // required bool aim = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSkillBeginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->start_dir_x(), output);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->start_dir_y(), output);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->target_pos(), output);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->direct_x(), output);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->direct_y(), output);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->aim(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillBeginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->start_dir_x(), target);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->start_dir_y(), target);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->target_pos(), target);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->direct_x(), target);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->direct_y(), target);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->aim(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillBeginReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required float start_dir_x = 6;
    if (has_start_dir_x()) {
      total_size += 1 + 4;
    }
    
    // required float start_dir_y = 7;
    if (has_start_dir_y()) {
      total_size += 1 + 4;
    }
    
    // required .CSPoint target_pos = 8;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float direct_x = 9;
    if (has_direct_x()) {
      total_size += 1 + 4;
    }
    
    // required float direct_y = 10;
    if (has_direct_y()) {
      total_size += 1 + 4;
    }
    
    // required bool aim = 11;
    if (has_aim()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillBeginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillBeginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillBeginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillBeginReq::MergeFrom(const CSSkillBeginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_start_dir_x()) {
      set_start_dir_x(from.start_dir_x());
    }
    if (from.has_start_dir_y()) {
      set_start_dir_y(from.start_dir_y());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::CSPoint::MergeFrom(from.target_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_direct_x()) {
      set_direct_x(from.direct_x());
    }
    if (from.has_direct_y()) {
      set_direct_y(from.direct_y());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillBeginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillBeginReq::CopyFrom(const CSSkillBeginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillBeginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void CSSkillBeginReq::Swap(CSSkillBeginReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(pos_, other->pos_);
    std::swap(start_dir_x_, other->start_dir_x_);
    std::swap(start_dir_y_, other->start_dir_y_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(direct_x_, other->direct_x_);
    std::swap(direct_y_, other->direct_y_);
    std::swap(aim_, other->aim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillBeginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillBeginReq_descriptor_;
  metadata.reflection = CSSkillBeginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSkillBeginRsp::kUseridFieldNumber;
const int CSSkillBeginRsp::kRegTimeFieldNumber;
const int CSSkillBeginRsp::kChannelIdFieldNumber;
const int CSSkillBeginRsp::kActionIdFieldNumber;
const int CSSkillBeginRsp::kPosFieldNumber;
const int CSSkillBeginRsp::kStartDirXFieldNumber;
const int CSSkillBeginRsp::kStartDirYFieldNumber;
const int CSSkillBeginRsp::kTargetPosFieldNumber;
const int CSSkillBeginRsp::kDirectXFieldNumber;
const int CSSkillBeginRsp::kDirectYFieldNumber;
const int CSSkillBeginRsp::kAimFieldNumber;
#endif  // !_MSC_VER

CSSkillBeginRsp::CSSkillBeginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSkillBeginRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  target_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSSkillBeginRsp::CSSkillBeginRsp(const CSSkillBeginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSkillBeginRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  action_id_ = 0u;
  pos_ = NULL;
  start_dir_x_ = 0;
  start_dir_y_ = 0;
  target_pos_ = NULL;
  direct_x_ = 0;
  direct_y_ = 0;
  aim_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSkillBeginRsp::~CSSkillBeginRsp() {
  SharedDtor();
}

void CSSkillBeginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete target_pos_;
  }
}

void CSSkillBeginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSkillBeginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSkillBeginRsp_descriptor_;
}

const CSSkillBeginRsp& CSSkillBeginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSSkillBeginRsp* CSSkillBeginRsp::default_instance_ = NULL;

CSSkillBeginRsp* CSSkillBeginRsp::New() const {
  return new CSSkillBeginRsp;
}

void CSSkillBeginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    action_id_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::CSPoint::Clear();
    }
    start_dir_x_ = 0;
    start_dir_y_ = 0;
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    direct_x_ = 0;
    direct_y_ = 0;
    aim_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSkillBeginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }
      
      // required .CSPoint pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_start_dir_x;
        break;
      }
      
      // required float start_dir_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_x_)));
          set_has_start_dir_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_start_dir_y;
        break;
      }
      
      // required float start_dir_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_dir_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_dir_y_)));
          set_has_start_dir_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_target_pos;
        break;
      }
      
      // required .CSPoint target_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_direct_x;
        break;
      }
      
      // required float direct_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_x_)));
          set_has_direct_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_direct_y;
        break;
      }
      
      // required float direct_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direct_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direct_y_)));
          set_has_direct_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_aim;
        break;
      }
      
      // required bool aim = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSkillBeginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->start_dir_x(), output);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->start_dir_y(), output);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->target_pos(), output);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->direct_x(), output);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->direct_y(), output);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->aim(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSkillBeginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }
  
  // required .CSPoint pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }
  
  // required float start_dir_x = 6;
  if (has_start_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->start_dir_x(), target);
  }
  
  // required float start_dir_y = 7;
  if (has_start_dir_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->start_dir_y(), target);
  }
  
  // required .CSPoint target_pos = 8;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->target_pos(), target);
  }
  
  // required float direct_x = 9;
  if (has_direct_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->direct_x(), target);
  }
  
  // required float direct_y = 10;
  if (has_direct_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->direct_y(), target);
  }
  
  // required bool aim = 11;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->aim(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSkillBeginRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
    // required .CSPoint pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required float start_dir_x = 6;
    if (has_start_dir_x()) {
      total_size += 1 + 4;
    }
    
    // required float start_dir_y = 7;
    if (has_start_dir_y()) {
      total_size += 1 + 4;
    }
    
    // required .CSPoint target_pos = 8;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float direct_x = 9;
    if (has_direct_x()) {
      total_size += 1 + 4;
    }
    
    // required float direct_y = 10;
    if (has_direct_y()) {
      total_size += 1 + 4;
    }
    
    // required bool aim = 11;
    if (has_aim()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSkillBeginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSkillBeginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSkillBeginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSkillBeginRsp::MergeFrom(const CSSkillBeginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::CSPoint::MergeFrom(from.pos());
    }
    if (from.has_start_dir_x()) {
      set_start_dir_x(from.start_dir_x());
    }
    if (from.has_start_dir_y()) {
      set_start_dir_y(from.start_dir_y());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::CSPoint::MergeFrom(from.target_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_direct_x()) {
      set_direct_x(from.direct_x());
    }
    if (from.has_direct_y()) {
      set_direct_y(from.direct_y());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSkillBeginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSkillBeginRsp::CopyFrom(const CSSkillBeginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSkillBeginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void CSSkillBeginRsp::Swap(CSSkillBeginRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(pos_, other->pos_);
    std::swap(start_dir_x_, other->start_dir_x_);
    std::swap(start_dir_y_, other->start_dir_y_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(direct_x_, other->direct_x_);
    std::swap(direct_y_, other->direct_y_);
    std::swap(aim_, other->aim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSkillBeginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSkillBeginRsp_descriptor_;
  metadata.reflection = CSSkillBeginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttackReq::kUseridFieldNumber;
const int CSPlayerAttackReq::kRegTimeFieldNumber;
const int CSPlayerAttackReq::kChannelIdFieldNumber;
const int CSPlayerAttackReq::kStartPosFieldNumber;
const int CSPlayerAttackReq::kStartDirectFieldNumber;
const int CSPlayerAttackReq::kEndPosFieldNumber;
const int CSPlayerAttackReq::kEndDirectFieldNumber;
const int CSPlayerAttackReq::kActionIdFieldNumber;
const int CSPlayerAttackReq::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttackReq::CSPlayerAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerAttackReq::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerAttackReq::CSPlayerAttackReq(const CSPlayerAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttackReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttackReq::~CSPlayerAttackReq() {
  SharedDtor();
}

void CSPlayerAttackReq::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerAttackReq_descriptor_;
}

const CSPlayerAttackReq& CSPlayerAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerAttackReq* CSPlayerAttackReq::default_instance_ = NULL;

CSPlayerAttackReq* CSPlayerAttackReq::New() const {
  return new CSPlayerAttackReq;
}

void CSPlayerAttackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        break;
      }
      
      // repeated .AttackMonsterInfo monsters = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerAttackReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackMonsterInfo monsters = 9;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerAttackReq::MergeFrom(const CSPlayerAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerAttackReq::CopyFrom(const CSPlayerAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerAttackReq::Swap(CSPlayerAttackReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerAttackReq_descriptor_;
  metadata.reflection = CSPlayerAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttackRsp::kUseridFieldNumber;
const int CSPlayerAttackRsp::kRegTimeFieldNumber;
const int CSPlayerAttackRsp::kChannelIdFieldNumber;
const int CSPlayerAttackRsp::kStartPosFieldNumber;
const int CSPlayerAttackRsp::kStartDirectFieldNumber;
const int CSPlayerAttackRsp::kEndPosFieldNumber;
const int CSPlayerAttackRsp::kEndDirectFieldNumber;
const int CSPlayerAttackRsp::kActionIdFieldNumber;
const int CSPlayerAttackRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttackRsp::CSPlayerAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerAttackRsp::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerAttackRsp::CSPlayerAttackRsp(const CSPlayerAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttackRsp::~CSPlayerAttackRsp() {
  SharedDtor();
}

void CSPlayerAttackRsp::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerAttackRsp_descriptor_;
}

const CSPlayerAttackRsp& CSPlayerAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerAttackRsp* CSPlayerAttackRsp::default_instance_ = NULL;

CSPlayerAttackRsp* CSPlayerAttackRsp::New() const {
  return new CSPlayerAttackRsp;
}

void CSPlayerAttackRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        break;
      }
      
      // repeated .AttackMonsterInfo monsters = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackMonsterInfo monsters = 9;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerAttackRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackMonsterInfo monsters = 9;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerAttackRsp::MergeFrom(const CSPlayerAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerAttackRsp::CopyFrom(const CSPlayerAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttackRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerAttackRsp::Swap(CSPlayerAttackRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerAttackRsp_descriptor_;
  metadata.reflection = CSPlayerAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackPlayerInfo::kUseridFieldNumber;
const int AttackPlayerInfo::kRegTimeFieldNumber;
const int AttackPlayerInfo::kChannelIdFieldNumber;
const int AttackPlayerInfo::kBloodFieldNumber;
const int AttackPlayerInfo::kHurtTypeFieldNumber;
#endif  // !_MSC_VER

AttackPlayerInfo::AttackPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackPlayerInfo::InitAsDefaultInstance() {
}

AttackPlayerInfo::AttackPlayerInfo(const AttackPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  hurt_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackPlayerInfo::~AttackPlayerInfo() {
  SharedDtor();
}

void AttackPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackPlayerInfo_descriptor_;
}

const AttackPlayerInfo& AttackPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

AttackPlayerInfo* AttackPlayerInfo::default_instance_ = NULL;

AttackPlayerInfo* AttackPlayerInfo::New() const {
  return new AttackPlayerInfo;
}

void AttackPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
    hurt_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hurt_type;
        break;
      }
      
      // required uint32 hurt_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_type_)));
          set_has_hurt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }
  
  // required uint32 hurt_type = 5;
  if (has_hurt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hurt_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }
  
  // required uint32 hurt_type = 5;
  if (has_hurt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hurt_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // required uint32 hurt_type = 5;
    if (has_hurt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackPlayerInfo::MergeFrom(const AttackPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_hurt_type()) {
      set_hurt_type(from.hurt_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackPlayerInfo::CopyFrom(const AttackPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AttackPlayerInfo::Swap(AttackPlayerInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(hurt_type_, other->hurt_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackPlayerInfo_descriptor_;
  metadata.reflection = AttackPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHitPlayerReq::kUseridFieldNumber;
const int CSPlayerHitPlayerReq::kRegTimeFieldNumber;
const int CSPlayerHitPlayerReq::kChannelIdFieldNumber;
const int CSPlayerHitPlayerReq::kStartPosFieldNumber;
const int CSPlayerHitPlayerReq::kStartDirectFieldNumber;
const int CSPlayerHitPlayerReq::kEndPosFieldNumber;
const int CSPlayerHitPlayerReq::kEndDirectFieldNumber;
const int CSPlayerHitPlayerReq::kActionIdFieldNumber;
const int CSPlayerHitPlayerReq::kUsersFieldNumber;
#endif  // !_MSC_VER

CSPlayerHitPlayerReq::CSPlayerHitPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHitPlayerReq::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerHitPlayerReq::CSPlayerHitPlayerReq(const CSPlayerHitPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHitPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHitPlayerReq::~CSPlayerHitPlayerReq() {
  SharedDtor();
}

void CSPlayerHitPlayerReq::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerHitPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHitPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHitPlayerReq_descriptor_;
}

const CSPlayerHitPlayerReq& CSPlayerHitPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHitPlayerReq* CSPlayerHitPlayerReq::default_instance_ = NULL;

CSPlayerHitPlayerReq* CSPlayerHitPlayerReq::New() const {
  return new CSPlayerHitPlayerReq;
}

void CSPlayerHitPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHitPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        break;
      }
      
      // repeated .AttackPlayerInfo users = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHitPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHitPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHitPlayerReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackPlayerInfo users = 9;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHitPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHitPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHitPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHitPlayerReq::MergeFrom(const CSPlayerHitPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHitPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHitPlayerReq::CopyFrom(const CSPlayerHitPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHitPlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerHitPlayerReq::Swap(CSPlayerHitPlayerReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHitPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHitPlayerReq_descriptor_;
  metadata.reflection = CSPlayerHitPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHitPlayerRsp::kUseridFieldNumber;
const int CSPlayerHitPlayerRsp::kRegTimeFieldNumber;
const int CSPlayerHitPlayerRsp::kChannelIdFieldNumber;
const int CSPlayerHitPlayerRsp::kStartPosFieldNumber;
const int CSPlayerHitPlayerRsp::kStartDirectFieldNumber;
const int CSPlayerHitPlayerRsp::kEndPosFieldNumber;
const int CSPlayerHitPlayerRsp::kEndDirectFieldNumber;
const int CSPlayerHitPlayerRsp::kActionIdFieldNumber;
const int CSPlayerHitPlayerRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

CSPlayerHitPlayerRsp::CSPlayerHitPlayerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHitPlayerRsp::InitAsDefaultInstance() {
  start_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  start_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_pos_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
  end_direct_ = const_cast< ::CSPoint*>(&::CSPoint::default_instance());
}

CSPlayerHitPlayerRsp::CSPlayerHitPlayerRsp(const CSPlayerHitPlayerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHitPlayerRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  start_pos_ = NULL;
  start_direct_ = NULL;
  end_pos_ = NULL;
  end_direct_ = NULL;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHitPlayerRsp::~CSPlayerHitPlayerRsp() {
  SharedDtor();
}

void CSPlayerHitPlayerRsp::SharedDtor() {
  if (this != default_instance_) {
    delete start_pos_;
    delete start_direct_;
    delete end_pos_;
    delete end_direct_;
  }
}

void CSPlayerHitPlayerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHitPlayerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHitPlayerRsp_descriptor_;
}

const CSPlayerHitPlayerRsp& CSPlayerHitPlayerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHitPlayerRsp* CSPlayerHitPlayerRsp::default_instance_ = NULL;

CSPlayerHitPlayerRsp* CSPlayerHitPlayerRsp::New() const {
  return new CSPlayerHitPlayerRsp;
}

void CSPlayerHitPlayerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    if (has_start_pos()) {
      if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
    }
    if (has_start_direct()) {
      if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
    }
    if (has_end_pos()) {
      if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
    }
    if (has_end_direct()) {
      if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
    }
    action_id_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHitPlayerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_pos;
        break;
      }
      
      // required .CSPoint start_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start_direct;
        break;
      }
      
      // required .CSPoint start_direct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_end_pos;
        break;
      }
      
      // required .CSPoint end_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_direct;
        break;
      }
      
      // required .CSPoint end_direct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_id;
        break;
      }
      
      // required uint32 action_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        break;
      }
      
      // repeated .AttackPlayerInfo users = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHitPlayerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_pos(), output);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start_direct(), output);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_pos(), output);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->end_direct(), output);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHitPlayerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required .CSPoint start_pos = 4;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_pos(), target);
  }
  
  // required .CSPoint start_direct = 5;
  if (has_start_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start_direct(), target);
  }
  
  // required .CSPoint end_pos = 6;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_pos(), target);
  }
  
  // required .CSPoint end_direct = 7;
  if (has_end_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->end_direct(), target);
  }
  
  // required uint32 action_id = 8;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }
  
  // repeated .AttackPlayerInfo users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHitPlayerRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required .CSPoint start_pos = 4;
    if (has_start_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_pos());
    }
    
    // required .CSPoint start_direct = 5;
    if (has_start_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_direct());
    }
    
    // required .CSPoint end_pos = 6;
    if (has_end_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_pos());
    }
    
    // required .CSPoint end_direct = 7;
    if (has_end_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_direct());
    }
    
    // required uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }
    
  }
  // repeated .AttackPlayerInfo users = 9;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHitPlayerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHitPlayerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHitPlayerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHitPlayerRsp::MergeFrom(const CSPlayerHitPlayerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_start_pos()) {
      mutable_start_pos()->::CSPoint::MergeFrom(from.start_pos());
    }
    if (from.has_start_direct()) {
      mutable_start_direct()->::CSPoint::MergeFrom(from.start_direct());
    }
    if (from.has_end_pos()) {
      mutable_end_pos()->::CSPoint::MergeFrom(from.end_pos());
    }
    if (from.has_end_direct()) {
      mutable_end_direct()->::CSPoint::MergeFrom(from.end_direct());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHitPlayerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHitPlayerRsp::CopyFrom(const CSPlayerHitPlayerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHitPlayerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_start_pos()) {
    if (!this->start_pos().IsInitialized()) return false;
  }
  if (has_start_direct()) {
    if (!this->start_direct().IsInitialized()) return false;
  }
  if (has_end_pos()) {
    if (!this->end_pos().IsInitialized()) return false;
  }
  if (has_end_direct()) {
    if (!this->end_direct().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerHitPlayerRsp::Swap(CSPlayerHitPlayerRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(start_pos_, other->start_pos_);
    std::swap(start_direct_, other->start_direct_);
    std::swap(end_pos_, other->end_pos_);
    std::swap(end_direct_, other->end_direct_);
    std::swap(action_id_, other->action_id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHitPlayerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHitPlayerRsp_descriptor_;
  metadata.reflection = CSPlayerHitPlayerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHPRsp::kUseridFieldNumber;
const int CSPlayerHPRsp::kRegTimeFieldNumber;
const int CSPlayerHPRsp::kChannelIdFieldNumber;
const int CSPlayerHPRsp::kBloodFieldNumber;
const int CSPlayerHPRsp::kSourceIdFieldNumber;
const int CSPlayerHPRsp::kSourceRegTimeFieldNumber;
const int CSPlayerHPRsp::kSourceChannelIdFieldNumber;
#endif  // !_MSC_VER

CSPlayerHPRsp::CSPlayerHPRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHPRsp::InitAsDefaultInstance() {
}

CSPlayerHPRsp::CSPlayerHPRsp(const CSPlayerHPRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHPRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  blood_ = 0u;
  source_id_ = 0u;
  source_reg_time_ = 0u;
  source_channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHPRsp::~CSPlayerHPRsp() {
  SharedDtor();
}

void CSPlayerHPRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerHPRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHPRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHPRsp_descriptor_;
}

const CSPlayerHPRsp& CSPlayerHPRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHPRsp* CSPlayerHPRsp::default_instance_ = NULL;

CSPlayerHPRsp* CSPlayerHPRsp::New() const {
  return new CSPlayerHPRsp;
}

void CSPlayerHPRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
    blood_ = 0u;
    source_id_ = 0u;
    source_reg_time_ = 0u;
    source_channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHPRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // required uint32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_id;
        break;
      }
      
      // optional uint32 source_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_reg_time;
        break;
      }
      
      // optional uint32 source_reg_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_reg_time_)));
          set_has_source_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_source_channel_id;
        break;
      }
      
      // optional uint32 source_channel_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_channel_id_)));
          set_has_source_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHPRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blood(), output);
  }
  
  // optional uint32 source_id = 5;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_id(), output);
  }
  
  // optional uint32 source_reg_time = 6;
  if (has_source_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_reg_time(), output);
  }
  
  // optional uint32 source_channel_id = 7;
  if (has_source_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->source_channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHPRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // required uint32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blood(), target);
  }
  
  // optional uint32 source_id = 5;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_id(), target);
  }
  
  // optional uint32 source_reg_time = 6;
  if (has_source_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_reg_time(), target);
  }
  
  // optional uint32 source_channel_id = 7;
  if (has_source_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->source_channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHPRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
    // required uint32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // optional uint32 source_id = 5;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }
    
    // optional uint32 source_reg_time = 6;
    if (has_source_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_reg_time());
    }
    
    // optional uint32 source_channel_id = 7;
    if (has_source_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHPRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHPRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHPRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHPRsp::MergeFrom(const CSPlayerHPRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_source_reg_time()) {
      set_source_reg_time(from.source_reg_time());
    }
    if (from.has_source_channel_id()) {
      set_source_channel_id(from.source_channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHPRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHPRsp::CopyFrom(const CSPlayerHPRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHPRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CSPlayerHPRsp::Swap(CSPlayerHPRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(blood_, other->blood_);
    std::swap(source_id_, other->source_id_);
    std::swap(source_reg_time_, other->source_reg_time_);
    std::swap(source_channel_id_, other->source_channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHPRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHPRsp_descriptor_;
  metadata.reflection = CSPlayerHPRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerHPReq::kBloodFieldNumber;
#endif  // !_MSC_VER

CSPlayerHPReq::CSPlayerHPReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerHPReq::InitAsDefaultInstance() {
}

CSPlayerHPReq::CSPlayerHPReq(const CSPlayerHPReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerHPReq::SharedCtor() {
  _cached_size_ = 0;
  blood_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerHPReq::~CSPlayerHPReq() {
  SharedDtor();
}

void CSPlayerHPReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerHPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerHPReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerHPReq_descriptor_;
}

const CSPlayerHPReq& CSPlayerHPReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerHPReq* CSPlayerHPReq::default_instance_ = NULL;

CSPlayerHPReq* CSPlayerHPReq::New() const {
  return new CSPlayerHPReq;
}

void CSPlayerHPReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blood_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerHPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blood = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerHPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blood = 1;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blood(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerHPReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 blood = 1;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blood(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerHPReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blood = 1;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerHPReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerHPReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerHPReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerHPReq::MergeFrom(const CSPlayerHPReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerHPReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerHPReq::CopyFrom(const CSPlayerHPReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerHPReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSPlayerHPReq::Swap(CSPlayerHPReq* other) {
  if (other != this) {
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerHPReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerHPReq_descriptor_;
  metadata.reflection = CSPlayerHPReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonsterBloodRsp::kUseridFieldNumber;
const int CSMonsterBloodRsp::kRegTimeFieldNumber;
const int CSMonsterBloodRsp::kChannelIdFieldNumber;
const int CSMonsterBloodRsp::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSMonsterBloodRsp::CSMonsterBloodRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMonsterBloodRsp::InitAsDefaultInstance() {
}

CSMonsterBloodRsp::CSMonsterBloodRsp(const CSMonsterBloodRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonsterBloodRsp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  reg_time_ = 0u;
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonsterBloodRsp::~CSMonsterBloodRsp() {
  SharedDtor();
}

void CSMonsterBloodRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMonsterBloodRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMonsterBloodRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMonsterBloodRsp_descriptor_;
}

const CSMonsterBloodRsp& CSMonsterBloodRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSMonsterBloodRsp* CSMonsterBloodRsp::default_instance_ = NULL;

CSMonsterBloodRsp* CSMonsterBloodRsp::New() const {
  return new CSMonsterBloodRsp;
}

void CSMonsterBloodRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    reg_time_ = 0u;
    channel_id_ = 0u;
  }
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMonsterBloodRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // required uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsters;
        break;
      }
      
      // repeated .AttackMonsterInfo monsters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonsterBloodRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }
  
  // repeated .AttackMonsterInfo monsters = 4;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monsters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMonsterBloodRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }
  
  // repeated .AttackMonsterInfo monsters = 4;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monsters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMonsterBloodRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }
    
  }
  // repeated .AttackMonsterInfo monsters = 4;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonsterBloodRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMonsterBloodRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMonsterBloodRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMonsterBloodRsp::MergeFrom(const CSMonsterBloodRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMonsterBloodRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMonsterBloodRsp::CopyFrom(const CSMonsterBloodRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonsterBloodRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSMonsterBloodRsp::Swap(CSMonsterBloodRsp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(channel_id_, other->channel_id_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMonsterBloodRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMonsterBloodRsp_descriptor_;
  metadata.reflection = CSMonsterBloodRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPlayerDieShowReq::CSPlayerDieShowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerDieShowReq::InitAsDefaultInstance() {
}

CSPlayerDieShowReq::CSPlayerDieShowReq(const CSPlayerDieShowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerDieShowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerDieShowReq::~CSPlayerDieShowReq() {
  SharedDtor();
}

void CSPlayerDieShowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerDieShowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerDieShowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerDieShowReq_descriptor_;
}

const CSPlayerDieShowReq& CSPlayerDieShowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerDieShowReq* CSPlayerDieShowReq::default_instance_ = NULL;

CSPlayerDieShowReq* CSPlayerDieShowReq::New() const {
  return new CSPlayerDieShowReq;
}

void CSPlayerDieShowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerDieShowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPlayerDieShowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerDieShowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerDieShowReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerDieShowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerDieShowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerDieShowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerDieShowReq::MergeFrom(const CSPlayerDieShowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerDieShowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerDieShowReq::CopyFrom(const CSPlayerDieShowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerDieShowReq::IsInitialized() const {
  
  return true;
}

void CSPlayerDieShowReq::Swap(CSPlayerDieShowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerDieShowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerDieShowReq_descriptor_;
  metadata.reflection = CSPlayerDieShowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerDieShowRsp::kAttackFieldNumber;
const int CSPlayerDieShowRsp::kDefendFieldNumber;
const int CSPlayerDieShowRsp::kHpFieldNumber;
#endif  // !_MSC_VER

CSPlayerDieShowRsp::CSPlayerDieShowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerDieShowRsp::InitAsDefaultInstance() {
}

CSPlayerDieShowRsp::CSPlayerDieShowRsp(const CSPlayerDieShowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerDieShowRsp::SharedCtor() {
  _cached_size_ = 0;
  attack_ = 0u;
  defend_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerDieShowRsp::~CSPlayerDieShowRsp() {
  SharedDtor();
}

void CSPlayerDieShowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerDieShowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerDieShowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerDieShowRsp_descriptor_;
}

const CSPlayerDieShowRsp& CSPlayerDieShowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerDieShowRsp* CSPlayerDieShowRsp::default_instance_ = NULL;

CSPlayerDieShowRsp* CSPlayerDieShowRsp::New() const {
  return new CSPlayerDieShowRsp;
}

void CSPlayerDieShowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_ = 0u;
    defend_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerDieShowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defend;
        break;
      }
      
      // required uint32 defend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defend_)));
          set_has_defend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }
      
      // required uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerDieShowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attack(), output);
  }
  
  // required uint32 defend = 2;
  if (has_defend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defend(), output);
  }
  
  // required uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerDieShowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attack(), target);
  }
  
  // required uint32 defend = 2;
  if (has_defend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defend(), target);
  }
  
  // required uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerDieShowRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attack = 1;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }
    
    // required uint32 defend = 2;
    if (has_defend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defend());
    }
    
    // required uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerDieShowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerDieShowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerDieShowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerDieShowRsp::MergeFrom(const CSPlayerDieShowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defend()) {
      set_defend(from.defend());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerDieShowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerDieShowRsp::CopyFrom(const CSPlayerDieShowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerDieShowRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSPlayerDieShowRsp::Swap(CSPlayerDieShowRsp* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(defend_, other->defend_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerDieShowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerDieShowRsp_descriptor_;
  metadata.reflection = CSPlayerDieShowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSPlayerMayImproveReq::CSPlayerMayImproveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerMayImproveReq::InitAsDefaultInstance() {
}

CSPlayerMayImproveReq::CSPlayerMayImproveReq(const CSPlayerMayImproveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerMayImproveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerMayImproveReq::~CSPlayerMayImproveReq() {
  SharedDtor();
}

void CSPlayerMayImproveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerMayImproveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerMayImproveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerMayImproveReq_descriptor_;
}

const CSPlayerMayImproveReq& CSPlayerMayImproveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerMayImproveReq* CSPlayerMayImproveReq::default_instance_ = NULL;

CSPlayerMayImproveReq* CSPlayerMayImproveReq::New() const {
  return new CSPlayerMayImproveReq;
}

void CSPlayerMayImproveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerMayImproveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSPlayerMayImproveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerMayImproveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerMayImproveReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerMayImproveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerMayImproveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerMayImproveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerMayImproveReq::MergeFrom(const CSPlayerMayImproveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerMayImproveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerMayImproveReq::CopyFrom(const CSPlayerMayImproveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerMayImproveReq::IsInitialized() const {
  
  return true;
}

void CSPlayerMayImproveReq::Swap(CSPlayerMayImproveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerMayImproveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerMayImproveReq_descriptor_;
  metadata.reflection = CSPlayerMayImproveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerMayImproveRsp::kImpItemFieldNumber;
#endif  // !_MSC_VER

CSPlayerMayImproveRsp::CSPlayerMayImproveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPlayerMayImproveRsp::InitAsDefaultInstance() {
}

CSPlayerMayImproveRsp::CSPlayerMayImproveRsp(const CSPlayerMayImproveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerMayImproveRsp::SharedCtor() {
  _cached_size_ = 0;
  imp_item_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerMayImproveRsp::~CSPlayerMayImproveRsp() {
  SharedDtor();
}

void CSPlayerMayImproveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPlayerMayImproveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPlayerMayImproveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPlayerMayImproveRsp_descriptor_;
}

const CSPlayerMayImproveRsp& CSPlayerMayImproveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();  return *default_instance_;
}

CSPlayerMayImproveRsp* CSPlayerMayImproveRsp::default_instance_ = NULL;

CSPlayerMayImproveRsp* CSPlayerMayImproveRsp::New() const {
  return new CSPlayerMayImproveRsp;
}

void CSPlayerMayImproveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imp_item_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPlayerMayImproveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 imp_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imp_item_)));
          set_has_imp_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerMayImproveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 imp_item = 1;
  if (has_imp_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imp_item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPlayerMayImproveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 imp_item = 1;
  if (has_imp_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imp_item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPlayerMayImproveRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 imp_item = 1;
    if (has_imp_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imp_item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerMayImproveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPlayerMayImproveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPlayerMayImproveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPlayerMayImproveRsp::MergeFrom(const CSPlayerMayImproveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imp_item()) {
      set_imp_item(from.imp_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPlayerMayImproveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPlayerMayImproveRsp::CopyFrom(const CSPlayerMayImproveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerMayImproveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSPlayerMayImproveRsp::Swap(CSPlayerMayImproveRsp* other) {
  if (other != this) {
    std::swap(imp_item_, other->imp_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPlayerMayImproveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPlayerMayImproveRsp_descriptor_;
  metadata.reflection = CSPlayerMayImproveRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
