// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_battle.proto

#ifndef PROTOBUF_cs_5fbattle_2eproto__INCLUDED
#define PROTOBUF_cs_5fbattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "cs_core.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fbattle_2eproto();
void protobuf_AssignDesc_cs_5fbattle_2eproto();
void protobuf_ShutdownFile_cs_5fbattle_2eproto();

class CSPoint;
class CSBattleMoveReq;
class CSBattleMoveRsp;
class CSBattleCreateReq;
class MonsterBattleInfo;
class MonsterInfo;
class CSBattleCreateRsp;
class CSBattleMonsterCreateReq;
class CSBattleMonsterCreateRsp;
class CSCastleInfo;
class CSBattleUserJoinReq;
class CSBattleUserJoinRsp;
class CSBattleUserLeaveRsp;
class CSBattleLoadCompleteReq;
class CSBattleLoadCompleteRsp;
class CSBattleLeaveReq;
class CSBattleLeaveRsp;
class CSBattleTimeoutRsp;
class CSBattlePlayerDelRsp;
class CSBattlePlayerRevivalReq;
class CSBattlePlayerRevivalRsp;
class CSMonsterMoveReq;
class CSMonsterMoveRsp;
class CSMonsterCreateReq;
class CSMonsterCreateRsp;
class AttackMonsterInfo;
class CSMonsterHitMonsterReq;
class CSMonsterHitMonsterRsp;
class CSSMonsterHPReq;
class CSSMonsterHPRsp;
class CSMonsterDieReq;
class CSMonsterDieRsp;
class CSMonsterHitCastleReq;
class CSMonsterHitCastleRsp;
class CSCastleDieReq;
class CSCastleDieRsp;
class CSMonsterAttackInfo;
class CSMonsterEffectInfo;
class CSMonsterAttackRsp;
class CSMonsterEffectRsp;
class CSMonsterBuffEffectInfo;
class CSMonsterBuffEffectInfo_BuffEffectInfo;
class CSBuffEffectRsp;
class CSMonsterHitRsp;
class CSMonsterHitRsp_UserInfo;
class CSSkillBeginReq;
class CSSkillBeginRsp;
class CSPlayerAttackReq;
class CSPlayerAttackRsp;
class AttackPlayerInfo;
class CSPlayerHitPlayerReq;
class CSPlayerHitPlayerRsp;
class CSPlayerHPRsp;
class CSPlayerHPReq;
class CSMonsterBloodRsp;
class CSPlayerDieShowReq;
class CSPlayerDieShowRsp;
class CSPlayerMayImproveReq;
class CSPlayerMayImproveRsp;

// ===================================================================

class CSPoint : public ::google::protobuf::Message {
 public:
  CSPoint();
  virtual ~CSPoint();
  
  CSPoint(const CSPoint& from);
  
  inline CSPoint& operator=(const CSPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPoint& default_instance();
  
  void Swap(CSPoint* other);
  
  // implements Message ----------------------------------------------
  
  CSPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPoint& from);
  void MergeFrom(const CSPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 xpos = 1;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 1;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);
  
  // required int32 ypos = 2;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 2;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CSPoint)
 private:
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPoint* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMoveReq : public ::google::protobuf::Message {
 public:
  CSBattleMoveReq();
  virtual ~CSBattleMoveReq();
  
  CSBattleMoveReq(const CSBattleMoveReq& from);
  
  inline CSBattleMoveReq& operator=(const CSBattleMoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMoveReq& default_instance();
  
  void Swap(CSBattleMoveReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMoveReq& from);
  void MergeFrom(const CSBattleMoveReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required .CSPoint direct = 4;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 4;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  
  // required .CSPoint pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // required uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattleMoveReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 reg_time_;
  ::CSPoint* direct_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 time_;
  ::CSPoint* pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleMoveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMoveRsp : public ::google::protobuf::Message {
 public:
  CSBattleMoveRsp();
  virtual ~CSBattleMoveRsp();
  
  CSBattleMoveRsp(const CSBattleMoveRsp& from);
  
  inline CSBattleMoveRsp& operator=(const CSBattleMoveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMoveRsp& default_instance();
  
  void Swap(CSBattleMoveRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleMoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMoveRsp& from);
  void MergeFrom(const CSBattleMoveRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required .CSPoint direct = 4;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 4;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  
  // required .CSPoint pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // required uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattleMoveRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 reg_time_;
  ::CSPoint* direct_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 time_;
  ::CSPoint* pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleMoveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleCreateReq : public ::google::protobuf::Message {
 public:
  CSBattleCreateReq();
  virtual ~CSBattleCreateReq();
  
  CSBattleCreateReq(const CSBattleCreateReq& from);
  
  inline CSBattleCreateReq& operator=(const CSBattleCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleCreateReq& default_instance();
  
  void Swap(CSBattleCreateReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleCreateReq& from);
  void MergeFrom(const CSBattleCreateReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattleCreateReq)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 map_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class MonsterBattleInfo : public ::google::protobuf::Message {
 public:
  MonsterBattleInfo();
  virtual ~MonsterBattleInfo();
  
  MonsterBattleInfo(const MonsterBattleInfo& from);
  
  inline MonsterBattleInfo& operator=(const MonsterBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterBattleInfo& default_instance();
  
  void Swap(MonsterBattleInfo* other);
  
  // implements Message ----------------------------------------------
  
  MonsterBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterBattleInfo& from);
  void MergeFrom(const MonsterBattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 physical_attack = 1;
  inline bool has_physical_attack() const;
  inline void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 1;
  inline ::google::protobuf::uint32 physical_attack() const;
  inline void set_physical_attack(::google::protobuf::uint32 value);
  
  // optional uint32 magic_attack = 2;
  inline bool has_magic_attack() const;
  inline void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 2;
  inline ::google::protobuf::uint32 magic_attack() const;
  inline void set_magic_attack(::google::protobuf::uint32 value);
  
  // optional uint32 skill_attack = 3;
  inline bool has_skill_attack() const;
  inline void clear_skill_attack();
  static const int kSkillAttackFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_attack() const;
  inline void set_skill_attack(::google::protobuf::uint32 value);
  
  // optional uint32 physical_defence = 4;
  inline bool has_physical_defence() const;
  inline void clear_physical_defence();
  static const int kPhysicalDefenceFieldNumber = 4;
  inline ::google::protobuf::uint32 physical_defence() const;
  inline void set_physical_defence(::google::protobuf::uint32 value);
  
  // optional uint32 magic_defence = 5;
  inline bool has_magic_defence() const;
  inline void clear_magic_defence();
  static const int kMagicDefenceFieldNumber = 5;
  inline ::google::protobuf::uint32 magic_defence() const;
  inline void set_magic_defence(::google::protobuf::uint32 value);
  
  // optional uint32 skill_defence = 6;
  inline bool has_skill_defence() const;
  inline void clear_skill_defence();
  static const int kSkillDefenceFieldNumber = 6;
  inline ::google::protobuf::uint32 skill_defence() const;
  inline void set_skill_defence(::google::protobuf::uint32 value);
  
  // optional uint32 health_point = 7;
  inline bool has_health_point() const;
  inline void clear_health_point();
  static const int kHealthPointFieldNumber = 7;
  inline ::google::protobuf::uint32 health_point() const;
  inline void set_health_point(::google::protobuf::uint32 value);
  
  // optional uint32 accurate = 8;
  inline bool has_accurate() const;
  inline void clear_accurate();
  static const int kAccurateFieldNumber = 8;
  inline ::google::protobuf::uint32 accurate() const;
  inline void set_accurate(::google::protobuf::uint32 value);
  
  // optional uint32 dodge = 9;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 9;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);
  
  // optional uint32 wreck = 10;
  inline bool has_wreck() const;
  inline void clear_wreck();
  static const int kWreckFieldNumber = 10;
  inline ::google::protobuf::uint32 wreck() const;
  inline void set_wreck(::google::protobuf::uint32 value);
  
  // optional uint32 parry = 11;
  inline bool has_parry() const;
  inline void clear_parry();
  static const int kParryFieldNumber = 11;
  inline ::google::protobuf::uint32 parry() const;
  inline void set_parry(::google::protobuf::uint32 value);
  
  // optional uint32 critical_strike = 12;
  inline bool has_critical_strike() const;
  inline void clear_critical_strike();
  static const int kCriticalStrikeFieldNumber = 12;
  inline ::google::protobuf::uint32 critical_strike() const;
  inline void set_critical_strike(::google::protobuf::uint32 value);
  
  // optional uint32 tenacity = 13;
  inline bool has_tenacity() const;
  inline void clear_tenacity();
  static const int kTenacityFieldNumber = 13;
  inline ::google::protobuf::uint32 tenacity() const;
  inline void set_tenacity(::google::protobuf::uint32 value);
  
  // optional uint32 slay = 14;
  inline bool has_slay() const;
  inline void clear_slay();
  static const int kSlayFieldNumber = 14;
  inline ::google::protobuf::uint32 slay() const;
  inline void set_slay(::google::protobuf::uint32 value);
  
  // optional uint32 proficiency = 15;
  inline bool has_proficiency() const;
  inline void clear_proficiency();
  static const int kProficiencyFieldNumber = 15;
  inline ::google::protobuf::uint32 proficiency() const;
  inline void set_proficiency(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:MonsterBattleInfo)
 private:
  inline void set_has_physical_attack();
  inline void clear_has_physical_attack();
  inline void set_has_magic_attack();
  inline void clear_has_magic_attack();
  inline void set_has_skill_attack();
  inline void clear_has_skill_attack();
  inline void set_has_physical_defence();
  inline void clear_has_physical_defence();
  inline void set_has_magic_defence();
  inline void clear_has_magic_defence();
  inline void set_has_skill_defence();
  inline void clear_has_skill_defence();
  inline void set_has_health_point();
  inline void clear_has_health_point();
  inline void set_has_accurate();
  inline void clear_has_accurate();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_wreck();
  inline void clear_has_wreck();
  inline void set_has_parry();
  inline void clear_has_parry();
  inline void set_has_critical_strike();
  inline void clear_has_critical_strike();
  inline void set_has_tenacity();
  inline void clear_has_tenacity();
  inline void set_has_slay();
  inline void clear_has_slay();
  inline void set_has_proficiency();
  inline void clear_has_proficiency();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 physical_attack_;
  ::google::protobuf::uint32 magic_attack_;
  ::google::protobuf::uint32 skill_attack_;
  ::google::protobuf::uint32 physical_defence_;
  ::google::protobuf::uint32 magic_defence_;
  ::google::protobuf::uint32 skill_defence_;
  ::google::protobuf::uint32 health_point_;
  ::google::protobuf::uint32 accurate_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 wreck_;
  ::google::protobuf::uint32 parry_;
  ::google::protobuf::uint32 critical_strike_;
  ::google::protobuf::uint32 tenacity_;
  ::google::protobuf::uint32 slay_;
  ::google::protobuf::uint32 proficiency_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static MonsterBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class MonsterInfo : public ::google::protobuf::Message {
 public:
  MonsterInfo();
  virtual ~MonsterInfo();
  
  MonsterInfo(const MonsterInfo& from);
  
  inline MonsterInfo& operator=(const MonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterInfo& default_instance();
  
  void Swap(MonsterInfo* other);
  
  // implements Message ----------------------------------------------
  
  MonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterInfo& from);
  void MergeFrom(const MonsterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // optional uint32 speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:MonsterInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_speed();
  inline void clear_has_speed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 speed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static MonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleCreateRsp : public ::google::protobuf::Message {
 public:
  CSBattleCreateRsp();
  virtual ~CSBattleCreateRsp();
  
  CSBattleCreateRsp(const CSBattleCreateRsp& from);
  
  inline CSBattleCreateRsp& operator=(const CSBattleCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleCreateRsp& default_instance();
  
  void Swap(CSBattleCreateRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleCreateRsp& from);
  void MergeFrom(const CSBattleCreateRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .BasicUserInfo userinfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::BasicUserInfo& userinfo() const;
  inline ::BasicUserInfo* mutable_userinfo();
  inline ::BasicUserInfo* release_userinfo();
  
  // optional uint32 map_id = 2;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);
  
  // optional uint32 timeout = 3;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattleCreateRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BasicUserInfo* userinfo_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 timeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMonsterCreateReq : public ::google::protobuf::Message {
 public:
  CSBattleMonsterCreateReq();
  virtual ~CSBattleMonsterCreateReq();
  
  CSBattleMonsterCreateReq(const CSBattleMonsterCreateReq& from);
  
  inline CSBattleMonsterCreateReq& operator=(const CSBattleMonsterCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMonsterCreateReq& default_instance();
  
  void Swap(CSBattleMonsterCreateReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleMonsterCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMonsterCreateReq& from);
  void MergeFrom(const CSBattleMonsterCreateReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .MonsterInfo monsterinfo = 1;
  inline int monsterinfo_size() const;
  inline void clear_monsterinfo();
  static const int kMonsterinfoFieldNumber = 1;
  inline const ::MonsterInfo& monsterinfo(int index) const;
  inline ::MonsterInfo* mutable_monsterinfo(int index);
  inline ::MonsterInfo* add_monsterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
      monsterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
      mutable_monsterinfo();
  
  // required .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // @@protoc_insertion_point(class_scope:CSBattleMonsterCreateReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::MonsterInfo > monsterinfo_;
  ::CSPoint* pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleMonsterCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleMonsterCreateRsp : public ::google::protobuf::Message {
 public:
  CSBattleMonsterCreateRsp();
  virtual ~CSBattleMonsterCreateRsp();
  
  CSBattleMonsterCreateRsp(const CSBattleMonsterCreateRsp& from);
  
  inline CSBattleMonsterCreateRsp& operator=(const CSBattleMonsterCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleMonsterCreateRsp& default_instance();
  
  void Swap(CSBattleMonsterCreateRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleMonsterCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleMonsterCreateRsp& from);
  void MergeFrom(const CSBattleMonsterCreateRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .MonsterInfo monsterinfo = 1;
  inline int monsterinfo_size() const;
  inline void clear_monsterinfo();
  static const int kMonsterinfoFieldNumber = 1;
  inline const ::MonsterInfo& monsterinfo(int index) const;
  inline ::MonsterInfo* mutable_monsterinfo(int index);
  inline ::MonsterInfo* add_monsterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
      monsterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
      mutable_monsterinfo();
  
  // required .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // @@protoc_insertion_point(class_scope:CSBattleMonsterCreateRsp)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::MonsterInfo > monsterinfo_;
  ::CSPoint* pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleMonsterCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSCastleInfo : public ::google::protobuf::Message {
 public:
  CSCastleInfo();
  virtual ~CSCastleInfo();
  
  CSCastleInfo(const CSCastleInfo& from);
  
  inline CSCastleInfo& operator=(const CSCastleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCastleInfo& default_instance();
  
  void Swap(CSCastleInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSCastleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCastleInfo& from);
  void MergeFrom(const CSCastleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCastleInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_blood();
  inline void clear_has_blood();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 blood_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSCastleInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleUserJoinReq : public ::google::protobuf::Message {
 public:
  CSBattleUserJoinReq();
  virtual ~CSBattleUserJoinReq();
  
  CSBattleUserJoinReq(const CSBattleUserJoinReq& from);
  
  inline CSBattleUserJoinReq& operator=(const CSBattleUserJoinReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleUserJoinReq& default_instance();
  
  void Swap(CSBattleUserJoinReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleUserJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleUserJoinReq& from);
  void MergeFrom(const CSBattleUserJoinReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 roomId = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattleUserJoinReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 roomid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleUserJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleUserJoinRsp : public ::google::protobuf::Message {
 public:
  CSBattleUserJoinRsp();
  virtual ~CSBattleUserJoinRsp();
  
  CSBattleUserJoinRsp(const CSBattleUserJoinRsp& from);
  
  inline CSBattleUserJoinRsp& operator=(const CSBattleUserJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleUserJoinRsp& default_instance();
  
  void Swap(CSBattleUserJoinRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleUserJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleUserJoinRsp& from);
  void MergeFrom(const CSBattleUserJoinRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .BasicUserInfo userinfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::BasicUserInfo& userinfo() const;
  inline ::BasicUserInfo* mutable_userinfo();
  inline ::BasicUserInfo* release_userinfo();
  
  // repeated .MonsterInfo monsterinfo = 2;
  inline int monsterinfo_size() const;
  inline void clear_monsterinfo();
  static const int kMonsterinfoFieldNumber = 2;
  inline const ::MonsterInfo& monsterinfo(int index) const;
  inline ::MonsterInfo* mutable_monsterinfo(int index);
  inline ::MonsterInfo* add_monsterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
      monsterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
      mutable_monsterinfo();
  
  // optional .CSCastleInfo castleinfo = 3;
  inline bool has_castleinfo() const;
  inline void clear_castleinfo();
  static const int kCastleinfoFieldNumber = 3;
  inline const ::CSCastleInfo& castleinfo() const;
  inline ::CSCastleInfo* mutable_castleinfo();
  inline ::CSCastleInfo* release_castleinfo();
  
  // @@protoc_insertion_point(class_scope:CSBattleUserJoinRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_castleinfo();
  inline void clear_has_castleinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BasicUserInfo* userinfo_;
  ::google::protobuf::RepeatedPtrField< ::MonsterInfo > monsterinfo_;
  ::CSCastleInfo* castleinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleUserJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleUserLeaveRsp : public ::google::protobuf::Message {
 public:
  CSBattleUserLeaveRsp();
  virtual ~CSBattleUserLeaveRsp();
  
  CSBattleUserLeaveRsp(const CSBattleUserLeaveRsp& from);
  
  inline CSBattleUserLeaveRsp& operator=(const CSBattleUserLeaveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleUserLeaveRsp& default_instance();
  
  void Swap(CSBattleUserLeaveRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleUserLeaveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleUserLeaveRsp& from);
  void MergeFrom(const CSBattleUserLeaveRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // optional uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // optional uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattleUserLeaveRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleUserLeaveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLoadCompleteReq : public ::google::protobuf::Message {
 public:
  CSBattleLoadCompleteReq();
  virtual ~CSBattleLoadCompleteReq();
  
  CSBattleLoadCompleteReq(const CSBattleLoadCompleteReq& from);
  
  inline CSBattleLoadCompleteReq& operator=(const CSBattleLoadCompleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLoadCompleteReq& default_instance();
  
  void Swap(CSBattleLoadCompleteReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleLoadCompleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLoadCompleteReq& from);
  void MergeFrom(const CSBattleLoadCompleteReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSBattleLoadCompleteReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleLoadCompleteReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLoadCompleteRsp : public ::google::protobuf::Message {
 public:
  CSBattleLoadCompleteRsp();
  virtual ~CSBattleLoadCompleteRsp();
  
  CSBattleLoadCompleteRsp(const CSBattleLoadCompleteRsp& from);
  
  inline CSBattleLoadCompleteRsp& operator=(const CSBattleLoadCompleteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLoadCompleteRsp& default_instance();
  
  void Swap(CSBattleLoadCompleteRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleLoadCompleteRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLoadCompleteRsp& from);
  void MergeFrom(const CSBattleLoadCompleteRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool timeout = 1;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  inline bool timeout() const;
  inline void set_timeout(bool value);
  
  // @@protoc_insertion_point(class_scope:CSBattleLoadCompleteRsp)
 private:
  inline void set_has_timeout();
  inline void clear_has_timeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool timeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleLoadCompleteRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLeaveReq : public ::google::protobuf::Message {
 public:
  CSBattleLeaveReq();
  virtual ~CSBattleLeaveReq();
  
  CSBattleLeaveReq(const CSBattleLeaveReq& from);
  
  inline CSBattleLeaveReq& operator=(const CSBattleLeaveReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLeaveReq& default_instance();
  
  void Swap(CSBattleLeaveReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleLeaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLeaveReq& from);
  void MergeFrom(const CSBattleLeaveReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSBattleLeaveReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleLeaveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleLeaveRsp : public ::google::protobuf::Message {
 public:
  CSBattleLeaveRsp();
  virtual ~CSBattleLeaveRsp();
  
  CSBattleLeaveRsp(const CSBattleLeaveRsp& from);
  
  inline CSBattleLeaveRsp& operator=(const CSBattleLeaveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleLeaveRsp& default_instance();
  
  void Swap(CSBattleLeaveRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleLeaveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleLeaveRsp& from);
  void MergeFrom(const CSBattleLeaveRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool initiative = 1;
  inline bool has_initiative() const;
  inline void clear_initiative();
  static const int kInitiativeFieldNumber = 1;
  inline bool initiative() const;
  inline void set_initiative(bool value);
  
  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);
  
  // optional uint32 finish_time = 3;
  inline bool has_finish_time() const;
  inline void clear_finish_time();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finish_time() const;
  inline void set_finish_time(::google::protobuf::uint32 value);
  
  // optional uint32 dead_mon_num = 4;
  inline bool has_dead_mon_num() const;
  inline void clear_dead_mon_num();
  static const int kDeadMonNumFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_mon_num() const;
  inline void set_dead_mon_num(::google::protobuf::uint32 value);
  
  // optional .CSReward rewards = 5;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 5;
  inline const ::CSReward& rewards() const;
  inline ::CSReward* mutable_rewards();
  inline ::CSReward* release_rewards();
  
  // @@protoc_insertion_point(class_scope:CSBattleLeaveRsp)
 private:
  inline void set_has_initiative();
  inline void clear_has_initiative();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_finish_time();
  inline void clear_has_finish_time();
  inline void set_has_dead_mon_num();
  inline void clear_has_dead_mon_num();
  inline void set_has_rewards();
  inline void clear_has_rewards();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool initiative_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 finish_time_;
  ::google::protobuf::uint32 dead_mon_num_;
  ::CSReward* rewards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleLeaveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattleTimeoutRsp : public ::google::protobuf::Message {
 public:
  CSBattleTimeoutRsp();
  virtual ~CSBattleTimeoutRsp();
  
  CSBattleTimeoutRsp(const CSBattleTimeoutRsp& from);
  
  inline CSBattleTimeoutRsp& operator=(const CSBattleTimeoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattleTimeoutRsp& default_instance();
  
  void Swap(CSBattleTimeoutRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattleTimeoutRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattleTimeoutRsp& from);
  void MergeFrom(const CSBattleTimeoutRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSBattleTimeoutRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattleTimeoutRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattlePlayerDelRsp : public ::google::protobuf::Message {
 public:
  CSBattlePlayerDelRsp();
  virtual ~CSBattlePlayerDelRsp();
  
  CSBattlePlayerDelRsp(const CSBattlePlayerDelRsp& from);
  
  inline CSBattlePlayerDelRsp& operator=(const CSBattlePlayerDelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattlePlayerDelRsp& default_instance();
  
  void Swap(CSBattlePlayerDelRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattlePlayerDelRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattlePlayerDelRsp& from);
  void MergeFrom(const CSBattlePlayerDelRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 exchange_id = 4;
  inline bool has_exchange_id() const;
  inline void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 4;
  inline ::google::protobuf::uint32 exchange_id() const;
  inline void set_exchange_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattlePlayerDelRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_exchange_id();
  inline void clear_has_exchange_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 exchange_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattlePlayerDelRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBattlePlayerRevivalReq : public ::google::protobuf::Message {
 public:
  CSBattlePlayerRevivalReq();
  virtual ~CSBattlePlayerRevivalReq();
  
  CSBattlePlayerRevivalReq(const CSBattlePlayerRevivalReq& from);
  
  inline CSBattlePlayerRevivalReq& operator=(const CSBattlePlayerRevivalReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattlePlayerRevivalReq& default_instance();
  
  void Swap(CSBattlePlayerRevivalReq* other);
  
  // implements Message ----------------------------------------------
  
  CSBattlePlayerRevivalReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattlePlayerRevivalReq& from);
  void MergeFrom(const CSBattlePlayerRevivalReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSBattlePlayerRevivalReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattlePlayerRevivalReq* default_instance_;
};
// -------------------------------------------------------------------

class CSBattlePlayerRevivalRsp : public ::google::protobuf::Message {
 public:
  CSBattlePlayerRevivalRsp();
  virtual ~CSBattlePlayerRevivalRsp();
  
  CSBattlePlayerRevivalRsp(const CSBattlePlayerRevivalRsp& from);
  
  inline CSBattlePlayerRevivalRsp& operator=(const CSBattlePlayerRevivalRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBattlePlayerRevivalRsp& default_instance();
  
  void Swap(CSBattlePlayerRevivalRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBattlePlayerRevivalRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBattlePlayerRevivalRsp& from);
  void MergeFrom(const CSBattlePlayerRevivalRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSBattlePlayerRevivalRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBattlePlayerRevivalRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterMoveReq : public ::google::protobuf::Message {
 public:
  CSMonsterMoveReq();
  virtual ~CSMonsterMoveReq();
  
  CSMonsterMoveReq(const CSMonsterMoveReq& from);
  
  inline CSMonsterMoveReq& operator=(const CSMonsterMoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterMoveReq& default_instance();
  
  void Swap(CSMonsterMoveReq* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterMoveReq& from);
  void MergeFrom(const CSMonsterMoveReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline ::google::protobuf::uint32 direct() const;
  inline void set_direct(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterMoveReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direct();
  inline void clear_has_direct();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 direct_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterMoveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterMoveRsp : public ::google::protobuf::Message {
 public:
  CSMonsterMoveRsp();
  virtual ~CSMonsterMoveRsp();
  
  CSMonsterMoveRsp(const CSMonsterMoveRsp& from);
  
  inline CSMonsterMoveRsp& operator=(const CSMonsterMoveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterMoveRsp& default_instance();
  
  void Swap(CSMonsterMoveRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterMoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterMoveRsp& from);
  void MergeFrom(const CSMonsterMoveRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline ::google::protobuf::uint32 direct() const;
  inline void set_direct(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterMoveRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direct();
  inline void clear_has_direct();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 direct_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterMoveRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterCreateReq : public ::google::protobuf::Message {
 public:
  CSMonsterCreateReq();
  virtual ~CSMonsterCreateReq();
  
  CSMonsterCreateReq(const CSMonsterCreateReq& from);
  
  inline CSMonsterCreateReq& operator=(const CSMonsterCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterCreateReq& default_instance();
  
  void Swap(CSMonsterCreateReq* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterCreateReq& from);
  void MergeFrom(const CSMonsterCreateReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // @@protoc_insertion_point(class_scope:CSMonsterCreateReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterCreateRsp : public ::google::protobuf::Message {
 public:
  CSMonsterCreateRsp();
  virtual ~CSMonsterCreateRsp();
  
  CSMonsterCreateRsp(const CSMonsterCreateRsp& from);
  
  inline CSMonsterCreateRsp& operator=(const CSMonsterCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterCreateRsp& default_instance();
  
  void Swap(CSMonsterCreateRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterCreateRsp& from);
  void MergeFrom(const CSMonsterCreateRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // optional uint32 id_in_map = 3;
  inline bool has_id_in_map() const;
  inline void clear_id_in_map();
  static const int kIdInMapFieldNumber = 3;
  inline ::google::protobuf::uint32 id_in_map() const;
  inline void set_id_in_map(::google::protobuf::uint32 value);
  
  // optional bool side = 4;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 4;
  inline bool side() const;
  inline void set_side(bool value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterCreateRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id_in_map();
  inline void clear_has_id_in_map();
  inline void set_has_side();
  inline void clear_has_side();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 id_in_map_;
  bool side_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class AttackMonsterInfo : public ::google::protobuf::Message {
 public:
  AttackMonsterInfo();
  virtual ~AttackMonsterInfo();
  
  AttackMonsterInfo(const AttackMonsterInfo& from);
  
  inline AttackMonsterInfo& operator=(const AttackMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackMonsterInfo& default_instance();
  
  void Swap(AttackMonsterInfo* other);
  
  // implements Message ----------------------------------------------
  
  AttackMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackMonsterInfo& from);
  void MergeFrom(const AttackMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // optional uint32 blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 hurt_type = 5;
  inline bool has_hurt_type() const;
  inline void clear_hurt_type();
  static const int kHurtTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 hurt_type() const;
  inline void set_hurt_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:AttackMonsterInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_hurt_type();
  inline void clear_has_hurt_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 hurt_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static AttackMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitMonsterReq : public ::google::protobuf::Message {
 public:
  CSMonsterHitMonsterReq();
  virtual ~CSMonsterHitMonsterReq();
  
  CSMonsterHitMonsterReq(const CSMonsterHitMonsterReq& from);
  
  inline CSMonsterHitMonsterReq& operator=(const CSMonsterHitMonsterReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitMonsterReq& default_instance();
  
  void Swap(CSMonsterHitMonsterReq* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterHitMonsterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitMonsterReq& from);
  void MergeFrom(const CSMonsterHitMonsterReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // optional uint32 action_id = 3;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // repeated .AttackMonsterInfo users = 4;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 4;
  inline const ::AttackMonsterInfo& users(int index) const;
  inline ::AttackMonsterInfo* mutable_users(int index);
  inline ::AttackMonsterInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:CSMonsterHitMonsterReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterHitMonsterReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitMonsterRsp : public ::google::protobuf::Message {
 public:
  CSMonsterHitMonsterRsp();
  virtual ~CSMonsterHitMonsterRsp();
  
  CSMonsterHitMonsterRsp(const CSMonsterHitMonsterRsp& from);
  
  inline CSMonsterHitMonsterRsp& operator=(const CSMonsterHitMonsterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitMonsterRsp& default_instance();
  
  void Swap(CSMonsterHitMonsterRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterHitMonsterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitMonsterRsp& from);
  void MergeFrom(const CSMonsterHitMonsterRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // optional uint32 action_id = 3;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // repeated .AttackMonsterInfo users = 4;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 4;
  inline const ::AttackMonsterInfo& users(int index) const;
  inline ::AttackMonsterInfo* mutable_users(int index);
  inline ::AttackMonsterInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:CSMonsterHitMonsterRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterHitMonsterRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSSMonsterHPReq : public ::google::protobuf::Message {
 public:
  CSSMonsterHPReq();
  virtual ~CSSMonsterHPReq();
  
  CSSMonsterHPReq(const CSSMonsterHPReq& from);
  
  inline CSSMonsterHPReq& operator=(const CSSMonsterHPReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSMonsterHPReq& default_instance();
  
  void Swap(CSSMonsterHPReq* other);
  
  // implements Message ----------------------------------------------
  
  CSSMonsterHPReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSMonsterHPReq& from);
  void MergeFrom(const CSSMonsterHPReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional int32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CSSMonsterHPReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_blood();
  inline void clear_has_blood();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 blood_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSSMonsterHPReq* default_instance_;
};
// -------------------------------------------------------------------

class CSSMonsterHPRsp : public ::google::protobuf::Message {
 public:
  CSSMonsterHPRsp();
  virtual ~CSSMonsterHPRsp();
  
  CSSMonsterHPRsp(const CSSMonsterHPRsp& from);
  
  inline CSSMonsterHPRsp& operator=(const CSSMonsterHPRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSMonsterHPRsp& default_instance();
  
  void Swap(CSSMonsterHPRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSSMonsterHPRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSMonsterHPRsp& from);
  void MergeFrom(const CSSMonsterHPRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional int32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CSSMonsterHPRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_blood();
  inline void clear_has_blood();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 blood_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSSMonsterHPRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterDieReq : public ::google::protobuf::Message {
 public:
  CSMonsterDieReq();
  virtual ~CSMonsterDieReq();
  
  CSMonsterDieReq(const CSMonsterDieReq& from);
  
  inline CSMonsterDieReq& operator=(const CSMonsterDieReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterDieReq& default_instance();
  
  void Swap(CSMonsterDieReq* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterDieReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterDieReq& from);
  void MergeFrom(const CSMonsterDieReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:CSMonsterDieReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterDieReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterDieRsp : public ::google::protobuf::Message {
 public:
  CSMonsterDieRsp();
  virtual ~CSMonsterDieRsp();
  
  CSMonsterDieRsp(const CSMonsterDieRsp& from);
  
  inline CSMonsterDieRsp& operator=(const CSMonsterDieRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterDieRsp& default_instance();
  
  void Swap(CSMonsterDieRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterDieRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterDieRsp& from);
  void MergeFrom(const CSMonsterDieRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:CSMonsterDieRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterDieRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitCastleReq : public ::google::protobuf::Message {
 public:
  CSMonsterHitCastleReq();
  virtual ~CSMonsterHitCastleReq();
  
  CSMonsterHitCastleReq(const CSMonsterHitCastleReq& from);
  
  inline CSMonsterHitCastleReq& operator=(const CSMonsterHitCastleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitCastleReq& default_instance();
  
  void Swap(CSMonsterHitCastleReq* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterHitCastleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitCastleReq& from);
  void MergeFrom(const CSMonsterHitCastleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CSCastleInfo castleinfo = 1;
  inline bool has_castleinfo() const;
  inline void clear_castleinfo();
  static const int kCastleinfoFieldNumber = 1;
  inline const ::CSCastleInfo& castleinfo() const;
  inline ::CSCastleInfo* mutable_castleinfo();
  inline ::CSCastleInfo* release_castleinfo();
  
  // repeated uint32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:CSMonsterHitCastleReq)
 private:
  inline void set_has_castleinfo();
  inline void clear_has_castleinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSCastleInfo* castleinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterHitCastleReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitCastleRsp : public ::google::protobuf::Message {
 public:
  CSMonsterHitCastleRsp();
  virtual ~CSMonsterHitCastleRsp();
  
  CSMonsterHitCastleRsp(const CSMonsterHitCastleRsp& from);
  
  inline CSMonsterHitCastleRsp& operator=(const CSMonsterHitCastleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitCastleRsp& default_instance();
  
  void Swap(CSMonsterHitCastleRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterHitCastleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitCastleRsp& from);
  void MergeFrom(const CSMonsterHitCastleRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CSCastleInfo castleinfo = 1;
  inline bool has_castleinfo() const;
  inline void clear_castleinfo();
  static const int kCastleinfoFieldNumber = 1;
  inline const ::CSCastleInfo& castleinfo() const;
  inline ::CSCastleInfo* mutable_castleinfo();
  inline ::CSCastleInfo* release_castleinfo();
  
  // repeated uint32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:CSMonsterHitCastleRsp)
 private:
  inline void set_has_castleinfo();
  inline void clear_has_castleinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSCastleInfo* castleinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterHitCastleRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSCastleDieReq : public ::google::protobuf::Message {
 public:
  CSCastleDieReq();
  virtual ~CSCastleDieReq();
  
  CSCastleDieReq(const CSCastleDieReq& from);
  
  inline CSCastleDieReq& operator=(const CSCastleDieReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCastleDieReq& default_instance();
  
  void Swap(CSCastleDieReq* other);
  
  // implements Message ----------------------------------------------
  
  CSCastleDieReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCastleDieReq& from);
  void MergeFrom(const CSCastleDieReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCastleDieReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSCastleDieReq* default_instance_;
};
// -------------------------------------------------------------------

class CSCastleDieRsp : public ::google::protobuf::Message {
 public:
  CSCastleDieRsp();
  virtual ~CSCastleDieRsp();
  
  CSCastleDieRsp(const CSCastleDieRsp& from);
  
  inline CSCastleDieRsp& operator=(const CSCastleDieRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCastleDieRsp& default_instance();
  
  void Swap(CSCastleDieRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSCastleDieRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCastleDieRsp& from);
  void MergeFrom(const CSCastleDieRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSCastleDieRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSCastleDieRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterAttackInfo : public ::google::protobuf::Message {
 public:
  CSMonsterAttackInfo();
  virtual ~CSMonsterAttackInfo();
  
  CSMonsterAttackInfo(const CSMonsterAttackInfo& from);
  
  inline CSMonsterAttackInfo& operator=(const CSMonsterAttackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterAttackInfo& default_instance();
  
  void Swap(CSMonsterAttackInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterAttackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterAttackInfo& from);
  void MergeFrom(const CSMonsterAttackInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .CSPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // required .CSPoint direct = 3;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 3;
  inline const ::CSPoint& direct() const;
  inline ::CSPoint* mutable_direct();
  inline ::CSPoint* release_direct();
  
  // required uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 userid = 6;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 6;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 7;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 8;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 8;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_id = 9;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 9;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);
  
  // optional uint32 effect_id = 10;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 10;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);
  
  // optional .CSPoint start_pos = 11;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 11;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  
  // optional .CSPoint end_pos = 12;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 12;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  
  // optional uint32 skill_speed = 13;
  inline bool has_skill_speed() const;
  inline void clear_skill_speed();
  static const int kSkillSpeedFieldNumber = 13;
  inline ::google::protobuf::uint32 skill_speed() const;
  inline void set_skill_speed(::google::protobuf::uint32 value);
  
  // optional uint32 delay_time = 14;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 delay_time() const;
  inline void set_delay_time(::google::protobuf::uint32 value);
  
  // optional uint32 dead_time = 15;
  inline bool has_dead_time() const;
  inline void clear_dead_time();
  static const int kDeadTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 dead_time() const;
  inline void set_dead_time(::google::protobuf::uint32 value);
  
  // repeated uint32 shake_time = 16;
  inline int shake_time_size() const;
  inline void clear_shake_time();
  static const int kShakeTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 shake_time(int index) const;
  inline void set_shake_time(int index, ::google::protobuf::uint32 value);
  inline void add_shake_time(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shake_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shake_time();
  
  // @@protoc_insertion_point(class_scope:CSMonsterAttackInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_skill_speed();
  inline void clear_has_skill_speed();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_dead_time();
  inline void clear_has_dead_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CSPoint* pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* direct_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 effect_id_;
  ::CSPoint* start_pos_;
  ::CSPoint* end_pos_;
  ::google::protobuf::uint32 skill_speed_;
  ::google::protobuf::uint32 delay_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shake_time_;
  ::google::protobuf::uint32 dead_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterAttackInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterEffectInfo : public ::google::protobuf::Message {
 public:
  CSMonsterEffectInfo();
  virtual ~CSMonsterEffectInfo();
  
  CSMonsterEffectInfo(const CSMonsterEffectInfo& from);
  
  inline CSMonsterEffectInfo& operator=(const CSMonsterEffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterEffectInfo& default_instance();
  
  void Swap(CSMonsterEffectInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterEffectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterEffectInfo& from);
  void MergeFrom(const CSMonsterEffectInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 effect_id = 2;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 2;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);
  
  // optional .CSPoint start_pos = 3;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 3;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  
  // optional .CSPoint end_pos = 4;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 4;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  
  // optional uint32 skill_speed = 5;
  inline bool has_skill_speed() const;
  inline void clear_skill_speed();
  static const int kSkillSpeedFieldNumber = 5;
  inline ::google::protobuf::uint32 skill_speed() const;
  inline void set_skill_speed(::google::protobuf::uint32 value);
  
  // optional uint32 delay_time = 6;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 delay_time() const;
  inline void set_delay_time(::google::protobuf::uint32 value);
  
  // optional uint32 id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterEffectInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_skill_speed();
  inline void clear_has_skill_speed();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 effect_id_;
  ::CSPoint* start_pos_;
  ::CSPoint* end_pos_;
  ::google::protobuf::uint32 skill_speed_;
  ::google::protobuf::uint32 delay_time_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterEffectInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterAttackRsp : public ::google::protobuf::Message {
 public:
  CSMonsterAttackRsp();
  virtual ~CSMonsterAttackRsp();
  
  CSMonsterAttackRsp(const CSMonsterAttackRsp& from);
  
  inline CSMonsterAttackRsp& operator=(const CSMonsterAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterAttackRsp& default_instance();
  
  void Swap(CSMonsterAttackRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterAttackRsp& from);
  void MergeFrom(const CSMonsterAttackRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .CSMonsterAttackInfo attacks = 1;
  inline int attacks_size() const;
  inline void clear_attacks();
  static const int kAttacksFieldNumber = 1;
  inline const ::CSMonsterAttackInfo& attacks(int index) const;
  inline ::CSMonsterAttackInfo* mutable_attacks(int index);
  inline ::CSMonsterAttackInfo* add_attacks();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >&
      attacks() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >*
      mutable_attacks();
  
  // @@protoc_insertion_point(class_scope:CSMonsterAttackRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo > attacks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterEffectRsp : public ::google::protobuf::Message {
 public:
  CSMonsterEffectRsp();
  virtual ~CSMonsterEffectRsp();
  
  CSMonsterEffectRsp(const CSMonsterEffectRsp& from);
  
  inline CSMonsterEffectRsp& operator=(const CSMonsterEffectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterEffectRsp& default_instance();
  
  void Swap(CSMonsterEffectRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterEffectRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterEffectRsp& from);
  void MergeFrom(const CSMonsterEffectRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .CSMonsterEffectInfo effects = 1;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 1;
  inline const ::CSMonsterEffectInfo& effects(int index) const;
  inline ::CSMonsterEffectInfo* mutable_effects(int index);
  inline ::CSMonsterEffectInfo* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >*
      mutable_effects();
  
  // @@protoc_insertion_point(class_scope:CSMonsterEffectRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo > effects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterEffectRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterBuffEffectInfo_BuffEffectInfo : public ::google::protobuf::Message {
 public:
  CSMonsterBuffEffectInfo_BuffEffectInfo();
  virtual ~CSMonsterBuffEffectInfo_BuffEffectInfo();
  
  CSMonsterBuffEffectInfo_BuffEffectInfo(const CSMonsterBuffEffectInfo_BuffEffectInfo& from);
  
  inline CSMonsterBuffEffectInfo_BuffEffectInfo& operator=(const CSMonsterBuffEffectInfo_BuffEffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterBuffEffectInfo_BuffEffectInfo& default_instance();
  
  void Swap(CSMonsterBuffEffectInfo_BuffEffectInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterBuffEffectInfo_BuffEffectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterBuffEffectInfo_BuffEffectInfo& from);
  void MergeFrom(const CSMonsterBuffEffectInfo_BuffEffectInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .MonsterBattleInfo battle_info = 2;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 2;
  inline const ::MonsterBattleInfo& battle_info() const;
  inline ::MonsterBattleInfo* mutable_battle_info();
  inline ::MonsterBattleInfo* release_battle_info();
  
  // @@protoc_insertion_point(class_scope:CSMonsterBuffEffectInfo.BuffEffectInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battle_info();
  inline void clear_has_battle_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::MonsterBattleInfo* battle_info_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterBuffEffectInfo_BuffEffectInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterBuffEffectInfo : public ::google::protobuf::Message {
 public:
  CSMonsterBuffEffectInfo();
  virtual ~CSMonsterBuffEffectInfo();
  
  CSMonsterBuffEffectInfo(const CSMonsterBuffEffectInfo& from);
  
  inline CSMonsterBuffEffectInfo& operator=(const CSMonsterBuffEffectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterBuffEffectInfo& default_instance();
  
  void Swap(CSMonsterBuffEffectInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterBuffEffectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterBuffEffectInfo& from);
  void MergeFrom(const CSMonsterBuffEffectInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSMonsterBuffEffectInfo_BuffEffectInfo BuffEffectInfo;
  
  // accessors -------------------------------------------------------
  
  // required uint32 action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // required uint32 effect_id = 2;
  inline bool has_effect_id() const;
  inline void clear_effect_id();
  static const int kEffectIdFieldNumber = 2;
  inline ::google::protobuf::uint32 effect_id() const;
  inline void set_effect_id(::google::protobuf::uint32 value);
  
  // required uint32 delay_time = 3;
  inline bool has_delay_time() const;
  inline void clear_delay_time();
  static const int kDelayTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 delay_time() const;
  inline void set_delay_time(::google::protobuf::uint32 value);
  
  // required uint32 dead_time = 4;
  inline bool has_dead_time() const;
  inline void clear_dead_time();
  static const int kDeadTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_time() const;
  inline void set_dead_time(::google::protobuf::uint32 value);
  
  // repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
  inline int buff_info_size() const;
  inline void clear_buff_info();
  static const int kBuffInfoFieldNumber = 5;
  inline const ::CSMonsterBuffEffectInfo_BuffEffectInfo& buff_info(int index) const;
  inline ::CSMonsterBuffEffectInfo_BuffEffectInfo* mutable_buff_info(int index);
  inline ::CSMonsterBuffEffectInfo_BuffEffectInfo* add_buff_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo_BuffEffectInfo >&
      buff_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo_BuffEffectInfo >*
      mutable_buff_info();
  
  // required uint32 skill_id = 6;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 6;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterBuffEffectInfo)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_effect_id();
  inline void clear_has_effect_id();
  inline void set_has_delay_time();
  inline void clear_has_delay_time();
  inline void set_has_dead_time();
  inline void clear_has_dead_time();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 action_id_;
  ::google::protobuf::uint32 effect_id_;
  ::google::protobuf::uint32 delay_time_;
  ::google::protobuf::uint32 dead_time_;
  ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo_BuffEffectInfo > buff_info_;
  ::google::protobuf::uint32 skill_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterBuffEffectInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSBuffEffectRsp : public ::google::protobuf::Message {
 public:
  CSBuffEffectRsp();
  virtual ~CSBuffEffectRsp();
  
  CSBuffEffectRsp(const CSBuffEffectRsp& from);
  
  inline CSBuffEffectRsp& operator=(const CSBuffEffectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSBuffEffectRsp& default_instance();
  
  void Swap(CSBuffEffectRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSBuffEffectRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSBuffEffectRsp& from);
  void MergeFrom(const CSBuffEffectRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .CSMonsterBuffEffectInfo effects = 1;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 1;
  inline const ::CSMonsterBuffEffectInfo& effects(int index) const;
  inline ::CSMonsterBuffEffectInfo* mutable_effects(int index);
  inline ::CSMonsterBuffEffectInfo* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo >*
      mutable_effects();
  
  // @@protoc_insertion_point(class_scope:CSBuffEffectRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo > effects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSBuffEffectRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitRsp_UserInfo : public ::google::protobuf::Message {
 public:
  CSMonsterHitRsp_UserInfo();
  virtual ~CSMonsterHitRsp_UserInfo();
  
  CSMonsterHitRsp_UserInfo(const CSMonsterHitRsp_UserInfo& from);
  
  inline CSMonsterHitRsp_UserInfo& operator=(const CSMonsterHitRsp_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitRsp_UserInfo& default_instance();
  
  void Swap(CSMonsterHitRsp_UserInfo* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterHitRsp_UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitRsp_UserInfo& from);
  void MergeFrom(const CSMonsterHitRsp_UserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hurt_type = 1;
  inline bool has_hurt_type() const;
  inline void clear_hurt_type();
  static const int kHurtTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 hurt_type() const;
  inline void set_hurt_type(::google::protobuf::uint32 value);
  
  // required uint32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 3;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 4;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 4;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 blood = 5;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 5;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // required uint32 rage_point = 6;
  inline bool has_rage_point() const;
  inline void clear_rage_point();
  static const int kRagePointFieldNumber = 6;
  inline ::google::protobuf::uint32 rage_point() const;
  inline void set_rage_point(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSMonsterHitRsp.UserInfo)
 private:
  inline void set_has_hurt_type();
  inline void clear_has_hurt_type();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_rage_point();
  inline void clear_has_rage_point();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hurt_type_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 rage_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterHitRsp_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterHitRsp : public ::google::protobuf::Message {
 public:
  CSMonsterHitRsp();
  virtual ~CSMonsterHitRsp();
  
  CSMonsterHitRsp(const CSMonsterHitRsp& from);
  
  inline CSMonsterHitRsp& operator=(const CSMonsterHitRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterHitRsp& default_instance();
  
  void Swap(CSMonsterHitRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterHitRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterHitRsp& from);
  void MergeFrom(const CSMonsterHitRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CSMonsterHitRsp_UserInfo UserInfo;
  
  // accessors -------------------------------------------------------
  
  // repeated .CSMonsterHitRsp.UserInfo users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::CSMonsterHitRsp_UserInfo& users(int index) const;
  inline ::CSMonsterHitRsp_UserInfo* mutable_users(int index);
  inline ::CSMonsterHitRsp_UserInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:CSMonsterHitRsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterHitRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSSkillBeginReq : public ::google::protobuf::Message {
 public:
  CSSkillBeginReq();
  virtual ~CSSkillBeginReq();
  
  CSSkillBeginReq(const CSSkillBeginReq& from);
  
  inline CSSkillBeginReq& operator=(const CSSkillBeginReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSkillBeginReq& default_instance();
  
  void Swap(CSSkillBeginReq* other);
  
  // implements Message ----------------------------------------------
  
  CSSkillBeginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSkillBeginReq& from);
  void MergeFrom(const CSSkillBeginReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // required .CSPoint pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // required float start_dir_x = 6;
  inline bool has_start_dir_x() const;
  inline void clear_start_dir_x();
  static const int kStartDirXFieldNumber = 6;
  inline float start_dir_x() const;
  inline void set_start_dir_x(float value);
  
  // required float start_dir_y = 7;
  inline bool has_start_dir_y() const;
  inline void clear_start_dir_y();
  static const int kStartDirYFieldNumber = 7;
  inline float start_dir_y() const;
  inline void set_start_dir_y(float value);
  
  // required .CSPoint target_pos = 8;
  inline bool has_target_pos() const;
  inline void clear_target_pos();
  static const int kTargetPosFieldNumber = 8;
  inline const ::CSPoint& target_pos() const;
  inline ::CSPoint* mutable_target_pos();
  inline ::CSPoint* release_target_pos();
  
  // required float direct_x = 9;
  inline bool has_direct_x() const;
  inline void clear_direct_x();
  static const int kDirectXFieldNumber = 9;
  inline float direct_x() const;
  inline void set_direct_x(float value);
  
  // required float direct_y = 10;
  inline bool has_direct_y() const;
  inline void clear_direct_y();
  static const int kDirectYFieldNumber = 10;
  inline float direct_y() const;
  inline void set_direct_y(float value);
  
  // required bool aim = 11;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 11;
  inline bool aim() const;
  inline void set_aim(bool value);
  
  // @@protoc_insertion_point(class_scope:CSSkillBeginReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_start_dir_x();
  inline void clear_has_start_dir_x();
  inline void set_has_start_dir_y();
  inline void clear_has_start_dir_y();
  inline void set_has_target_pos();
  inline void clear_has_target_pos();
  inline void set_has_direct_x();
  inline void clear_has_direct_x();
  inline void set_has_direct_y();
  inline void clear_has_direct_y();
  inline void set_has_aim();
  inline void clear_has_aim();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* pos_;
  float start_dir_x_;
  float start_dir_y_;
  ::CSPoint* target_pos_;
  float direct_x_;
  float direct_y_;
  bool aim_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSSkillBeginReq* default_instance_;
};
// -------------------------------------------------------------------

class CSSkillBeginRsp : public ::google::protobuf::Message {
 public:
  CSSkillBeginRsp();
  virtual ~CSSkillBeginRsp();
  
  CSSkillBeginRsp(const CSSkillBeginRsp& from);
  
  inline CSSkillBeginRsp& operator=(const CSSkillBeginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSkillBeginRsp& default_instance();
  
  void Swap(CSSkillBeginRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSSkillBeginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSkillBeginRsp& from);
  void MergeFrom(const CSSkillBeginRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // required .CSPoint pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::CSPoint& pos() const;
  inline ::CSPoint* mutable_pos();
  inline ::CSPoint* release_pos();
  
  // required float start_dir_x = 6;
  inline bool has_start_dir_x() const;
  inline void clear_start_dir_x();
  static const int kStartDirXFieldNumber = 6;
  inline float start_dir_x() const;
  inline void set_start_dir_x(float value);
  
  // required float start_dir_y = 7;
  inline bool has_start_dir_y() const;
  inline void clear_start_dir_y();
  static const int kStartDirYFieldNumber = 7;
  inline float start_dir_y() const;
  inline void set_start_dir_y(float value);
  
  // required .CSPoint target_pos = 8;
  inline bool has_target_pos() const;
  inline void clear_target_pos();
  static const int kTargetPosFieldNumber = 8;
  inline const ::CSPoint& target_pos() const;
  inline ::CSPoint* mutable_target_pos();
  inline ::CSPoint* release_target_pos();
  
  // required float direct_x = 9;
  inline bool has_direct_x() const;
  inline void clear_direct_x();
  static const int kDirectXFieldNumber = 9;
  inline float direct_x() const;
  inline void set_direct_x(float value);
  
  // required float direct_y = 10;
  inline bool has_direct_y() const;
  inline void clear_direct_y();
  static const int kDirectYFieldNumber = 10;
  inline float direct_y() const;
  inline void set_direct_y(float value);
  
  // required bool aim = 11;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 11;
  inline bool aim() const;
  inline void set_aim(bool value);
  
  // @@protoc_insertion_point(class_scope:CSSkillBeginRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_start_dir_x();
  inline void clear_has_start_dir_x();
  inline void set_has_start_dir_y();
  inline void clear_has_start_dir_y();
  inline void set_has_target_pos();
  inline void clear_has_target_pos();
  inline void set_has_direct_x();
  inline void clear_has_direct_x();
  inline void set_has_direct_y();
  inline void clear_has_direct_y();
  inline void set_has_aim();
  inline void clear_has_aim();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* pos_;
  float start_dir_x_;
  float start_dir_y_;
  ::CSPoint* target_pos_;
  float direct_x_;
  float direct_y_;
  bool aim_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSSkillBeginRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerAttackReq : public ::google::protobuf::Message {
 public:
  CSPlayerAttackReq();
  virtual ~CSPlayerAttackReq();
  
  CSPlayerAttackReq(const CSPlayerAttackReq& from);
  
  inline CSPlayerAttackReq& operator=(const CSPlayerAttackReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerAttackReq& default_instance();
  
  void Swap(CSPlayerAttackReq* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerAttackReq& from);
  void MergeFrom(const CSPlayerAttackReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required .CSPoint start_pos = 4;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 4;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  
  // required .CSPoint start_direct = 5;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 5;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  
  // required .CSPoint end_pos = 6;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 6;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  
  // required .CSPoint end_direct = 7;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 7;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  
  // required uint32 action_id = 8;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // repeated .AttackMonsterInfo monsters = 9;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 9;
  inline const ::AttackMonsterInfo& monsters(int index) const;
  inline ::AttackMonsterInfo* mutable_monsters(int index);
  inline ::AttackMonsterInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_monsters();
  
  // @@protoc_insertion_point(class_scope:CSPlayerAttackReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > monsters_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerAttackReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerAttackRsp : public ::google::protobuf::Message {
 public:
  CSPlayerAttackRsp();
  virtual ~CSPlayerAttackRsp();
  
  CSPlayerAttackRsp(const CSPlayerAttackRsp& from);
  
  inline CSPlayerAttackRsp& operator=(const CSPlayerAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerAttackRsp& default_instance();
  
  void Swap(CSPlayerAttackRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerAttackRsp& from);
  void MergeFrom(const CSPlayerAttackRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required .CSPoint start_pos = 4;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 4;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  
  // required .CSPoint start_direct = 5;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 5;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  
  // required .CSPoint end_pos = 6;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 6;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  
  // required .CSPoint end_direct = 7;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 7;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  
  // required uint32 action_id = 8;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // repeated .AttackMonsterInfo monsters = 9;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 9;
  inline const ::AttackMonsterInfo& monsters(int index) const;
  inline ::AttackMonsterInfo* mutable_monsters(int index);
  inline ::AttackMonsterInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_monsters();
  
  // @@protoc_insertion_point(class_scope:CSPlayerAttackRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > monsters_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

class AttackPlayerInfo : public ::google::protobuf::Message {
 public:
  AttackPlayerInfo();
  virtual ~AttackPlayerInfo();
  
  AttackPlayerInfo(const AttackPlayerInfo& from);
  
  inline AttackPlayerInfo& operator=(const AttackPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackPlayerInfo& default_instance();
  
  void Swap(AttackPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  AttackPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackPlayerInfo& from);
  void MergeFrom(const AttackPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 blood = 4;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 4;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // required uint32 hurt_type = 5;
  inline bool has_hurt_type() const;
  inline void clear_hurt_type();
  static const int kHurtTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 hurt_type() const;
  inline void set_hurt_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:AttackPlayerInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_hurt_type();
  inline void clear_has_hurt_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 hurt_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static AttackPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHitPlayerReq : public ::google::protobuf::Message {
 public:
  CSPlayerHitPlayerReq();
  virtual ~CSPlayerHitPlayerReq();
  
  CSPlayerHitPlayerReq(const CSPlayerHitPlayerReq& from);
  
  inline CSPlayerHitPlayerReq& operator=(const CSPlayerHitPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHitPlayerReq& default_instance();
  
  void Swap(CSPlayerHitPlayerReq* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerHitPlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHitPlayerReq& from);
  void MergeFrom(const CSPlayerHitPlayerReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required .CSPoint start_pos = 4;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 4;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  
  // required .CSPoint start_direct = 5;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 5;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  
  // required .CSPoint end_pos = 6;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 6;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  
  // required .CSPoint end_direct = 7;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 7;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  
  // required uint32 action_id = 8;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // repeated .AttackPlayerInfo users = 9;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 9;
  inline const ::AttackPlayerInfo& users(int index) const;
  inline ::AttackPlayerInfo* mutable_users(int index);
  inline ::AttackPlayerInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:CSPlayerHitPlayerReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerHitPlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHitPlayerRsp : public ::google::protobuf::Message {
 public:
  CSPlayerHitPlayerRsp();
  virtual ~CSPlayerHitPlayerRsp();
  
  CSPlayerHitPlayerRsp(const CSPlayerHitPlayerRsp& from);
  
  inline CSPlayerHitPlayerRsp& operator=(const CSPlayerHitPlayerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHitPlayerRsp& default_instance();
  
  void Swap(CSPlayerHitPlayerRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerHitPlayerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHitPlayerRsp& from);
  void MergeFrom(const CSPlayerHitPlayerRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required .CSPoint start_pos = 4;
  inline bool has_start_pos() const;
  inline void clear_start_pos();
  static const int kStartPosFieldNumber = 4;
  inline const ::CSPoint& start_pos() const;
  inline ::CSPoint* mutable_start_pos();
  inline ::CSPoint* release_start_pos();
  
  // required .CSPoint start_direct = 5;
  inline bool has_start_direct() const;
  inline void clear_start_direct();
  static const int kStartDirectFieldNumber = 5;
  inline const ::CSPoint& start_direct() const;
  inline ::CSPoint* mutable_start_direct();
  inline ::CSPoint* release_start_direct();
  
  // required .CSPoint end_pos = 6;
  inline bool has_end_pos() const;
  inline void clear_end_pos();
  static const int kEndPosFieldNumber = 6;
  inline const ::CSPoint& end_pos() const;
  inline ::CSPoint* mutable_end_pos();
  inline ::CSPoint* release_end_pos();
  
  // required .CSPoint end_direct = 7;
  inline bool has_end_direct() const;
  inline void clear_end_direct();
  static const int kEndDirectFieldNumber = 7;
  inline const ::CSPoint& end_direct() const;
  inline ::CSPoint* mutable_end_direct();
  inline ::CSPoint* release_end_direct();
  
  // required uint32 action_id = 8;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);
  
  // repeated .AttackPlayerInfo users = 9;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 9;
  inline const ::AttackPlayerInfo& users(int index) const;
  inline ::AttackPlayerInfo* mutable_users(int index);
  inline ::AttackPlayerInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:CSPlayerHitPlayerRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_start_pos();
  inline void clear_has_start_pos();
  inline void set_has_start_direct();
  inline void clear_has_start_direct();
  inline void set_has_end_pos();
  inline void clear_has_end_pos();
  inline void set_has_end_direct();
  inline void clear_has_end_direct();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::CSPoint* start_pos_;
  ::CSPoint* start_direct_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 action_id_;
  ::CSPoint* end_pos_;
  ::CSPoint* end_direct_;
  ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerHitPlayerRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHPRsp : public ::google::protobuf::Message {
 public:
  CSPlayerHPRsp();
  virtual ~CSPlayerHPRsp();
  
  CSPlayerHPRsp(const CSPlayerHPRsp& from);
  
  inline CSPlayerHPRsp& operator=(const CSPlayerHPRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHPRsp& default_instance();
  
  void Swap(CSPlayerHPRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerHPRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHPRsp& from);
  void MergeFrom(const CSPlayerHPRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // required uint32 blood = 4;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 4;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // optional uint32 source_id = 5;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 5;
  inline ::google::protobuf::uint32 source_id() const;
  inline void set_source_id(::google::protobuf::uint32 value);
  
  // optional uint32 source_reg_time = 6;
  inline bool has_source_reg_time() const;
  inline void clear_source_reg_time();
  static const int kSourceRegTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 source_reg_time() const;
  inline void set_source_reg_time(::google::protobuf::uint32 value);
  
  // optional uint32 source_channel_id = 7;
  inline bool has_source_channel_id() const;
  inline void clear_source_channel_id();
  static const int kSourceChannelIdFieldNumber = 7;
  inline ::google::protobuf::uint32 source_channel_id() const;
  inline void set_source_channel_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSPlayerHPRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_source_id();
  inline void clear_has_source_id();
  inline void set_has_source_reg_time();
  inline void clear_has_source_reg_time();
  inline void set_has_source_channel_id();
  inline void clear_has_source_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 source_reg_time_;
  ::google::protobuf::uint32 source_channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerHPRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerHPReq : public ::google::protobuf::Message {
 public:
  CSPlayerHPReq();
  virtual ~CSPlayerHPReq();
  
  CSPlayerHPReq(const CSPlayerHPReq& from);
  
  inline CSPlayerHPReq& operator=(const CSPlayerHPReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerHPReq& default_instance();
  
  void Swap(CSPlayerHPReq* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerHPReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerHPReq& from);
  void MergeFrom(const CSPlayerHPReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 blood = 1;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 1;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CSPlayerHPReq)
 private:
  inline void set_has_blood();
  inline void clear_has_blood();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 blood_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerHPReq* default_instance_;
};
// -------------------------------------------------------------------

class CSMonsterBloodRsp : public ::google::protobuf::Message {
 public:
  CSMonsterBloodRsp();
  virtual ~CSMonsterBloodRsp();
  
  CSMonsterBloodRsp(const CSMonsterBloodRsp& from);
  
  inline CSMonsterBloodRsp& operator=(const CSMonsterBloodRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMonsterBloodRsp& default_instance();
  
  void Swap(CSMonsterBloodRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSMonsterBloodRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMonsterBloodRsp& from);
  void MergeFrom(const CSMonsterBloodRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);
  
  // repeated .AttackMonsterInfo monsters = 4;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 4;
  inline const ::AttackMonsterInfo& monsters(int index) const;
  inline ::AttackMonsterInfo* mutable_monsters(int index);
  inline ::AttackMonsterInfo* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
      mutable_monsters();
  
  // @@protoc_insertion_point(class_scope:CSMonsterBloodRsp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo > monsters_;
  ::google::protobuf::uint32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSMonsterBloodRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerDieShowReq : public ::google::protobuf::Message {
 public:
  CSPlayerDieShowReq();
  virtual ~CSPlayerDieShowReq();
  
  CSPlayerDieShowReq(const CSPlayerDieShowReq& from);
  
  inline CSPlayerDieShowReq& operator=(const CSPlayerDieShowReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerDieShowReq& default_instance();
  
  void Swap(CSPlayerDieShowReq* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerDieShowReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerDieShowReq& from);
  void MergeFrom(const CSPlayerDieShowReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSPlayerDieShowReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerDieShowReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerDieShowRsp : public ::google::protobuf::Message {
 public:
  CSPlayerDieShowRsp();
  virtual ~CSPlayerDieShowRsp();
  
  CSPlayerDieShowRsp(const CSPlayerDieShowRsp& from);
  
  inline CSPlayerDieShowRsp& operator=(const CSPlayerDieShowRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerDieShowRsp& default_instance();
  
  void Swap(CSPlayerDieShowRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerDieShowRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerDieShowRsp& from);
  void MergeFrom(const CSPlayerDieShowRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 attack = 1;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 1;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);
  
  // required uint32 defend = 2;
  inline bool has_defend() const;
  inline void clear_defend();
  static const int kDefendFieldNumber = 2;
  inline ::google::protobuf::uint32 defend() const;
  inline void set_defend(::google::protobuf::uint32 value);
  
  // required uint32 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSPlayerDieShowRsp)
 private:
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defend();
  inline void clear_has_defend();
  inline void set_has_hp();
  inline void clear_has_hp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 attack_;
  ::google::protobuf::uint32 defend_;
  ::google::protobuf::uint32 hp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerDieShowRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerMayImproveReq : public ::google::protobuf::Message {
 public:
  CSPlayerMayImproveReq();
  virtual ~CSPlayerMayImproveReq();
  
  CSPlayerMayImproveReq(const CSPlayerMayImproveReq& from);
  
  inline CSPlayerMayImproveReq& operator=(const CSPlayerMayImproveReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerMayImproveReq& default_instance();
  
  void Swap(CSPlayerMayImproveReq* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerMayImproveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerMayImproveReq& from);
  void MergeFrom(const CSPlayerMayImproveReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CSPlayerMayImproveReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerMayImproveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPlayerMayImproveRsp : public ::google::protobuf::Message {
 public:
  CSPlayerMayImproveRsp();
  virtual ~CSPlayerMayImproveRsp();
  
  CSPlayerMayImproveRsp(const CSPlayerMayImproveRsp& from);
  
  inline CSPlayerMayImproveRsp& operator=(const CSPlayerMayImproveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPlayerMayImproveRsp& default_instance();
  
  void Swap(CSPlayerMayImproveRsp* other);
  
  // implements Message ----------------------------------------------
  
  CSPlayerMayImproveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPlayerMayImproveRsp& from);
  void MergeFrom(const CSPlayerMayImproveRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 imp_item = 1;
  inline bool has_imp_item() const;
  inline void clear_imp_item();
  static const int kImpItemFieldNumber = 1;
  inline ::google::protobuf::uint32 imp_item() const;
  inline void set_imp_item(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CSPlayerMayImproveRsp)
 private:
  inline void set_has_imp_item();
  inline void clear_has_imp_item();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 imp_item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();
  
  void InitAsDefaultInstance();
  static CSPlayerMayImproveRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// CSPoint

// required int32 xpos = 1;
inline bool CSPoint::has_xpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPoint::set_has_xpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPoint::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPoint::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 CSPoint::xpos() const {
  return xpos_;
}
inline void CSPoint::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 2;
inline bool CSPoint::has_ypos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPoint::set_has_ypos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPoint::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPoint::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 CSPoint::ypos() const {
  return ypos_;
}
inline void CSPoint::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// -------------------------------------------------------------------

// CSBattleMoveReq

// required uint32 id = 1;
inline bool CSBattleMoveReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleMoveReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleMoveReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleMoveReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSBattleMoveReq::id() const {
  return id_;
}
inline void CSBattleMoveReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 reg_time = 2;
inline bool CSBattleMoveReq::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleMoveReq::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleMoveReq::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleMoveReq::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSBattleMoveReq::reg_time() const {
  return reg_time_;
}
inline void CSBattleMoveReq::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSBattleMoveReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleMoveReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleMoveReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleMoveReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSBattleMoveReq::channel_id() const {
  return channel_id_;
}
inline void CSBattleMoveReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required .CSPoint direct = 4;
inline bool CSBattleMoveReq::has_direct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattleMoveReq::set_has_direct() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattleMoveReq::clear_has_direct() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattleMoveReq::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& CSBattleMoveReq::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* CSBattleMoveReq::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* CSBattleMoveReq::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}

// required .CSPoint pos = 5;
inline bool CSBattleMoveReq::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSBattleMoveReq::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSBattleMoveReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSBattleMoveReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSBattleMoveReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSBattleMoveReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSBattleMoveReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// required uint32 time = 6;
inline bool CSBattleMoveReq::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSBattleMoveReq::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSBattleMoveReq::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSBattleMoveReq::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CSBattleMoveReq::time() const {
  return time_;
}
inline void CSBattleMoveReq::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CSBattleMoveRsp

// required uint32 id = 1;
inline bool CSBattleMoveRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleMoveRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleMoveRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleMoveRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSBattleMoveRsp::id() const {
  return id_;
}
inline void CSBattleMoveRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 reg_time = 2;
inline bool CSBattleMoveRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleMoveRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleMoveRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleMoveRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSBattleMoveRsp::reg_time() const {
  return reg_time_;
}
inline void CSBattleMoveRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSBattleMoveRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleMoveRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleMoveRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleMoveRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSBattleMoveRsp::channel_id() const {
  return channel_id_;
}
inline void CSBattleMoveRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required .CSPoint direct = 4;
inline bool CSBattleMoveRsp::has_direct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattleMoveRsp::set_has_direct() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattleMoveRsp::clear_has_direct() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattleMoveRsp::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& CSBattleMoveRsp::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* CSBattleMoveRsp::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* CSBattleMoveRsp::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}

// required .CSPoint pos = 5;
inline bool CSBattleMoveRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSBattleMoveRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSBattleMoveRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSBattleMoveRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSBattleMoveRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSBattleMoveRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSBattleMoveRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// required uint32 time = 6;
inline bool CSBattleMoveRsp::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSBattleMoveRsp::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSBattleMoveRsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSBattleMoveRsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CSBattleMoveRsp::time() const {
  return time_;
}
inline void CSBattleMoveRsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CSBattleCreateReq

// required uint32 map_id = 1;
inline bool CSBattleCreateReq::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleCreateReq::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleCreateReq::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleCreateReq::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CSBattleCreateReq::map_id() const {
  return map_id_;
}
inline void CSBattleCreateReq::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// -------------------------------------------------------------------

// MonsterBattleInfo

// optional uint32 physical_attack = 1;
inline bool MonsterBattleInfo::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterBattleInfo::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterBattleInfo::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterBattleInfo::clear_physical_attack() {
  physical_attack_ = 0u;
  clear_has_physical_attack();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::physical_attack() const {
  return physical_attack_;
}
inline void MonsterBattleInfo::set_physical_attack(::google::protobuf::uint32 value) {
  set_has_physical_attack();
  physical_attack_ = value;
}

// optional uint32 magic_attack = 2;
inline bool MonsterBattleInfo::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterBattleInfo::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterBattleInfo::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterBattleInfo::clear_magic_attack() {
  magic_attack_ = 0u;
  clear_has_magic_attack();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::magic_attack() const {
  return magic_attack_;
}
inline void MonsterBattleInfo::set_magic_attack(::google::protobuf::uint32 value) {
  set_has_magic_attack();
  magic_attack_ = value;
}

// optional uint32 skill_attack = 3;
inline bool MonsterBattleInfo::has_skill_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterBattleInfo::set_has_skill_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterBattleInfo::clear_has_skill_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterBattleInfo::clear_skill_attack() {
  skill_attack_ = 0u;
  clear_has_skill_attack();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::skill_attack() const {
  return skill_attack_;
}
inline void MonsterBattleInfo::set_skill_attack(::google::protobuf::uint32 value) {
  set_has_skill_attack();
  skill_attack_ = value;
}

// optional uint32 physical_defence = 4;
inline bool MonsterBattleInfo::has_physical_defence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterBattleInfo::set_has_physical_defence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterBattleInfo::clear_has_physical_defence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterBattleInfo::clear_physical_defence() {
  physical_defence_ = 0u;
  clear_has_physical_defence();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::physical_defence() const {
  return physical_defence_;
}
inline void MonsterBattleInfo::set_physical_defence(::google::protobuf::uint32 value) {
  set_has_physical_defence();
  physical_defence_ = value;
}

// optional uint32 magic_defence = 5;
inline bool MonsterBattleInfo::has_magic_defence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterBattleInfo::set_has_magic_defence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterBattleInfo::clear_has_magic_defence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterBattleInfo::clear_magic_defence() {
  magic_defence_ = 0u;
  clear_has_magic_defence();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::magic_defence() const {
  return magic_defence_;
}
inline void MonsterBattleInfo::set_magic_defence(::google::protobuf::uint32 value) {
  set_has_magic_defence();
  magic_defence_ = value;
}

// optional uint32 skill_defence = 6;
inline bool MonsterBattleInfo::has_skill_defence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterBattleInfo::set_has_skill_defence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterBattleInfo::clear_has_skill_defence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterBattleInfo::clear_skill_defence() {
  skill_defence_ = 0u;
  clear_has_skill_defence();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::skill_defence() const {
  return skill_defence_;
}
inline void MonsterBattleInfo::set_skill_defence(::google::protobuf::uint32 value) {
  set_has_skill_defence();
  skill_defence_ = value;
}

// optional uint32 health_point = 7;
inline bool MonsterBattleInfo::has_health_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonsterBattleInfo::set_has_health_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonsterBattleInfo::clear_has_health_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonsterBattleInfo::clear_health_point() {
  health_point_ = 0u;
  clear_has_health_point();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::health_point() const {
  return health_point_;
}
inline void MonsterBattleInfo::set_health_point(::google::protobuf::uint32 value) {
  set_has_health_point();
  health_point_ = value;
}

// optional uint32 accurate = 8;
inline bool MonsterBattleInfo::has_accurate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonsterBattleInfo::set_has_accurate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonsterBattleInfo::clear_has_accurate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonsterBattleInfo::clear_accurate() {
  accurate_ = 0u;
  clear_has_accurate();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::accurate() const {
  return accurate_;
}
inline void MonsterBattleInfo::set_accurate(::google::protobuf::uint32 value) {
  set_has_accurate();
  accurate_ = value;
}

// optional uint32 dodge = 9;
inline bool MonsterBattleInfo::has_dodge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MonsterBattleInfo::set_has_dodge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MonsterBattleInfo::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MonsterBattleInfo::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::dodge() const {
  return dodge_;
}
inline void MonsterBattleInfo::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// optional uint32 wreck = 10;
inline bool MonsterBattleInfo::has_wreck() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MonsterBattleInfo::set_has_wreck() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MonsterBattleInfo::clear_has_wreck() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MonsterBattleInfo::clear_wreck() {
  wreck_ = 0u;
  clear_has_wreck();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::wreck() const {
  return wreck_;
}
inline void MonsterBattleInfo::set_wreck(::google::protobuf::uint32 value) {
  set_has_wreck();
  wreck_ = value;
}

// optional uint32 parry = 11;
inline bool MonsterBattleInfo::has_parry() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MonsterBattleInfo::set_has_parry() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MonsterBattleInfo::clear_has_parry() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MonsterBattleInfo::clear_parry() {
  parry_ = 0u;
  clear_has_parry();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::parry() const {
  return parry_;
}
inline void MonsterBattleInfo::set_parry(::google::protobuf::uint32 value) {
  set_has_parry();
  parry_ = value;
}

// optional uint32 critical_strike = 12;
inline bool MonsterBattleInfo::has_critical_strike() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MonsterBattleInfo::set_has_critical_strike() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MonsterBattleInfo::clear_has_critical_strike() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MonsterBattleInfo::clear_critical_strike() {
  critical_strike_ = 0u;
  clear_has_critical_strike();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::critical_strike() const {
  return critical_strike_;
}
inline void MonsterBattleInfo::set_critical_strike(::google::protobuf::uint32 value) {
  set_has_critical_strike();
  critical_strike_ = value;
}

// optional uint32 tenacity = 13;
inline bool MonsterBattleInfo::has_tenacity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MonsterBattleInfo::set_has_tenacity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MonsterBattleInfo::clear_has_tenacity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MonsterBattleInfo::clear_tenacity() {
  tenacity_ = 0u;
  clear_has_tenacity();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::tenacity() const {
  return tenacity_;
}
inline void MonsterBattleInfo::set_tenacity(::google::protobuf::uint32 value) {
  set_has_tenacity();
  tenacity_ = value;
}

// optional uint32 slay = 14;
inline bool MonsterBattleInfo::has_slay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MonsterBattleInfo::set_has_slay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MonsterBattleInfo::clear_has_slay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MonsterBattleInfo::clear_slay() {
  slay_ = 0u;
  clear_has_slay();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::slay() const {
  return slay_;
}
inline void MonsterBattleInfo::set_slay(::google::protobuf::uint32 value) {
  set_has_slay();
  slay_ = value;
}

// optional uint32 proficiency = 15;
inline bool MonsterBattleInfo::has_proficiency() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MonsterBattleInfo::set_has_proficiency() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MonsterBattleInfo::clear_has_proficiency() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MonsterBattleInfo::clear_proficiency() {
  proficiency_ = 0u;
  clear_has_proficiency();
}
inline ::google::protobuf::uint32 MonsterBattleInfo::proficiency() const {
  return proficiency_;
}
inline void MonsterBattleInfo::set_proficiency(::google::protobuf::uint32 value) {
  set_has_proficiency();
  proficiency_ = value;
}

// -------------------------------------------------------------------

// MonsterInfo

// required uint32 id = 1;
inline bool MonsterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MonsterInfo::id() const {
  return id_;
}
inline void MonsterInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 level = 2;
inline bool MonsterInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MonsterInfo::level() const {
  return level_;
}
inline void MonsterInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 blood = 3;
inline bool MonsterInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 MonsterInfo::blood() const {
  return blood_;
}
inline void MonsterInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// optional uint32 speed = 4;
inline bool MonsterInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterInfo::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 MonsterInfo::speed() const {
  return speed_;
}
inline void MonsterInfo::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// -------------------------------------------------------------------

// CSBattleCreateRsp

// optional .BasicUserInfo userinfo = 1;
inline bool CSBattleCreateRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleCreateRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleCreateRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleCreateRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::BasicUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::BasicUserInfo& CSBattleCreateRsp::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::BasicUserInfo* CSBattleCreateRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::BasicUserInfo;
  return userinfo_;
}
inline ::BasicUserInfo* CSBattleCreateRsp::release_userinfo() {
  clear_has_userinfo();
  ::BasicUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}

// optional uint32 map_id = 2;
inline bool CSBattleCreateRsp::has_map_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleCreateRsp::set_has_map_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleCreateRsp::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleCreateRsp::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 CSBattleCreateRsp::map_id() const {
  return map_id_;
}
inline void CSBattleCreateRsp::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 timeout = 3;
inline bool CSBattleCreateRsp::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleCreateRsp::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleCreateRsp::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleCreateRsp::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 CSBattleCreateRsp::timeout() const {
  return timeout_;
}
inline void CSBattleCreateRsp::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// CSBattleMonsterCreateReq

// repeated .MonsterInfo monsterinfo = 1;
inline int CSBattleMonsterCreateReq::monsterinfo_size() const {
  return monsterinfo_.size();
}
inline void CSBattleMonsterCreateReq::clear_monsterinfo() {
  monsterinfo_.Clear();
}
inline const ::MonsterInfo& CSBattleMonsterCreateReq::monsterinfo(int index) const {
  return monsterinfo_.Get(index);
}
inline ::MonsterInfo* CSBattleMonsterCreateReq::mutable_monsterinfo(int index) {
  return monsterinfo_.Mutable(index);
}
inline ::MonsterInfo* CSBattleMonsterCreateReq::add_monsterinfo() {
  return monsterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
CSBattleMonsterCreateReq::monsterinfo() const {
  return monsterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
CSBattleMonsterCreateReq::mutable_monsterinfo() {
  return &monsterinfo_;
}

// required .CSPoint pos = 2;
inline bool CSBattleMonsterCreateReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleMonsterCreateReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleMonsterCreateReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleMonsterCreateReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSBattleMonsterCreateReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSBattleMonsterCreateReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSBattleMonsterCreateReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSBattleMonsterCreateRsp

// repeated .MonsterInfo monsterinfo = 1;
inline int CSBattleMonsterCreateRsp::monsterinfo_size() const {
  return monsterinfo_.size();
}
inline void CSBattleMonsterCreateRsp::clear_monsterinfo() {
  monsterinfo_.Clear();
}
inline const ::MonsterInfo& CSBattleMonsterCreateRsp::monsterinfo(int index) const {
  return monsterinfo_.Get(index);
}
inline ::MonsterInfo* CSBattleMonsterCreateRsp::mutable_monsterinfo(int index) {
  return monsterinfo_.Mutable(index);
}
inline ::MonsterInfo* CSBattleMonsterCreateRsp::add_monsterinfo() {
  return monsterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
CSBattleMonsterCreateRsp::monsterinfo() const {
  return monsterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
CSBattleMonsterCreateRsp::mutable_monsterinfo() {
  return &monsterinfo_;
}

// required .CSPoint pos = 2;
inline bool CSBattleMonsterCreateRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleMonsterCreateRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleMonsterCreateRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleMonsterCreateRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSBattleMonsterCreateRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSBattleMonsterCreateRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSBattleMonsterCreateRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSCastleInfo

// required uint32 id = 1;
inline bool CSCastleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCastleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCastleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCastleInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSCastleInfo::id() const {
  return id_;
}
inline void CSCastleInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 level = 2;
inline bool CSCastleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSCastleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSCastleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSCastleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSCastleInfo::level() const {
  return level_;
}
inline void CSCastleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 blood = 3;
inline bool CSCastleInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSCastleInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSCastleInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSCastleInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 CSCastleInfo::blood() const {
  return blood_;
}
inline void CSCastleInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// -------------------------------------------------------------------

// CSBattleUserJoinReq

// required sint32 roomId = 1;
inline bool CSBattleUserJoinReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleUserJoinReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleUserJoinReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleUserJoinReq::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 CSBattleUserJoinReq::roomid() const {
  return roomid_;
}
inline void CSBattleUserJoinReq::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// CSBattleUserJoinRsp

// required .BasicUserInfo userinfo = 1;
inline bool CSBattleUserJoinRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleUserJoinRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleUserJoinRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleUserJoinRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::BasicUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::BasicUserInfo& CSBattleUserJoinRsp::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::BasicUserInfo* CSBattleUserJoinRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::BasicUserInfo;
  return userinfo_;
}
inline ::BasicUserInfo* CSBattleUserJoinRsp::release_userinfo() {
  clear_has_userinfo();
  ::BasicUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}

// repeated .MonsterInfo monsterinfo = 2;
inline int CSBattleUserJoinRsp::monsterinfo_size() const {
  return monsterinfo_.size();
}
inline void CSBattleUserJoinRsp::clear_monsterinfo() {
  monsterinfo_.Clear();
}
inline const ::MonsterInfo& CSBattleUserJoinRsp::monsterinfo(int index) const {
  return monsterinfo_.Get(index);
}
inline ::MonsterInfo* CSBattleUserJoinRsp::mutable_monsterinfo(int index) {
  return monsterinfo_.Mutable(index);
}
inline ::MonsterInfo* CSBattleUserJoinRsp::add_monsterinfo() {
  return monsterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonsterInfo >&
CSBattleUserJoinRsp::monsterinfo() const {
  return monsterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonsterInfo >*
CSBattleUserJoinRsp::mutable_monsterinfo() {
  return &monsterinfo_;
}

// optional .CSCastleInfo castleinfo = 3;
inline bool CSBattleUserJoinRsp::has_castleinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleUserJoinRsp::set_has_castleinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleUserJoinRsp::clear_has_castleinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleUserJoinRsp::clear_castleinfo() {
  if (castleinfo_ != NULL) castleinfo_->::CSCastleInfo::Clear();
  clear_has_castleinfo();
}
inline const ::CSCastleInfo& CSBattleUserJoinRsp::castleinfo() const {
  return castleinfo_ != NULL ? *castleinfo_ : *default_instance_->castleinfo_;
}
inline ::CSCastleInfo* CSBattleUserJoinRsp::mutable_castleinfo() {
  set_has_castleinfo();
  if (castleinfo_ == NULL) castleinfo_ = new ::CSCastleInfo;
  return castleinfo_;
}
inline ::CSCastleInfo* CSBattleUserJoinRsp::release_castleinfo() {
  clear_has_castleinfo();
  ::CSCastleInfo* temp = castleinfo_;
  castleinfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSBattleUserLeaveRsp

// required uint32 userid = 1;
inline bool CSBattleUserLeaveRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleUserLeaveRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleUserLeaveRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleUserLeaveRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSBattleUserLeaveRsp::userid() const {
  return userid_;
}
inline void CSBattleUserLeaveRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 reg_time = 2;
inline bool CSBattleUserLeaveRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleUserLeaveRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleUserLeaveRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleUserLeaveRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSBattleUserLeaveRsp::reg_time() const {
  return reg_time_;
}
inline void CSBattleUserLeaveRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// optional uint32 channel_id = 3;
inline bool CSBattleUserLeaveRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleUserLeaveRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleUserLeaveRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleUserLeaveRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSBattleUserLeaveRsp::channel_id() const {
  return channel_id_;
}
inline void CSBattleUserLeaveRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// CSBattleLoadCompleteReq

// -------------------------------------------------------------------

// CSBattleLoadCompleteRsp

// required bool timeout = 1;
inline bool CSBattleLoadCompleteRsp::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleLoadCompleteRsp::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleLoadCompleteRsp::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleLoadCompleteRsp::clear_timeout() {
  timeout_ = false;
  clear_has_timeout();
}
inline bool CSBattleLoadCompleteRsp::timeout() const {
  return timeout_;
}
inline void CSBattleLoadCompleteRsp::set_timeout(bool value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// CSBattleLeaveReq

// -------------------------------------------------------------------

// CSBattleLeaveRsp

// required bool initiative = 1;
inline bool CSBattleLeaveRsp::has_initiative() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattleLeaveRsp::set_has_initiative() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattleLeaveRsp::clear_has_initiative() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattleLeaveRsp::clear_initiative() {
  initiative_ = false;
  clear_has_initiative();
}
inline bool CSBattleLeaveRsp::initiative() const {
  return initiative_;
}
inline void CSBattleLeaveRsp::set_initiative(bool value) {
  set_has_initiative();
  initiative_ = value;
}

// optional uint32 star = 2;
inline bool CSBattleLeaveRsp::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattleLeaveRsp::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattleLeaveRsp::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattleLeaveRsp::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 CSBattleLeaveRsp::star() const {
  return star_;
}
inline void CSBattleLeaveRsp::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 finish_time = 3;
inline bool CSBattleLeaveRsp::has_finish_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattleLeaveRsp::set_has_finish_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattleLeaveRsp::clear_has_finish_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattleLeaveRsp::clear_finish_time() {
  finish_time_ = 0u;
  clear_has_finish_time();
}
inline ::google::protobuf::uint32 CSBattleLeaveRsp::finish_time() const {
  return finish_time_;
}
inline void CSBattleLeaveRsp::set_finish_time(::google::protobuf::uint32 value) {
  set_has_finish_time();
  finish_time_ = value;
}

// optional uint32 dead_mon_num = 4;
inline bool CSBattleLeaveRsp::has_dead_mon_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattleLeaveRsp::set_has_dead_mon_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattleLeaveRsp::clear_has_dead_mon_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattleLeaveRsp::clear_dead_mon_num() {
  dead_mon_num_ = 0u;
  clear_has_dead_mon_num();
}
inline ::google::protobuf::uint32 CSBattleLeaveRsp::dead_mon_num() const {
  return dead_mon_num_;
}
inline void CSBattleLeaveRsp::set_dead_mon_num(::google::protobuf::uint32 value) {
  set_has_dead_mon_num();
  dead_mon_num_ = value;
}

// optional .CSReward rewards = 5;
inline bool CSBattleLeaveRsp::has_rewards() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSBattleLeaveRsp::set_has_rewards() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSBattleLeaveRsp::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSBattleLeaveRsp::clear_rewards() {
  if (rewards_ != NULL) rewards_->::CSReward::Clear();
  clear_has_rewards();
}
inline const ::CSReward& CSBattleLeaveRsp::rewards() const {
  return rewards_ != NULL ? *rewards_ : *default_instance_->rewards_;
}
inline ::CSReward* CSBattleLeaveRsp::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) rewards_ = new ::CSReward;
  return rewards_;
}
inline ::CSReward* CSBattleLeaveRsp::release_rewards() {
  clear_has_rewards();
  ::CSReward* temp = rewards_;
  rewards_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSBattleTimeoutRsp

// -------------------------------------------------------------------

// CSBattlePlayerDelRsp

// required uint32 userid = 1;
inline bool CSBattlePlayerDelRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattlePlayerDelRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattlePlayerDelRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattlePlayerDelRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSBattlePlayerDelRsp::userid() const {
  return userid_;
}
inline void CSBattlePlayerDelRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSBattlePlayerDelRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattlePlayerDelRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattlePlayerDelRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattlePlayerDelRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSBattlePlayerDelRsp::reg_time() const {
  return reg_time_;
}
inline void CSBattlePlayerDelRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSBattlePlayerDelRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattlePlayerDelRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattlePlayerDelRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattlePlayerDelRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSBattlePlayerDelRsp::channel_id() const {
  return channel_id_;
}
inline void CSBattlePlayerDelRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 exchange_id = 4;
inline bool CSBattlePlayerDelRsp::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSBattlePlayerDelRsp::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSBattlePlayerDelRsp::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSBattlePlayerDelRsp::clear_exchange_id() {
  exchange_id_ = 0u;
  clear_has_exchange_id();
}
inline ::google::protobuf::uint32 CSBattlePlayerDelRsp::exchange_id() const {
  return exchange_id_;
}
inline void CSBattlePlayerDelRsp::set_exchange_id(::google::protobuf::uint32 value) {
  set_has_exchange_id();
  exchange_id_ = value;
}

// -------------------------------------------------------------------

// CSBattlePlayerRevivalReq

// -------------------------------------------------------------------

// CSBattlePlayerRevivalRsp

// required uint32 userid = 1;
inline bool CSBattlePlayerRevivalRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSBattlePlayerRevivalRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSBattlePlayerRevivalRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSBattlePlayerRevivalRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSBattlePlayerRevivalRsp::userid() const {
  return userid_;
}
inline void CSBattlePlayerRevivalRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSBattlePlayerRevivalRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSBattlePlayerRevivalRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSBattlePlayerRevivalRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSBattlePlayerRevivalRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSBattlePlayerRevivalRsp::reg_time() const {
  return reg_time_;
}
inline void CSBattlePlayerRevivalRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSBattlePlayerRevivalRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSBattlePlayerRevivalRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSBattlePlayerRevivalRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSBattlePlayerRevivalRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSBattlePlayerRevivalRsp::channel_id() const {
  return channel_id_;
}
inline void CSBattlePlayerRevivalRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// CSMonsterMoveReq

// required uint32 id = 1;
inline bool CSMonsterMoveReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterMoveReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterMoveReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterMoveReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterMoveReq::id() const {
  return id_;
}
inline void CSMonsterMoveReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 direct = 2;
inline bool CSMonsterMoveReq::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterMoveReq::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterMoveReq::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterMoveReq::clear_direct() {
  direct_ = 0u;
  clear_has_direct();
}
inline ::google::protobuf::uint32 CSMonsterMoveReq::direct() const {
  return direct_;
}
inline void CSMonsterMoveReq::set_direct(::google::protobuf::uint32 value) {
  set_has_direct();
  direct_ = value;
}

// -------------------------------------------------------------------

// CSMonsterMoveRsp

// required uint32 id = 1;
inline bool CSMonsterMoveRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterMoveRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterMoveRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterMoveRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterMoveRsp::id() const {
  return id_;
}
inline void CSMonsterMoveRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 direct = 2;
inline bool CSMonsterMoveRsp::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterMoveRsp::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterMoveRsp::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterMoveRsp::clear_direct() {
  direct_ = 0u;
  clear_has_direct();
}
inline ::google::protobuf::uint32 CSMonsterMoveRsp::direct() const {
  return direct_;
}
inline void CSMonsterMoveRsp::set_direct(::google::protobuf::uint32 value) {
  set_has_direct();
  direct_ = value;
}

// -------------------------------------------------------------------

// CSMonsterCreateReq

// required uint32 id = 1;
inline bool CSMonsterCreateReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterCreateReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterCreateReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterCreateReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterCreateReq::id() const {
  return id_;
}
inline void CSMonsterCreateReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint pos = 2;
inline bool CSMonsterCreateReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterCreateReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterCreateReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterCreateReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSMonsterCreateReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSMonsterCreateReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSMonsterCreateReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSMonsterCreateRsp

// required uint32 id = 1;
inline bool CSMonsterCreateRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterCreateRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterCreateRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterCreateRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterCreateRsp::id() const {
  return id_;
}
inline void CSMonsterCreateRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint pos = 2;
inline bool CSMonsterCreateRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterCreateRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterCreateRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterCreateRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSMonsterCreateRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSMonsterCreateRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSMonsterCreateRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// optional uint32 id_in_map = 3;
inline bool CSMonsterCreateRsp::has_id_in_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterCreateRsp::set_has_id_in_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterCreateRsp::clear_has_id_in_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterCreateRsp::clear_id_in_map() {
  id_in_map_ = 0u;
  clear_has_id_in_map();
}
inline ::google::protobuf::uint32 CSMonsterCreateRsp::id_in_map() const {
  return id_in_map_;
}
inline void CSMonsterCreateRsp::set_id_in_map(::google::protobuf::uint32 value) {
  set_has_id_in_map();
  id_in_map_ = value;
}

// optional bool side = 4;
inline bool CSMonsterCreateRsp::has_side() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterCreateRsp::set_has_side() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterCreateRsp::clear_has_side() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterCreateRsp::clear_side() {
  side_ = false;
  clear_has_side();
}
inline bool CSMonsterCreateRsp::side() const {
  return side_;
}
inline void CSMonsterCreateRsp::set_side(bool value) {
  set_has_side();
  side_ = value;
}

// -------------------------------------------------------------------

// AttackMonsterInfo

// required uint32 id = 1;
inline bool AttackMonsterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackMonsterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackMonsterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackMonsterInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::id() const {
  return id_;
}
inline void AttackMonsterInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .CSPoint pos = 2;
inline bool AttackMonsterInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackMonsterInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackMonsterInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackMonsterInfo::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& AttackMonsterInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* AttackMonsterInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* AttackMonsterInfo::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// optional uint32 blood = 3;
inline bool AttackMonsterInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackMonsterInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackMonsterInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackMonsterInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::blood() const {
  return blood_;
}
inline void AttackMonsterInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// optional uint32 status = 4;
inline bool AttackMonsterInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttackMonsterInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttackMonsterInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttackMonsterInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::status() const {
  return status_;
}
inline void AttackMonsterInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 hurt_type = 5;
inline bool AttackMonsterInfo::has_hurt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AttackMonsterInfo::set_has_hurt_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AttackMonsterInfo::clear_has_hurt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AttackMonsterInfo::clear_hurt_type() {
  hurt_type_ = 0u;
  clear_has_hurt_type();
}
inline ::google::protobuf::uint32 AttackMonsterInfo::hurt_type() const {
  return hurt_type_;
}
inline void AttackMonsterInfo::set_hurt_type(::google::protobuf::uint32 value) {
  set_has_hurt_type();
  hurt_type_ = value;
}

// -------------------------------------------------------------------

// CSMonsterHitMonsterReq

// required uint32 id = 1;
inline bool CSMonsterHitMonsterReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterHitMonsterReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterHitMonsterReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterHitMonsterReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterHitMonsterReq::id() const {
  return id_;
}
inline void CSMonsterHitMonsterReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .CSPoint pos = 2;
inline bool CSMonsterHitMonsterReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterHitMonsterReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterHitMonsterReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterHitMonsterReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSMonsterHitMonsterReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSMonsterHitMonsterReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSMonsterHitMonsterReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// optional uint32 action_id = 3;
inline bool CSMonsterHitMonsterReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterHitMonsterReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterHitMonsterReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterHitMonsterReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSMonsterHitMonsterReq::action_id() const {
  return action_id_;
}
inline void CSMonsterHitMonsterReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackMonsterInfo users = 4;
inline int CSMonsterHitMonsterReq::users_size() const {
  return users_.size();
}
inline void CSMonsterHitMonsterReq::clear_users() {
  users_.Clear();
}
inline const ::AttackMonsterInfo& CSMonsterHitMonsterReq::users(int index) const {
  return users_.Get(index);
}
inline ::AttackMonsterInfo* CSMonsterHitMonsterReq::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::AttackMonsterInfo* CSMonsterHitMonsterReq::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSMonsterHitMonsterReq::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSMonsterHitMonsterReq::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSMonsterHitMonsterRsp

// required uint32 id = 1;
inline bool CSMonsterHitMonsterRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterHitMonsterRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterHitMonsterRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterHitMonsterRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterHitMonsterRsp::id() const {
  return id_;
}
inline void CSMonsterHitMonsterRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .CSPoint pos = 2;
inline bool CSMonsterHitMonsterRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterHitMonsterRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterHitMonsterRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterHitMonsterRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSMonsterHitMonsterRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSMonsterHitMonsterRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSMonsterHitMonsterRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// optional uint32 action_id = 3;
inline bool CSMonsterHitMonsterRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterHitMonsterRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterHitMonsterRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterHitMonsterRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSMonsterHitMonsterRsp::action_id() const {
  return action_id_;
}
inline void CSMonsterHitMonsterRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackMonsterInfo users = 4;
inline int CSMonsterHitMonsterRsp::users_size() const {
  return users_.size();
}
inline void CSMonsterHitMonsterRsp::clear_users() {
  users_.Clear();
}
inline const ::AttackMonsterInfo& CSMonsterHitMonsterRsp::users(int index) const {
  return users_.Get(index);
}
inline ::AttackMonsterInfo* CSMonsterHitMonsterRsp::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::AttackMonsterInfo* CSMonsterHitMonsterRsp::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSMonsterHitMonsterRsp::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSMonsterHitMonsterRsp::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSSMonsterHPReq

// required uint32 id = 1;
inline bool CSSMonsterHPReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSMonsterHPReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSMonsterHPReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSMonsterHPReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSSMonsterHPReq::id() const {
  return id_;
}
inline void CSSMonsterHPReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 blood = 2;
inline bool CSSMonsterHPReq::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSSMonsterHPReq::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSSMonsterHPReq::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSSMonsterHPReq::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 CSSMonsterHPReq::blood() const {
  return blood_;
}
inline void CSSMonsterHPReq::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// -------------------------------------------------------------------

// CSSMonsterHPRsp

// required uint32 id = 1;
inline bool CSSMonsterHPRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSMonsterHPRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSMonsterHPRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSMonsterHPRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSSMonsterHPRsp::id() const {
  return id_;
}
inline void CSSMonsterHPRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 blood = 2;
inline bool CSSMonsterHPRsp::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSSMonsterHPRsp::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSSMonsterHPRsp::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSSMonsterHPRsp::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 CSSMonsterHPRsp::blood() const {
  return blood_;
}
inline void CSSMonsterHPRsp::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// -------------------------------------------------------------------

// CSMonsterDieReq

// repeated uint32 id = 1;
inline int CSMonsterDieReq::id_size() const {
  return id_.size();
}
inline void CSMonsterDieReq::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CSMonsterDieReq::id(int index) const {
  return id_.Get(index);
}
inline void CSMonsterDieReq::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void CSMonsterDieReq::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSMonsterDieReq::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSMonsterDieReq::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// CSMonsterDieRsp

// repeated uint32 id = 1;
inline int CSMonsterDieRsp::id_size() const {
  return id_.size();
}
inline void CSMonsterDieRsp::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CSMonsterDieRsp::id(int index) const {
  return id_.Get(index);
}
inline void CSMonsterDieRsp::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void CSMonsterDieRsp::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSMonsterDieRsp::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSMonsterDieRsp::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// CSMonsterHitCastleReq

// required .CSCastleInfo castleinfo = 1;
inline bool CSMonsterHitCastleReq::has_castleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterHitCastleReq::set_has_castleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterHitCastleReq::clear_has_castleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterHitCastleReq::clear_castleinfo() {
  if (castleinfo_ != NULL) castleinfo_->::CSCastleInfo::Clear();
  clear_has_castleinfo();
}
inline const ::CSCastleInfo& CSMonsterHitCastleReq::castleinfo() const {
  return castleinfo_ != NULL ? *castleinfo_ : *default_instance_->castleinfo_;
}
inline ::CSCastleInfo* CSMonsterHitCastleReq::mutable_castleinfo() {
  set_has_castleinfo();
  if (castleinfo_ == NULL) castleinfo_ = new ::CSCastleInfo;
  return castleinfo_;
}
inline ::CSCastleInfo* CSMonsterHitCastleReq::release_castleinfo() {
  clear_has_castleinfo();
  ::CSCastleInfo* temp = castleinfo_;
  castleinfo_ = NULL;
  return temp;
}

// repeated uint32 id = 2;
inline int CSMonsterHitCastleReq::id_size() const {
  return id_.size();
}
inline void CSMonsterHitCastleReq::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CSMonsterHitCastleReq::id(int index) const {
  return id_.Get(index);
}
inline void CSMonsterHitCastleReq::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void CSMonsterHitCastleReq::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSMonsterHitCastleReq::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSMonsterHitCastleReq::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// CSMonsterHitCastleRsp

// required .CSCastleInfo castleinfo = 1;
inline bool CSMonsterHitCastleRsp::has_castleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterHitCastleRsp::set_has_castleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterHitCastleRsp::clear_has_castleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterHitCastleRsp::clear_castleinfo() {
  if (castleinfo_ != NULL) castleinfo_->::CSCastleInfo::Clear();
  clear_has_castleinfo();
}
inline const ::CSCastleInfo& CSMonsterHitCastleRsp::castleinfo() const {
  return castleinfo_ != NULL ? *castleinfo_ : *default_instance_->castleinfo_;
}
inline ::CSCastleInfo* CSMonsterHitCastleRsp::mutable_castleinfo() {
  set_has_castleinfo();
  if (castleinfo_ == NULL) castleinfo_ = new ::CSCastleInfo;
  return castleinfo_;
}
inline ::CSCastleInfo* CSMonsterHitCastleRsp::release_castleinfo() {
  clear_has_castleinfo();
  ::CSCastleInfo* temp = castleinfo_;
  castleinfo_ = NULL;
  return temp;
}

// repeated uint32 id = 2;
inline int CSMonsterHitCastleRsp::id_size() const {
  return id_.size();
}
inline void CSMonsterHitCastleRsp::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 CSMonsterHitCastleRsp::id(int index) const {
  return id_.Get(index);
}
inline void CSMonsterHitCastleRsp::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void CSMonsterHitCastleRsp::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSMonsterHitCastleRsp::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSMonsterHitCastleRsp::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// CSCastleDieReq

// required uint32 id = 1;
inline bool CSCastleDieReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCastleDieReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCastleDieReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCastleDieReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSCastleDieReq::id() const {
  return id_;
}
inline void CSCastleDieReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// CSCastleDieRsp

// required uint32 id = 1;
inline bool CSCastleDieRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSCastleDieRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSCastleDieRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSCastleDieRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSCastleDieRsp::id() const {
  return id_;
}
inline void CSCastleDieRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// CSMonsterAttackInfo

// required uint32 id = 1;
inline bool CSMonsterAttackInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterAttackInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterAttackInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterAttackInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::id() const {
  return id_;
}
inline void CSMonsterAttackInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CSPoint pos = 2;
inline bool CSMonsterAttackInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterAttackInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterAttackInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterAttackInfo::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSMonsterAttackInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// required .CSPoint direct = 3;
inline bool CSMonsterAttackInfo::has_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterAttackInfo::set_has_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterAttackInfo::clear_has_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterAttackInfo::clear_direct() {
  if (direct_ != NULL) direct_->::CSPoint::Clear();
  clear_has_direct();
}
inline const ::CSPoint& CSMonsterAttackInfo::direct() const {
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) direct_ = new ::CSPoint;
  return direct_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_direct() {
  clear_has_direct();
  ::CSPoint* temp = direct_;
  direct_ = NULL;
  return temp;
}

// required uint32 action_id = 4;
inline bool CSMonsterAttackInfo::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterAttackInfo::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterAttackInfo::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterAttackInfo::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::action_id() const {
  return action_id_;
}
inline void CSMonsterAttackInfo::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required uint32 type = 5;
inline bool CSMonsterAttackInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterAttackInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterAttackInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterAttackInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::type() const {
  return type_;
}
inline void CSMonsterAttackInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 userid = 6;
inline bool CSMonsterAttackInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterAttackInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterAttackInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterAttackInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::userid() const {
  return userid_;
}
inline void CSMonsterAttackInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 7;
inline bool CSMonsterAttackInfo::has_reg_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMonsterAttackInfo::set_has_reg_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMonsterAttackInfo::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMonsterAttackInfo::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::reg_time() const {
  return reg_time_;
}
inline void CSMonsterAttackInfo::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 8;
inline bool CSMonsterAttackInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMonsterAttackInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMonsterAttackInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMonsterAttackInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::channel_id() const {
  return channel_id_;
}
inline void CSMonsterAttackInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 skill_id = 9;
inline bool CSMonsterAttackInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMonsterAttackInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMonsterAttackInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMonsterAttackInfo::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::skill_id() const {
  return skill_id_;
}
inline void CSMonsterAttackInfo::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional uint32 effect_id = 10;
inline bool CSMonsterAttackInfo::has_effect_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMonsterAttackInfo::set_has_effect_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMonsterAttackInfo::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMonsterAttackInfo::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::effect_id() const {
  return effect_id_;
}
inline void CSMonsterAttackInfo::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// optional .CSPoint start_pos = 11;
inline bool CSMonsterAttackInfo::has_start_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMonsterAttackInfo::set_has_start_pos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMonsterAttackInfo::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMonsterAttackInfo::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSMonsterAttackInfo::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}

// optional .CSPoint end_pos = 12;
inline bool CSMonsterAttackInfo::has_end_pos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMonsterAttackInfo::set_has_end_pos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMonsterAttackInfo::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMonsterAttackInfo::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSMonsterAttackInfo::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSMonsterAttackInfo::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}

// optional uint32 skill_speed = 13;
inline bool CSMonsterAttackInfo::has_skill_speed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMonsterAttackInfo::set_has_skill_speed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMonsterAttackInfo::clear_has_skill_speed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMonsterAttackInfo::clear_skill_speed() {
  skill_speed_ = 0u;
  clear_has_skill_speed();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::skill_speed() const {
  return skill_speed_;
}
inline void CSMonsterAttackInfo::set_skill_speed(::google::protobuf::uint32 value) {
  set_has_skill_speed();
  skill_speed_ = value;
}

// optional uint32 delay_time = 14;
inline bool CSMonsterAttackInfo::has_delay_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSMonsterAttackInfo::set_has_delay_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSMonsterAttackInfo::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSMonsterAttackInfo::clear_delay_time() {
  delay_time_ = 0u;
  clear_has_delay_time();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::delay_time() const {
  return delay_time_;
}
inline void CSMonsterAttackInfo::set_delay_time(::google::protobuf::uint32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// optional uint32 dead_time = 15;
inline bool CSMonsterAttackInfo::has_dead_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSMonsterAttackInfo::set_has_dead_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSMonsterAttackInfo::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSMonsterAttackInfo::clear_dead_time() {
  dead_time_ = 0u;
  clear_has_dead_time();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::dead_time() const {
  return dead_time_;
}
inline void CSMonsterAttackInfo::set_dead_time(::google::protobuf::uint32 value) {
  set_has_dead_time();
  dead_time_ = value;
}

// repeated uint32 shake_time = 16;
inline int CSMonsterAttackInfo::shake_time_size() const {
  return shake_time_.size();
}
inline void CSMonsterAttackInfo::clear_shake_time() {
  shake_time_.Clear();
}
inline ::google::protobuf::uint32 CSMonsterAttackInfo::shake_time(int index) const {
  return shake_time_.Get(index);
}
inline void CSMonsterAttackInfo::set_shake_time(int index, ::google::protobuf::uint32 value) {
  shake_time_.Set(index, value);
}
inline void CSMonsterAttackInfo::add_shake_time(::google::protobuf::uint32 value) {
  shake_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSMonsterAttackInfo::shake_time() const {
  return shake_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSMonsterAttackInfo::mutable_shake_time() {
  return &shake_time_;
}

// -------------------------------------------------------------------

// CSMonsterEffectInfo

// required uint32 type = 1;
inline bool CSMonsterEffectInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterEffectInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterEffectInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterEffectInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::type() const {
  return type_;
}
inline void CSMonsterEffectInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 effect_id = 2;
inline bool CSMonsterEffectInfo::has_effect_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterEffectInfo::set_has_effect_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterEffectInfo::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterEffectInfo::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::effect_id() const {
  return effect_id_;
}
inline void CSMonsterEffectInfo::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// optional .CSPoint start_pos = 3;
inline bool CSMonsterEffectInfo::has_start_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterEffectInfo::set_has_start_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterEffectInfo::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterEffectInfo::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSMonsterEffectInfo::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}

// optional .CSPoint end_pos = 4;
inline bool CSMonsterEffectInfo::has_end_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterEffectInfo::set_has_end_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterEffectInfo::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterEffectInfo::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSMonsterEffectInfo::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSMonsterEffectInfo::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}

// optional uint32 skill_speed = 5;
inline bool CSMonsterEffectInfo::has_skill_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterEffectInfo::set_has_skill_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterEffectInfo::clear_has_skill_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterEffectInfo::clear_skill_speed() {
  skill_speed_ = 0u;
  clear_has_skill_speed();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::skill_speed() const {
  return skill_speed_;
}
inline void CSMonsterEffectInfo::set_skill_speed(::google::protobuf::uint32 value) {
  set_has_skill_speed();
  skill_speed_ = value;
}

// optional uint32 delay_time = 6;
inline bool CSMonsterEffectInfo::has_delay_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterEffectInfo::set_has_delay_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterEffectInfo::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterEffectInfo::clear_delay_time() {
  delay_time_ = 0u;
  clear_has_delay_time();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::delay_time() const {
  return delay_time_;
}
inline void CSMonsterEffectInfo::set_delay_time(::google::protobuf::uint32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// optional uint32 id = 7;
inline bool CSMonsterEffectInfo::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMonsterEffectInfo::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMonsterEffectInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMonsterEffectInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterEffectInfo::id() const {
  return id_;
}
inline void CSMonsterEffectInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// CSMonsterAttackRsp

// repeated .CSMonsterAttackInfo attacks = 1;
inline int CSMonsterAttackRsp::attacks_size() const {
  return attacks_.size();
}
inline void CSMonsterAttackRsp::clear_attacks() {
  attacks_.Clear();
}
inline const ::CSMonsterAttackInfo& CSMonsterAttackRsp::attacks(int index) const {
  return attacks_.Get(index);
}
inline ::CSMonsterAttackInfo* CSMonsterAttackRsp::mutable_attacks(int index) {
  return attacks_.Mutable(index);
}
inline ::CSMonsterAttackInfo* CSMonsterAttackRsp::add_attacks() {
  return attacks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >&
CSMonsterAttackRsp::attacks() const {
  return attacks_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterAttackInfo >*
CSMonsterAttackRsp::mutable_attacks() {
  return &attacks_;
}

// -------------------------------------------------------------------

// CSMonsterEffectRsp

// repeated .CSMonsterEffectInfo effects = 1;
inline int CSMonsterEffectRsp::effects_size() const {
  return effects_.size();
}
inline void CSMonsterEffectRsp::clear_effects() {
  effects_.Clear();
}
inline const ::CSMonsterEffectInfo& CSMonsterEffectRsp::effects(int index) const {
  return effects_.Get(index);
}
inline ::CSMonsterEffectInfo* CSMonsterEffectRsp::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::CSMonsterEffectInfo* CSMonsterEffectRsp::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >&
CSMonsterEffectRsp::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterEffectInfo >*
CSMonsterEffectRsp::mutable_effects() {
  return &effects_;
}

// -------------------------------------------------------------------

// CSMonsterBuffEffectInfo_BuffEffectInfo

// required uint32 id = 1;
inline bool CSMonsterBuffEffectInfo_BuffEffectInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CSMonsterBuffEffectInfo_BuffEffectInfo::id() const {
  return id_;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .MonsterBattleInfo battle_info = 2;
inline bool CSMonsterBuffEffectInfo_BuffEffectInfo::has_battle_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::set_has_battle_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterBuffEffectInfo_BuffEffectInfo::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::MonsterBattleInfo::Clear();
  clear_has_battle_info();
}
inline const ::MonsterBattleInfo& CSMonsterBuffEffectInfo_BuffEffectInfo::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::MonsterBattleInfo* CSMonsterBuffEffectInfo_BuffEffectInfo::mutable_battle_info() {
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::MonsterBattleInfo;
  return battle_info_;
}
inline ::MonsterBattleInfo* CSMonsterBuffEffectInfo_BuffEffectInfo::release_battle_info() {
  clear_has_battle_info();
  ::MonsterBattleInfo* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CSMonsterBuffEffectInfo

// required uint32 action_id = 1;
inline bool CSMonsterBuffEffectInfo::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterBuffEffectInfo::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterBuffEffectInfo::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterBuffEffectInfo::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSMonsterBuffEffectInfo::action_id() const {
  return action_id_;
}
inline void CSMonsterBuffEffectInfo::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required uint32 effect_id = 2;
inline bool CSMonsterBuffEffectInfo::has_effect_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterBuffEffectInfo::set_has_effect_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterBuffEffectInfo::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterBuffEffectInfo::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
inline ::google::protobuf::uint32 CSMonsterBuffEffectInfo::effect_id() const {
  return effect_id_;
}
inline void CSMonsterBuffEffectInfo::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
}

// required uint32 delay_time = 3;
inline bool CSMonsterBuffEffectInfo::has_delay_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterBuffEffectInfo::set_has_delay_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterBuffEffectInfo::clear_has_delay_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterBuffEffectInfo::clear_delay_time() {
  delay_time_ = 0u;
  clear_has_delay_time();
}
inline ::google::protobuf::uint32 CSMonsterBuffEffectInfo::delay_time() const {
  return delay_time_;
}
inline void CSMonsterBuffEffectInfo::set_delay_time(::google::protobuf::uint32 value) {
  set_has_delay_time();
  delay_time_ = value;
}

// required uint32 dead_time = 4;
inline bool CSMonsterBuffEffectInfo::has_dead_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterBuffEffectInfo::set_has_dead_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterBuffEffectInfo::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterBuffEffectInfo::clear_dead_time() {
  dead_time_ = 0u;
  clear_has_dead_time();
}
inline ::google::protobuf::uint32 CSMonsterBuffEffectInfo::dead_time() const {
  return dead_time_;
}
inline void CSMonsterBuffEffectInfo::set_dead_time(::google::protobuf::uint32 value) {
  set_has_dead_time();
  dead_time_ = value;
}

// repeated .CSMonsterBuffEffectInfo.BuffEffectInfo buff_info = 5;
inline int CSMonsterBuffEffectInfo::buff_info_size() const {
  return buff_info_.size();
}
inline void CSMonsterBuffEffectInfo::clear_buff_info() {
  buff_info_.Clear();
}
inline const ::CSMonsterBuffEffectInfo_BuffEffectInfo& CSMonsterBuffEffectInfo::buff_info(int index) const {
  return buff_info_.Get(index);
}
inline ::CSMonsterBuffEffectInfo_BuffEffectInfo* CSMonsterBuffEffectInfo::mutable_buff_info(int index) {
  return buff_info_.Mutable(index);
}
inline ::CSMonsterBuffEffectInfo_BuffEffectInfo* CSMonsterBuffEffectInfo::add_buff_info() {
  return buff_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo_BuffEffectInfo >&
CSMonsterBuffEffectInfo::buff_info() const {
  return buff_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo_BuffEffectInfo >*
CSMonsterBuffEffectInfo::mutable_buff_info() {
  return &buff_info_;
}

// required uint32 skill_id = 6;
inline bool CSMonsterBuffEffectInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterBuffEffectInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterBuffEffectInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterBuffEffectInfo::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 CSMonsterBuffEffectInfo::skill_id() const {
  return skill_id_;
}
inline void CSMonsterBuffEffectInfo::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// -------------------------------------------------------------------

// CSBuffEffectRsp

// repeated .CSMonsterBuffEffectInfo effects = 1;
inline int CSBuffEffectRsp::effects_size() const {
  return effects_.size();
}
inline void CSBuffEffectRsp::clear_effects() {
  effects_.Clear();
}
inline const ::CSMonsterBuffEffectInfo& CSBuffEffectRsp::effects(int index) const {
  return effects_.Get(index);
}
inline ::CSMonsterBuffEffectInfo* CSBuffEffectRsp::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::CSMonsterBuffEffectInfo* CSBuffEffectRsp::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo >&
CSBuffEffectRsp::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterBuffEffectInfo >*
CSBuffEffectRsp::mutable_effects() {
  return &effects_;
}

// -------------------------------------------------------------------

// CSMonsterHitRsp_UserInfo

// required uint32 hurt_type = 1;
inline bool CSMonsterHitRsp_UserInfo::has_hurt_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_hurt_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_hurt_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterHitRsp_UserInfo::clear_hurt_type() {
  hurt_type_ = 0u;
  clear_has_hurt_type();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::hurt_type() const {
  return hurt_type_;
}
inline void CSMonsterHitRsp_UserInfo::set_hurt_type(::google::protobuf::uint32 value) {
  set_has_hurt_type();
  hurt_type_ = value;
}

// required uint32 userid = 2;
inline bool CSMonsterHitRsp_UserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterHitRsp_UserInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::userid() const {
  return userid_;
}
inline void CSMonsterHitRsp_UserInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 3;
inline bool CSMonsterHitRsp_UserInfo::has_reg_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_reg_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterHitRsp_UserInfo::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::reg_time() const {
  return reg_time_;
}
inline void CSMonsterHitRsp_UserInfo::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 4;
inline bool CSMonsterHitRsp_UserInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMonsterHitRsp_UserInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::channel_id() const {
  return channel_id_;
}
inline void CSMonsterHitRsp_UserInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 blood = 5;
inline bool CSMonsterHitRsp_UserInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMonsterHitRsp_UserInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::blood() const {
  return blood_;
}
inline void CSMonsterHitRsp_UserInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// required uint32 rage_point = 6;
inline bool CSMonsterHitRsp_UserInfo::has_rage_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMonsterHitRsp_UserInfo::set_has_rage_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMonsterHitRsp_UserInfo::clear_has_rage_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMonsterHitRsp_UserInfo::clear_rage_point() {
  rage_point_ = 0u;
  clear_has_rage_point();
}
inline ::google::protobuf::uint32 CSMonsterHitRsp_UserInfo::rage_point() const {
  return rage_point_;
}
inline void CSMonsterHitRsp_UserInfo::set_rage_point(::google::protobuf::uint32 value) {
  set_has_rage_point();
  rage_point_ = value;
}

// -------------------------------------------------------------------

// CSMonsterHitRsp

// repeated .CSMonsterHitRsp.UserInfo users = 1;
inline int CSMonsterHitRsp::users_size() const {
  return users_.size();
}
inline void CSMonsterHitRsp::clear_users() {
  users_.Clear();
}
inline const ::CSMonsterHitRsp_UserInfo& CSMonsterHitRsp::users(int index) const {
  return users_.Get(index);
}
inline ::CSMonsterHitRsp_UserInfo* CSMonsterHitRsp::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::CSMonsterHitRsp_UserInfo* CSMonsterHitRsp::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >&
CSMonsterHitRsp::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSMonsterHitRsp_UserInfo >*
CSMonsterHitRsp::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSSkillBeginReq

// required uint32 userid = 1;
inline bool CSSkillBeginReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSkillBeginReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSkillBeginReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSkillBeginReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSSkillBeginReq::userid() const {
  return userid_;
}
inline void CSSkillBeginReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSSkillBeginReq::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSSkillBeginReq::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSSkillBeginReq::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSSkillBeginReq::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSSkillBeginReq::reg_time() const {
  return reg_time_;
}
inline void CSSkillBeginReq::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSSkillBeginReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSSkillBeginReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSSkillBeginReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSSkillBeginReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSSkillBeginReq::channel_id() const {
  return channel_id_;
}
inline void CSSkillBeginReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 action_id = 4;
inline bool CSSkillBeginReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSSkillBeginReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSSkillBeginReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSSkillBeginReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSSkillBeginReq::action_id() const {
  return action_id_;
}
inline void CSSkillBeginReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required .CSPoint pos = 5;
inline bool CSSkillBeginReq::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSSkillBeginReq::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSSkillBeginReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSSkillBeginReq::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSSkillBeginReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSSkillBeginReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSSkillBeginReq::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// required float start_dir_x = 6;
inline bool CSSkillBeginReq::has_start_dir_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSSkillBeginReq::set_has_start_dir_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSSkillBeginReq::clear_has_start_dir_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSSkillBeginReq::clear_start_dir_x() {
  start_dir_x_ = 0;
  clear_has_start_dir_x();
}
inline float CSSkillBeginReq::start_dir_x() const {
  return start_dir_x_;
}
inline void CSSkillBeginReq::set_start_dir_x(float value) {
  set_has_start_dir_x();
  start_dir_x_ = value;
}

// required float start_dir_y = 7;
inline bool CSSkillBeginReq::has_start_dir_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSSkillBeginReq::set_has_start_dir_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSSkillBeginReq::clear_has_start_dir_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSSkillBeginReq::clear_start_dir_y() {
  start_dir_y_ = 0;
  clear_has_start_dir_y();
}
inline float CSSkillBeginReq::start_dir_y() const {
  return start_dir_y_;
}
inline void CSSkillBeginReq::set_start_dir_y(float value) {
  set_has_start_dir_y();
  start_dir_y_ = value;
}

// required .CSPoint target_pos = 8;
inline bool CSSkillBeginReq::has_target_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSSkillBeginReq::set_has_target_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSSkillBeginReq::clear_has_target_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSSkillBeginReq::clear_target_pos() {
  if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
  clear_has_target_pos();
}
inline const ::CSPoint& CSSkillBeginReq::target_pos() const {
  return target_pos_ != NULL ? *target_pos_ : *default_instance_->target_pos_;
}
inline ::CSPoint* CSSkillBeginReq::mutable_target_pos() {
  set_has_target_pos();
  if (target_pos_ == NULL) target_pos_ = new ::CSPoint;
  return target_pos_;
}
inline ::CSPoint* CSSkillBeginReq::release_target_pos() {
  clear_has_target_pos();
  ::CSPoint* temp = target_pos_;
  target_pos_ = NULL;
  return temp;
}

// required float direct_x = 9;
inline bool CSSkillBeginReq::has_direct_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSSkillBeginReq::set_has_direct_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSSkillBeginReq::clear_has_direct_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSSkillBeginReq::clear_direct_x() {
  direct_x_ = 0;
  clear_has_direct_x();
}
inline float CSSkillBeginReq::direct_x() const {
  return direct_x_;
}
inline void CSSkillBeginReq::set_direct_x(float value) {
  set_has_direct_x();
  direct_x_ = value;
}

// required float direct_y = 10;
inline bool CSSkillBeginReq::has_direct_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSSkillBeginReq::set_has_direct_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSSkillBeginReq::clear_has_direct_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSSkillBeginReq::clear_direct_y() {
  direct_y_ = 0;
  clear_has_direct_y();
}
inline float CSSkillBeginReq::direct_y() const {
  return direct_y_;
}
inline void CSSkillBeginReq::set_direct_y(float value) {
  set_has_direct_y();
  direct_y_ = value;
}

// required bool aim = 11;
inline bool CSSkillBeginReq::has_aim() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSSkillBeginReq::set_has_aim() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSSkillBeginReq::clear_has_aim() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSSkillBeginReq::clear_aim() {
  aim_ = false;
  clear_has_aim();
}
inline bool CSSkillBeginReq::aim() const {
  return aim_;
}
inline void CSSkillBeginReq::set_aim(bool value) {
  set_has_aim();
  aim_ = value;
}

// -------------------------------------------------------------------

// CSSkillBeginRsp

// required uint32 userid = 1;
inline bool CSSkillBeginRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSkillBeginRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSkillBeginRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSkillBeginRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSSkillBeginRsp::userid() const {
  return userid_;
}
inline void CSSkillBeginRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSSkillBeginRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSSkillBeginRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSSkillBeginRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSSkillBeginRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSSkillBeginRsp::reg_time() const {
  return reg_time_;
}
inline void CSSkillBeginRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSSkillBeginRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSSkillBeginRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSSkillBeginRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSSkillBeginRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSSkillBeginRsp::channel_id() const {
  return channel_id_;
}
inline void CSSkillBeginRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 action_id = 4;
inline bool CSSkillBeginRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSSkillBeginRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSSkillBeginRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSSkillBeginRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSSkillBeginRsp::action_id() const {
  return action_id_;
}
inline void CSSkillBeginRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// required .CSPoint pos = 5;
inline bool CSSkillBeginRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSSkillBeginRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSSkillBeginRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSSkillBeginRsp::clear_pos() {
  if (pos_ != NULL) pos_->::CSPoint::Clear();
  clear_has_pos();
}
inline const ::CSPoint& CSSkillBeginRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CSPoint* CSSkillBeginRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::CSPoint;
  return pos_;
}
inline ::CSPoint* CSSkillBeginRsp::release_pos() {
  clear_has_pos();
  ::CSPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}

// required float start_dir_x = 6;
inline bool CSSkillBeginRsp::has_start_dir_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSSkillBeginRsp::set_has_start_dir_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSSkillBeginRsp::clear_has_start_dir_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSSkillBeginRsp::clear_start_dir_x() {
  start_dir_x_ = 0;
  clear_has_start_dir_x();
}
inline float CSSkillBeginRsp::start_dir_x() const {
  return start_dir_x_;
}
inline void CSSkillBeginRsp::set_start_dir_x(float value) {
  set_has_start_dir_x();
  start_dir_x_ = value;
}

// required float start_dir_y = 7;
inline bool CSSkillBeginRsp::has_start_dir_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSSkillBeginRsp::set_has_start_dir_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSSkillBeginRsp::clear_has_start_dir_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSSkillBeginRsp::clear_start_dir_y() {
  start_dir_y_ = 0;
  clear_has_start_dir_y();
}
inline float CSSkillBeginRsp::start_dir_y() const {
  return start_dir_y_;
}
inline void CSSkillBeginRsp::set_start_dir_y(float value) {
  set_has_start_dir_y();
  start_dir_y_ = value;
}

// required .CSPoint target_pos = 8;
inline bool CSSkillBeginRsp::has_target_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSSkillBeginRsp::set_has_target_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSSkillBeginRsp::clear_has_target_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSSkillBeginRsp::clear_target_pos() {
  if (target_pos_ != NULL) target_pos_->::CSPoint::Clear();
  clear_has_target_pos();
}
inline const ::CSPoint& CSSkillBeginRsp::target_pos() const {
  return target_pos_ != NULL ? *target_pos_ : *default_instance_->target_pos_;
}
inline ::CSPoint* CSSkillBeginRsp::mutable_target_pos() {
  set_has_target_pos();
  if (target_pos_ == NULL) target_pos_ = new ::CSPoint;
  return target_pos_;
}
inline ::CSPoint* CSSkillBeginRsp::release_target_pos() {
  clear_has_target_pos();
  ::CSPoint* temp = target_pos_;
  target_pos_ = NULL;
  return temp;
}

// required float direct_x = 9;
inline bool CSSkillBeginRsp::has_direct_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSSkillBeginRsp::set_has_direct_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSSkillBeginRsp::clear_has_direct_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSSkillBeginRsp::clear_direct_x() {
  direct_x_ = 0;
  clear_has_direct_x();
}
inline float CSSkillBeginRsp::direct_x() const {
  return direct_x_;
}
inline void CSSkillBeginRsp::set_direct_x(float value) {
  set_has_direct_x();
  direct_x_ = value;
}

// required float direct_y = 10;
inline bool CSSkillBeginRsp::has_direct_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSSkillBeginRsp::set_has_direct_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSSkillBeginRsp::clear_has_direct_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSSkillBeginRsp::clear_direct_y() {
  direct_y_ = 0;
  clear_has_direct_y();
}
inline float CSSkillBeginRsp::direct_y() const {
  return direct_y_;
}
inline void CSSkillBeginRsp::set_direct_y(float value) {
  set_has_direct_y();
  direct_y_ = value;
}

// required bool aim = 11;
inline bool CSSkillBeginRsp::has_aim() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSSkillBeginRsp::set_has_aim() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSSkillBeginRsp::clear_has_aim() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSSkillBeginRsp::clear_aim() {
  aim_ = false;
  clear_has_aim();
}
inline bool CSSkillBeginRsp::aim() const {
  return aim_;
}
inline void CSSkillBeginRsp::set_aim(bool value) {
  set_has_aim();
  aim_ = value;
}

// -------------------------------------------------------------------

// CSPlayerAttackReq

// required uint32 userid = 1;
inline bool CSPlayerAttackReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerAttackReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerAttackReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerAttackReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerAttackReq::userid() const {
  return userid_;
}
inline void CSPlayerAttackReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSPlayerAttackReq::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerAttackReq::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerAttackReq::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerAttackReq::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSPlayerAttackReq::reg_time() const {
  return reg_time_;
}
inline void CSPlayerAttackReq::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSPlayerAttackReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerAttackReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerAttackReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerAttackReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSPlayerAttackReq::channel_id() const {
  return channel_id_;
}
inline void CSPlayerAttackReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required .CSPoint start_pos = 4;
inline bool CSPlayerAttackReq::has_start_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerAttackReq::set_has_start_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerAttackReq::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerAttackReq::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerAttackReq::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}

// required .CSPoint start_direct = 5;
inline bool CSPlayerAttackReq::has_start_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerAttackReq::set_has_start_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerAttackReq::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerAttackReq::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerAttackReq::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}

// required .CSPoint end_pos = 6;
inline bool CSPlayerAttackReq::has_end_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerAttackReq::set_has_end_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerAttackReq::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerAttackReq::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerAttackReq::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerAttackReq::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}

// required .CSPoint end_direct = 7;
inline bool CSPlayerAttackReq::has_end_direct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSPlayerAttackReq::set_has_end_direct() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSPlayerAttackReq::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSPlayerAttackReq::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerAttackReq::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerAttackReq::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}

// required uint32 action_id = 8;
inline bool CSPlayerAttackReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSPlayerAttackReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSPlayerAttackReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSPlayerAttackReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerAttackReq::action_id() const {
  return action_id_;
}
inline void CSPlayerAttackReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackMonsterInfo monsters = 9;
inline int CSPlayerAttackReq::monsters_size() const {
  return monsters_.size();
}
inline void CSPlayerAttackReq::clear_monsters() {
  monsters_.Clear();
}
inline const ::AttackMonsterInfo& CSPlayerAttackReq::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackReq::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackReq::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSPlayerAttackReq::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSPlayerAttackReq::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// CSPlayerAttackRsp

// required uint32 userid = 1;
inline bool CSPlayerAttackRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerAttackRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerAttackRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerAttackRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerAttackRsp::userid() const {
  return userid_;
}
inline void CSPlayerAttackRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSPlayerAttackRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerAttackRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerAttackRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerAttackRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSPlayerAttackRsp::reg_time() const {
  return reg_time_;
}
inline void CSPlayerAttackRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSPlayerAttackRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerAttackRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerAttackRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerAttackRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSPlayerAttackRsp::channel_id() const {
  return channel_id_;
}
inline void CSPlayerAttackRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required .CSPoint start_pos = 4;
inline bool CSPlayerAttackRsp::has_start_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerAttackRsp::set_has_start_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerAttackRsp::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerAttackRsp::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerAttackRsp::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}

// required .CSPoint start_direct = 5;
inline bool CSPlayerAttackRsp::has_start_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerAttackRsp::set_has_start_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerAttackRsp::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerAttackRsp::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerAttackRsp::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}

// required .CSPoint end_pos = 6;
inline bool CSPlayerAttackRsp::has_end_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerAttackRsp::set_has_end_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerAttackRsp::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerAttackRsp::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerAttackRsp::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}

// required .CSPoint end_direct = 7;
inline bool CSPlayerAttackRsp::has_end_direct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSPlayerAttackRsp::set_has_end_direct() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSPlayerAttackRsp::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSPlayerAttackRsp::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerAttackRsp::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerAttackRsp::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}

// required uint32 action_id = 8;
inline bool CSPlayerAttackRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSPlayerAttackRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSPlayerAttackRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSPlayerAttackRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerAttackRsp::action_id() const {
  return action_id_;
}
inline void CSPlayerAttackRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackMonsterInfo monsters = 9;
inline int CSPlayerAttackRsp::monsters_size() const {
  return monsters_.size();
}
inline void CSPlayerAttackRsp::clear_monsters() {
  monsters_.Clear();
}
inline const ::AttackMonsterInfo& CSPlayerAttackRsp::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackRsp::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::AttackMonsterInfo* CSPlayerAttackRsp::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSPlayerAttackRsp::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSPlayerAttackRsp::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// AttackPlayerInfo

// required uint32 userid = 1;
inline bool AttackPlayerInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackPlayerInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackPlayerInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackPlayerInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::userid() const {
  return userid_;
}
inline void AttackPlayerInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool AttackPlayerInfo::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackPlayerInfo::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackPlayerInfo::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackPlayerInfo::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::reg_time() const {
  return reg_time_;
}
inline void AttackPlayerInfo::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool AttackPlayerInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackPlayerInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackPlayerInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackPlayerInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::channel_id() const {
  return channel_id_;
}
inline void AttackPlayerInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 blood = 4;
inline bool AttackPlayerInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttackPlayerInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttackPlayerInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttackPlayerInfo::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::blood() const {
  return blood_;
}
inline void AttackPlayerInfo::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// required uint32 hurt_type = 5;
inline bool AttackPlayerInfo::has_hurt_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AttackPlayerInfo::set_has_hurt_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AttackPlayerInfo::clear_has_hurt_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AttackPlayerInfo::clear_hurt_type() {
  hurt_type_ = 0u;
  clear_has_hurt_type();
}
inline ::google::protobuf::uint32 AttackPlayerInfo::hurt_type() const {
  return hurt_type_;
}
inline void AttackPlayerInfo::set_hurt_type(::google::protobuf::uint32 value) {
  set_has_hurt_type();
  hurt_type_ = value;
}

// -------------------------------------------------------------------

// CSPlayerHitPlayerReq

// required uint32 userid = 1;
inline bool CSPlayerHitPlayerReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHitPlayerReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHitPlayerReq::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerReq::userid() const {
  return userid_;
}
inline void CSPlayerHitPlayerReq::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSPlayerHitPlayerReq::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerHitPlayerReq::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerHitPlayerReq::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerReq::reg_time() const {
  return reg_time_;
}
inline void CSPlayerHitPlayerReq::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSPlayerHitPlayerReq::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerHitPlayerReq::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerHitPlayerReq::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerReq::channel_id() const {
  return channel_id_;
}
inline void CSPlayerHitPlayerReq::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required .CSPoint start_pos = 4;
inline bool CSPlayerHitPlayerReq::has_start_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_start_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerHitPlayerReq::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerHitPlayerReq::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}

// required .CSPoint start_direct = 5;
inline bool CSPlayerHitPlayerReq::has_start_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_start_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerHitPlayerReq::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerHitPlayerReq::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}

// required .CSPoint end_pos = 6;
inline bool CSPlayerHitPlayerReq::has_end_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_end_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerHitPlayerReq::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerHitPlayerReq::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}

// required .CSPoint end_direct = 7;
inline bool CSPlayerHitPlayerReq::has_end_direct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_end_direct() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSPlayerHitPlayerReq::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSPlayerHitPlayerReq::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerReq::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerReq::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}

// required uint32 action_id = 8;
inline bool CSPlayerHitPlayerReq::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSPlayerHitPlayerReq::set_has_action_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSPlayerHitPlayerReq::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSPlayerHitPlayerReq::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerReq::action_id() const {
  return action_id_;
}
inline void CSPlayerHitPlayerReq::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackPlayerInfo users = 9;
inline int CSPlayerHitPlayerReq::users_size() const {
  return users_.size();
}
inline void CSPlayerHitPlayerReq::clear_users() {
  users_.Clear();
}
inline const ::AttackPlayerInfo& CSPlayerHitPlayerReq::users(int index) const {
  return users_.Get(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerReq::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerReq::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
CSPlayerHitPlayerReq::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
CSPlayerHitPlayerReq::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSPlayerHitPlayerRsp

// required uint32 userid = 1;
inline bool CSPlayerHitPlayerRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHitPlayerRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHitPlayerRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerRsp::userid() const {
  return userid_;
}
inline void CSPlayerHitPlayerRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSPlayerHitPlayerRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerHitPlayerRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerHitPlayerRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerRsp::reg_time() const {
  return reg_time_;
}
inline void CSPlayerHitPlayerRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSPlayerHitPlayerRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerHitPlayerRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerHitPlayerRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerRsp::channel_id() const {
  return channel_id_;
}
inline void CSPlayerHitPlayerRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required .CSPoint start_pos = 4;
inline bool CSPlayerHitPlayerRsp::has_start_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_start_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerHitPlayerRsp::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerHitPlayerRsp::clear_start_pos() {
  if (start_pos_ != NULL) start_pos_->::CSPoint::Clear();
  clear_has_start_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::start_pos() const {
  return start_pos_ != NULL ? *start_pos_ : *default_instance_->start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_start_pos() {
  set_has_start_pos();
  if (start_pos_ == NULL) start_pos_ = new ::CSPoint;
  return start_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_start_pos() {
  clear_has_start_pos();
  ::CSPoint* temp = start_pos_;
  start_pos_ = NULL;
  return temp;
}

// required .CSPoint start_direct = 5;
inline bool CSPlayerHitPlayerRsp::has_start_direct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_start_direct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerHitPlayerRsp::clear_has_start_direct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerHitPlayerRsp::clear_start_direct() {
  if (start_direct_ != NULL) start_direct_->::CSPoint::Clear();
  clear_has_start_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::start_direct() const {
  return start_direct_ != NULL ? *start_direct_ : *default_instance_->start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_start_direct() {
  set_has_start_direct();
  if (start_direct_ == NULL) start_direct_ = new ::CSPoint;
  return start_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_start_direct() {
  clear_has_start_direct();
  ::CSPoint* temp = start_direct_;
  start_direct_ = NULL;
  return temp;
}

// required .CSPoint end_pos = 6;
inline bool CSPlayerHitPlayerRsp::has_end_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_end_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerHitPlayerRsp::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerHitPlayerRsp::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::CSPoint::Clear();
  clear_has_end_pos();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::end_pos() const {
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) end_pos_ = new ::CSPoint;
  return end_pos_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_end_pos() {
  clear_has_end_pos();
  ::CSPoint* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}

// required .CSPoint end_direct = 7;
inline bool CSPlayerHitPlayerRsp::has_end_direct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_end_direct() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSPlayerHitPlayerRsp::clear_has_end_direct() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSPlayerHitPlayerRsp::clear_end_direct() {
  if (end_direct_ != NULL) end_direct_->::CSPoint::Clear();
  clear_has_end_direct();
}
inline const ::CSPoint& CSPlayerHitPlayerRsp::end_direct() const {
  return end_direct_ != NULL ? *end_direct_ : *default_instance_->end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::mutable_end_direct() {
  set_has_end_direct();
  if (end_direct_ == NULL) end_direct_ = new ::CSPoint;
  return end_direct_;
}
inline ::CSPoint* CSPlayerHitPlayerRsp::release_end_direct() {
  clear_has_end_direct();
  ::CSPoint* temp = end_direct_;
  end_direct_ = NULL;
  return temp;
}

// required uint32 action_id = 8;
inline bool CSPlayerHitPlayerRsp::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSPlayerHitPlayerRsp::set_has_action_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSPlayerHitPlayerRsp::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSPlayerHitPlayerRsp::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 CSPlayerHitPlayerRsp::action_id() const {
  return action_id_;
}
inline void CSPlayerHitPlayerRsp::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// repeated .AttackPlayerInfo users = 9;
inline int CSPlayerHitPlayerRsp::users_size() const {
  return users_.size();
}
inline void CSPlayerHitPlayerRsp::clear_users() {
  users_.Clear();
}
inline const ::AttackPlayerInfo& CSPlayerHitPlayerRsp::users(int index) const {
  return users_.Get(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerRsp::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::AttackPlayerInfo* CSPlayerHitPlayerRsp::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >&
CSPlayerHitPlayerRsp::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackPlayerInfo >*
CSPlayerHitPlayerRsp::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// CSPlayerHPRsp

// required uint32 userid = 1;
inline bool CSPlayerHPRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHPRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHPRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHPRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::userid() const {
  return userid_;
}
inline void CSPlayerHPRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSPlayerHPRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerHPRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerHPRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerHPRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::reg_time() const {
  return reg_time_;
}
inline void CSPlayerHPRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSPlayerHPRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerHPRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerHPRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerHPRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::channel_id() const {
  return channel_id_;
}
inline void CSPlayerHPRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// required uint32 blood = 4;
inline bool CSPlayerHPRsp::has_blood() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSPlayerHPRsp::set_has_blood() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSPlayerHPRsp::clear_has_blood() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSPlayerHPRsp::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::blood() const {
  return blood_;
}
inline void CSPlayerHPRsp::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// optional uint32 source_id = 5;
inline bool CSPlayerHPRsp::has_source_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSPlayerHPRsp::set_has_source_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSPlayerHPRsp::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSPlayerHPRsp::clear_source_id() {
  source_id_ = 0u;
  clear_has_source_id();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::source_id() const {
  return source_id_;
}
inline void CSPlayerHPRsp::set_source_id(::google::protobuf::uint32 value) {
  set_has_source_id();
  source_id_ = value;
}

// optional uint32 source_reg_time = 6;
inline bool CSPlayerHPRsp::has_source_reg_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSPlayerHPRsp::set_has_source_reg_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSPlayerHPRsp::clear_has_source_reg_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSPlayerHPRsp::clear_source_reg_time() {
  source_reg_time_ = 0u;
  clear_has_source_reg_time();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::source_reg_time() const {
  return source_reg_time_;
}
inline void CSPlayerHPRsp::set_source_reg_time(::google::protobuf::uint32 value) {
  set_has_source_reg_time();
  source_reg_time_ = value;
}

// optional uint32 source_channel_id = 7;
inline bool CSPlayerHPRsp::has_source_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSPlayerHPRsp::set_has_source_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSPlayerHPRsp::clear_has_source_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSPlayerHPRsp::clear_source_channel_id() {
  source_channel_id_ = 0u;
  clear_has_source_channel_id();
}
inline ::google::protobuf::uint32 CSPlayerHPRsp::source_channel_id() const {
  return source_channel_id_;
}
inline void CSPlayerHPRsp::set_source_channel_id(::google::protobuf::uint32 value) {
  set_has_source_channel_id();
  source_channel_id_ = value;
}

// -------------------------------------------------------------------

// CSPlayerHPReq

// required int32 blood = 1;
inline bool CSPlayerHPReq::has_blood() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerHPReq::set_has_blood() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerHPReq::clear_has_blood() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerHPReq::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 CSPlayerHPReq::blood() const {
  return blood_;
}
inline void CSPlayerHPReq::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// -------------------------------------------------------------------

// CSMonsterBloodRsp

// required uint32 userid = 1;
inline bool CSMonsterBloodRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMonsterBloodRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMonsterBloodRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMonsterBloodRsp::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 CSMonsterBloodRsp::userid() const {
  return userid_;
}
inline void CSMonsterBloodRsp::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool CSMonsterBloodRsp::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMonsterBloodRsp::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMonsterBloodRsp::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMonsterBloodRsp::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 CSMonsterBloodRsp::reg_time() const {
  return reg_time_;
}
inline void CSMonsterBloodRsp::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 channel_id = 3;
inline bool CSMonsterBloodRsp::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMonsterBloodRsp::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMonsterBloodRsp::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMonsterBloodRsp::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 CSMonsterBloodRsp::channel_id() const {
  return channel_id_;
}
inline void CSMonsterBloodRsp::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// repeated .AttackMonsterInfo monsters = 4;
inline int CSMonsterBloodRsp::monsters_size() const {
  return monsters_.size();
}
inline void CSMonsterBloodRsp::clear_monsters() {
  monsters_.Clear();
}
inline const ::AttackMonsterInfo& CSMonsterBloodRsp::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::AttackMonsterInfo* CSMonsterBloodRsp::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::AttackMonsterInfo* CSMonsterBloodRsp::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >&
CSMonsterBloodRsp::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::AttackMonsterInfo >*
CSMonsterBloodRsp::mutable_monsters() {
  return &monsters_;
}

// -------------------------------------------------------------------

// CSPlayerDieShowReq

// -------------------------------------------------------------------

// CSPlayerDieShowRsp

// required uint32 attack = 1;
inline bool CSPlayerDieShowRsp::has_attack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerDieShowRsp::set_has_attack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerDieShowRsp::clear_has_attack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerDieShowRsp::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 CSPlayerDieShowRsp::attack() const {
  return attack_;
}
inline void CSPlayerDieShowRsp::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
}

// required uint32 defend = 2;
inline bool CSPlayerDieShowRsp::has_defend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPlayerDieShowRsp::set_has_defend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPlayerDieShowRsp::clear_has_defend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPlayerDieShowRsp::clear_defend() {
  defend_ = 0u;
  clear_has_defend();
}
inline ::google::protobuf::uint32 CSPlayerDieShowRsp::defend() const {
  return defend_;
}
inline void CSPlayerDieShowRsp::set_defend(::google::protobuf::uint32 value) {
  set_has_defend();
  defend_ = value;
}

// required uint32 hp = 3;
inline bool CSPlayerDieShowRsp::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSPlayerDieShowRsp::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSPlayerDieShowRsp::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSPlayerDieShowRsp::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 CSPlayerDieShowRsp::hp() const {
  return hp_;
}
inline void CSPlayerDieShowRsp::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// CSPlayerMayImproveReq

// -------------------------------------------------------------------

// CSPlayerMayImproveRsp

// required uint32 imp_item = 1;
inline bool CSPlayerMayImproveRsp::has_imp_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPlayerMayImproveRsp::set_has_imp_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPlayerMayImproveRsp::clear_has_imp_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPlayerMayImproveRsp::clear_imp_item() {
  imp_item_ = 0u;
  clear_has_imp_item();
}
inline ::google::protobuf::uint32 CSPlayerMayImproveRsp::imp_item() const {
  return imp_item_;
}
inline void CSPlayerMayImproveRsp::set_imp_item(::google::protobuf::uint32 value) {
  set_has_imp_item();
  imp_item_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fbattle_2eproto__INCLUDED
