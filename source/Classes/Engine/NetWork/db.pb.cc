// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rudb {

namespace {

const ::google::protobuf::Descriptor* db_msgheader_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_msgheader_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_pvai_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_pvai_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_player_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_player_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crtrole_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crtrole_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crtrole_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crtrole_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_gm_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_role_list_by_gm_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_login_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_login_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_login_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_login_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_role_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_role_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_levelup_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_levelup_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_equip_hole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_equip_hole_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_packpos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_packpos_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_update_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_update_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_backpack_move_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_backpack_move_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_instance_modify_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_instance_modify_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_task_step_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_task_step_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_daily_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_daily_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_daily_task_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_daily_task_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_daily_task_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_daily_task_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_replace_daily_task_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_replace_daily_task_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_daily_task_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_daily_task_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attribute_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attribute_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shared_attribute_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shared_attribute_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shared_attribute_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shared_attribute_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_shared_attribute_set_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_shared_attribute_set_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_query_out_skill_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_query_out_skill_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_skill_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_skill_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_id_by_name_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_id_by_name_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_id_by_name_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_id_by_name_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* show_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  show_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_nearby_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_nearby_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_nearby_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_nearby_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_partner_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_partner_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_list_partner_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_list_partner_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_friend_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_friend_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_dnd_del_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_dnd_del_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_one_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_one_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_add_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_add_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_add_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_add_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_query_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_query_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_query_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_query_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_exchange_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_exchange_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_range_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_range_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_range_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_range_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_ai_rank_log_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_ai_rank_log_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_update_pvai_basic_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_update_pvai_basic_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_step_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_step_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* activity_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  activity_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_activity_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_activity_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_activity_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_activity_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_replace_activity_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_replace_activity_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_delete_activity_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_delete_activity_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_item_attachment_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_item_attachment_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_mail_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_mail_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_new_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_new_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_new_mail_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_new_mail_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_infos_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_infos_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_infos_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_infos_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_players_info_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_players_info_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_players_info_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_players_info_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_userinfo_by_name_zone_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_userinfo_by_name_zone_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_list_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_list_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_mail_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_mail_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_list_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_list_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_query_mail_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_query_mail_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_attach_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_attach_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_attach_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_attach_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_get_attach_success_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_get_attach_success_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_del_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_del_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_new_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_new_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_new_mail_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_new_mail_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_by_switch_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_by_switch_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_by_switch_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_by_switch_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_rel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_rel_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_rel_by_switch_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_rel_by_switch_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_mail_rel_flush_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_mail_rel_flush_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_diamond_by_switch_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_add_diamond_by_switch_out_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2eproto() {
  protobuf_AddDesc_db_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db.proto");
  GOOGLE_CHECK(file != NULL);
  db_msgheader_t_descriptor_ = file->message_type(0);
  static const int db_msgheader_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, target_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, src_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, login_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, aux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, trans_id_),
  };
  db_msgheader_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_msgheader_t_descriptor_,
      db_msgheader_t::default_instance_,
      db_msgheader_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_msgheader_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_msgheader_t));
  db_player_pvai_info_t_descriptor_ = file->message_type(1);
  static const int db_player_pvai_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, accu_end_time_),
  };
  db_player_pvai_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_pvai_info_t_descriptor_,
      db_player_pvai_info_t::default_instance_,
      db_player_pvai_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_pvai_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_pvai_info_t));
  db_player_info_t_descriptor_ = file->message_type(2);
  static const int db_player_info_t_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, pvai_info_),
  };
  db_player_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_player_info_t_descriptor_,
      db_player_info_t::default_instance_,
      db_player_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_player_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_player_info_t));
  db_crtrole_in_descriptor_ = file->message_type(3);
  static const int db_crtrole_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, gender_),
  };
  db_crtrole_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_crtrole_in_descriptor_,
      db_crtrole_in::default_instance_,
      db_crtrole_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_crtrole_in));
  db_crtrole_out_descriptor_ = file->message_type(4);
  static const int db_crtrole_out_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, regtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, gender_),
  };
  db_crtrole_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_crtrole_out_descriptor_,
      db_crtrole_out::default_instance_,
      db_crtrole_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crtrole_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_crtrole_out));
  db_get_role_list_in_descriptor_ = file->message_type(5);
  static const int db_get_role_list_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, userid_),
  };
  db_get_role_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_in_descriptor_,
      db_get_role_list_in::default_instance_,
      db_get_role_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_in));
  db_get_role_list_out_descriptor_ = file->message_type(6);
  static const int db_get_role_list_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, roles_),
  };
  db_get_role_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_out_descriptor_,
      db_get_role_list_out::default_instance_,
      db_get_role_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_out));
  db_get_role_list_by_gm_in_descriptor_ = file->message_type(7);
  static const int db_get_role_list_by_gm_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, zone_id_),
  };
  db_get_role_list_by_gm_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_gm_in_descriptor_,
      db_get_role_list_by_gm_in::default_instance_,
      db_get_role_list_by_gm_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_gm_in));
  db_get_role_list_by_gm_out_descriptor_ = file->message_type(8);
  static const int db_get_role_list_by_gm_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, roles_),
  };
  db_get_role_list_by_gm_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_role_list_by_gm_out_descriptor_,
      db_get_role_list_by_gm_out::default_instance_,
      db_get_role_list_by_gm_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_role_list_by_gm_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_role_list_by_gm_out));
  db_login_in_descriptor_ = file->message_type(9);
  static const int db_login_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, zone_id_),
  };
  db_login_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_login_in_descriptor_,
      db_login_in::default_instance_,
      db_login_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_login_in));
  db_login_out_descriptor_ = file->message_type(10);
  static const int db_login_out_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, regtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, last_login_time_),
  };
  db_login_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_login_out_descriptor_,
      db_login_out::default_instance_,
      db_login_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_login_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_login_out));
  db_del_role_in_descriptor_ = file->message_type(11);
  static const int db_del_role_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, zone_id_),
  };
  db_del_role_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_role_in_descriptor_,
      db_del_role_in::default_instance_,
      db_del_role_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_role_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_role_in));
  db_levelup_in_descriptor_ = file->message_type(12);
  static const int db_levelup_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, level_),
  };
  db_levelup_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_levelup_in_descriptor_,
      db_levelup_in::default_instance_,
      db_levelup_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_levelup_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_levelup_in));
  db_backpack_query_in_descriptor_ = file->message_type(13);
  static const int db_backpack_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, zone_id_),
  };
  db_backpack_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_query_in_descriptor_,
      db_backpack_query_in::default_instance_,
      db_backpack_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_query_in));
  db_equip_hole_descriptor_ = file->message_type(14);
  static const int db_equip_hole_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, hole_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, item_gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, attr_value_),
  };
  db_equip_hole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_equip_hole_descriptor_,
      db_equip_hole::default_instance_,
      db_equip_hole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_equip_hole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_equip_hole));
  db_packpos_descriptor_ = file->message_type(15);
  static const int db_packpos_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, hole4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, equip_holes_),
  };
  db_packpos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_packpos_descriptor_,
      db_packpos::default_instance_,
      db_packpos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_packpos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_packpos));
  db_backpack_query_out_descriptor_ = file->message_type(16);
  static const int db_backpack_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, items_),
  };
  db_backpack_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_query_out_descriptor_,
      db_backpack_query_out::default_instance_,
      db_backpack_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_query_out));
  db_backpack_add_in_descriptor_ = file->message_type(17);
  static const int db_backpack_add_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, items_),
  };
  db_backpack_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_add_in_descriptor_,
      db_backpack_add_in::default_instance_,
      db_backpack_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_add_in));
  db_backpack_update_in_descriptor_ = file->message_type(18);
  static const int db_backpack_update_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, items_),
  };
  db_backpack_update_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_update_in_descriptor_,
      db_backpack_update_in::default_instance_,
      db_backpack_update_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_update_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_update_in));
  db_backpack_del_in_descriptor_ = file->message_type(19);
  static const int db_backpack_del_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, items_),
  };
  db_backpack_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_del_in_descriptor_,
      db_backpack_del_in::default_instance_,
      db_backpack_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_del_in));
  db_backpack_move_in_descriptor_ = file->message_type(20);
  static const int db_backpack_move_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, pos_to_),
  };
  db_backpack_move_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_backpack_move_in_descriptor_,
      db_backpack_move_in::default_instance_,
      db_backpack_move_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_backpack_move_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_backpack_move_in));
  db_instance_info_descriptor_ = file->message_type(21);
  static const int db_instance_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, can_enter_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, dead_tm_),
  };
  db_instance_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_info_descriptor_,
      db_instance_info::default_instance_,
      db_instance_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_info));
  db_instance_query_in_descriptor_ = file->message_type(22);
  static const int db_instance_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, zone_id_),
  };
  db_instance_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_query_in_descriptor_,
      db_instance_query_in::default_instance_,
      db_instance_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_query_in));
  db_instance_query_out_descriptor_ = file->message_type(23);
  static const int db_instance_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, instances_),
  };
  db_instance_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_query_out_descriptor_,
      db_instance_query_out::default_instance_,
      db_instance_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_query_out));
  db_instance_modify_in_descriptor_ = file->message_type(24);
  static const int db_instance_modify_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, instances_),
  };
  db_instance_modify_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_instance_modify_in_descriptor_,
      db_instance_modify_in::default_instance_,
      db_instance_modify_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_instance_modify_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_instance_modify_in));
  db_task_query_in_descriptor_ = file->message_type(25);
  static const int db_task_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, zone_id_),
  };
  db_task_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_query_in_descriptor_,
      db_task_query_in::default_instance_,
      db_task_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_query_in));
  db_task_info_descriptor_ = file->message_type(26);
  static const int db_task_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, step_rate_),
  };
  db_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_info_descriptor_,
      db_task_info::default_instance_,
      db_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_info));
  db_task_query_out_descriptor_ = file->message_type(27);
  static const int db_task_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, tasks_),
  };
  db_task_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_query_out_descriptor_,
      db_task_query_out::default_instance_,
      db_task_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_query_out));
  db_task_step_in_descriptor_ = file->message_type(28);
  static const int db_task_step_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, step_rate_),
  };
  db_task_step_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_task_step_in_descriptor_,
      db_task_step_in::default_instance_,
      db_task_step_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_task_step_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_task_step_in));
  db_daily_task_info_descriptor_ = file->message_type(29);
  static const int db_daily_task_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, daily_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, daily_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, dead_tm_),
  };
  db_daily_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_daily_task_info_descriptor_,
      db_daily_task_info::default_instance_,
      db_daily_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_daily_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_daily_task_info));
  db_query_daily_task_in_descriptor_ = file->message_type(30);
  static const int db_query_daily_task_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_in, zone_id_),
  };
  db_query_daily_task_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_daily_task_in_descriptor_,
      db_query_daily_task_in::default_instance_,
      db_query_daily_task_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_daily_task_in));
  db_query_daily_task_out_descriptor_ = file->message_type(31);
  static const int db_query_daily_task_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_out, daily_tasks_),
  };
  db_query_daily_task_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_daily_task_out_descriptor_,
      db_query_daily_task_out::default_instance_,
      db_query_daily_task_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_daily_task_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_daily_task_out));
  db_replace_daily_task_in_descriptor_ = file->message_type(32);
  static const int db_replace_daily_task_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, daily_tasks_),
  };
  db_replace_daily_task_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_replace_daily_task_in_descriptor_,
      db_replace_daily_task_in::default_instance_,
      db_replace_daily_task_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_daily_task_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_replace_daily_task_in));
  db_del_daily_task_in_descriptor_ = file->message_type(33);
  static const int db_del_daily_task_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_daily_task_in, zone_id_),
  };
  db_del_daily_task_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_daily_task_in_descriptor_,
      db_del_daily_task_in::default_instance_,
      db_del_daily_task_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_daily_task_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_daily_task_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_daily_task_in));
  db_attribute_query_in_descriptor_ = file->message_type(34);
  static const int db_attribute_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, zone_id_),
  };
  db_attribute_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_query_in_descriptor_,
      db_attribute_query_in::default_instance_,
      db_attribute_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_query_in));
  db_attribute_info_descriptor_ = file->message_type(35);
  static const int db_attribute_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, dead_tm_),
  };
  db_attribute_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_info_descriptor_,
      db_attribute_info::default_instance_,
      db_attribute_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_info));
  db_attribute_query_out_descriptor_ = file->message_type(36);
  static const int db_attribute_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, attributes_),
  };
  db_attribute_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_query_out_descriptor_,
      db_attribute_query_out::default_instance_,
      db_attribute_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_query_out));
  db_attribute_set_in_descriptor_ = file->message_type(37);
  static const int db_attribute_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, dead_tm_),
  };
  db_attribute_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attribute_set_in_descriptor_,
      db_attribute_set_in::default_instance_,
      db_attribute_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attribute_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attribute_set_in));
  db_shared_attribute_query_in_descriptor_ = file->message_type(38);
  static const int db_shared_attribute_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_in, zone_id_),
  };
  db_shared_attribute_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shared_attribute_query_in_descriptor_,
      db_shared_attribute_query_in::default_instance_,
      db_shared_attribute_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shared_attribute_query_in));
  db_shared_attribute_query_out_descriptor_ = file->message_type(39);
  static const int db_shared_attribute_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_out, shared_attributes_),
  };
  db_shared_attribute_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shared_attribute_query_out_descriptor_,
      db_shared_attribute_query_out::default_instance_,
      db_shared_attribute_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shared_attribute_query_out));
  db_shared_attribute_set_in_descriptor_ = file->message_type(40);
  static const int db_shared_attribute_set_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, dead_tm_),
  };
  db_shared_attribute_set_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_shared_attribute_set_in_descriptor_,
      db_shared_attribute_set_in::default_instance_,
      db_shared_attribute_set_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_shared_attribute_set_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_shared_attribute_set_in));
  db_skill_query_in_descriptor_ = file->message_type(41);
  static const int db_skill_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, zone_id_),
  };
  db_skill_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_in_descriptor_,
      db_skill_query_in::default_instance_,
      db_skill_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_in));
  db_skill_query_out_descriptor_ = file->message_type(42);
  static const int db_skill_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, skills_),
  };
  db_skill_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_out_descriptor_,
      db_skill_query_out::default_instance_,
      db_skill_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_out));
  db_skill_query_out_skill_info_descriptor_ = db_skill_query_out_descriptor_->nested_type(0);
  static const int db_skill_query_out_skill_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, skill_level_),
  };
  db_skill_query_out_skill_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_query_out_skill_info_descriptor_,
      db_skill_query_out_skill_info::default_instance_,
      db_skill_query_out_skill_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_query_out_skill_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_query_out_skill_info));
  db_skill_add_in_descriptor_ = file->message_type(43);
  static const int db_skill_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, skill_level_),
  };
  db_skill_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_skill_add_in_descriptor_,
      db_skill_add_in::default_instance_,
      db_skill_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_skill_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_skill_add_in));
  db_friend_query_in_descriptor_ = file->message_type(44);
  static const int db_friend_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_in, zone_id_),
  };
  db_friend_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_query_in_descriptor_,
      db_friend_query_in::default_instance_,
      db_friend_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_query_in));
  db_query_id_by_name_in_descriptor_ = file->message_type(45);
  static const int db_query_id_by_name_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, zone_id_),
  };
  db_query_id_by_name_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_id_by_name_in_descriptor_,
      db_query_id_by_name_in::default_instance_,
      db_query_id_by_name_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_id_by_name_in));
  db_query_id_by_name_out_descriptor_ = file->message_type(46);
  static const int db_query_id_by_name_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, reg_tm_),
  };
  db_query_id_by_name_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_id_by_name_out_descriptor_,
      db_query_id_by_name_out::default_instance_,
      db_query_id_by_name_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_id_by_name_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_id_by_name_out));
  show_info_descriptor_ = file->message_type(47);
  static const int show_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, pvai_rank_),
  };
  show_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      show_info_descriptor_,
      show_info::default_instance_,
      show_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(show_info));
  db_nearby_query_in_descriptor_ = file->message_type(48);
  static const int db_nearby_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, info_),
  };
  db_nearby_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_nearby_query_in_descriptor_,
      db_nearby_query_in::default_instance_,
      db_nearby_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_nearby_query_in));
  db_nearby_query_out_descriptor_ = file->message_type(49);
  static const int db_nearby_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, info_),
  };
  db_nearby_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_nearby_query_out_descriptor_,
      db_nearby_query_out::default_instance_,
      db_nearby_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_nearby_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_nearby_query_out));
  db_list_partner_in_descriptor_ = file->message_type(50);
  static const int db_list_partner_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, partner_),
  };
  db_list_partner_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_partner_in_descriptor_,
      db_list_partner_in::default_instance_,
      db_list_partner_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_partner_in));
  db_list_partner_out_descriptor_ = file->message_type(51);
  static const int db_list_partner_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_out, info_),
  };
  db_list_partner_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_list_partner_out_descriptor_,
      db_list_partner_out::default_instance_,
      db_list_partner_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_list_partner_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_list_partner_out));
  db_friend_query_out_descriptor_ = file->message_type(52);
  static const int db_friend_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_out, friends_),
  };
  db_friend_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_query_out_descriptor_,
      db_friend_query_out::default_instance_,
      db_friend_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_query_out));
  db_friend_add_in_descriptor_ = file->message_type(53);
  static const int db_friend_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, fuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, freg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, zone_id_),
  };
  db_friend_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_add_in_descriptor_,
      db_friend_add_in::default_instance_,
      db_friend_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_add_in));
  db_friend_del_in_descriptor_ = file->message_type(54);
  static const int db_friend_del_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, fuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, freg_tm_),
  };
  db_friend_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_friend_del_in_descriptor_,
      db_friend_del_in::default_instance_,
      db_friend_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_friend_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_friend_del_in));
  db_dnd_query_in_descriptor_ = file->message_type(55);
  static const int db_dnd_query_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_in, zone_id_),
  };
  db_dnd_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_query_in_descriptor_,
      db_dnd_query_in::default_instance_,
      db_dnd_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_query_in));
  db_dnd_query_out_descriptor_ = file->message_type(56);
  static const int db_dnd_query_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_out, dnds_),
  };
  db_dnd_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_query_out_descriptor_,
      db_dnd_query_out::default_instance_,
      db_dnd_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_query_out));
  db_dnd_add_in_descriptor_ = file->message_type(57);
  static const int db_dnd_add_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, duserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, dreg_tm_),
  };
  db_dnd_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_add_in_descriptor_,
      db_dnd_add_in::default_instance_,
      db_dnd_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_add_in));
  db_dnd_del_in_descriptor_ = file->message_type(58);
  static const int db_dnd_del_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, duserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, dreg_tm_),
  };
  db_dnd_del_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_dnd_del_in_descriptor_,
      db_dnd_del_in::default_instance_,
      db_dnd_del_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_dnd_del_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_dnd_del_in));
  db_ai_rank_info_descriptor_ = file->message_type(59);
  static const int db_ai_rank_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, rank_),
  };
  db_ai_rank_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_info_descriptor_,
      db_ai_rank_info::default_instance_,
      db_ai_rank_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_info));
  db_ai_rank_log_descriptor_ = file->message_type(60);
  static const int db_ai_rank_log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, logs_),
  };
  db_ai_rank_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_descriptor_,
      db_ai_rank_log::default_instance_,
      db_ai_rank_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log));
  db_ai_rank_log_one_log_descriptor_ = db_ai_rank_log_descriptor_->nested_type(0);
  static const int db_ai_rank_log_one_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, win_),
  };
  db_ai_rank_log_one_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_one_log_descriptor_,
      db_ai_rank_log_one_log::default_instance_,
      db_ai_rank_log_one_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_one_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log_one_log));
  db_ai_rank_add_in_descriptor_ = file->message_type(61);
  static const int db_ai_rank_add_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, accu_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, accu_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, accu_end_time_),
  };
  db_ai_rank_add_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_add_in_descriptor_,
      db_ai_rank_add_in::default_instance_,
      db_ai_rank_add_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_add_in));
  db_ai_rank_add_out_descriptor_ = file->message_type(62);
  static const int db_ai_rank_add_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_out, pvai_info_),
  };
  db_ai_rank_add_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_add_out_descriptor_,
      db_ai_rank_add_out::default_instance_,
      db_ai_rank_add_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_add_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_add_out));
  db_ai_rank_query_in_descriptor_ = file->message_type(63);
  static const int db_ai_rank_query_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, length_),
  };
  db_ai_rank_query_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_query_in_descriptor_,
      db_ai_rank_query_in::default_instance_,
      db_ai_rank_query_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_query_in));
  db_ai_rank_query_out_descriptor_ = file->message_type(64);
  static const int db_ai_rank_query_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, log_),
  };
  db_ai_rank_query_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_query_out_descriptor_,
      db_ai_rank_query_out::default_instance_,
      db_ai_rank_query_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_query_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_query_out));
  db_ai_rank_exchange_in_descriptor_ = file->message_type(65);
  static const int db_ai_rank_exchange_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, target_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, target_reg_time_),
  };
  db_ai_rank_exchange_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_exchange_in_descriptor_,
      db_ai_rank_exchange_in::default_instance_,
      db_ai_rank_exchange_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_exchange_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_exchange_in));
  db_ai_rank_range_in_descriptor_ = file->message_type(66);
  static const int db_ai_rank_range_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, end_),
  };
  db_ai_rank_range_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_range_in_descriptor_,
      db_ai_rank_range_in::default_instance_,
      db_ai_rank_range_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_range_in));
  db_ai_rank_range_out_descriptor_ = file->message_type(67);
  static const int db_ai_rank_range_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, infos_),
  };
  db_ai_rank_range_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_range_out_descriptor_,
      db_ai_rank_range_out::default_instance_,
      db_ai_rank_range_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_range_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_range_out));
  db_ai_rank_log_in_descriptor_ = file->message_type(68);
  static const int db_ai_rank_log_in_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, win_),
  };
  db_ai_rank_log_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_ai_rank_log_in_descriptor_,
      db_ai_rank_log_in::default_instance_,
      db_ai_rank_log_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_ai_rank_log_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_ai_rank_log_in));
  db_update_pvai_basic_info_in_descriptor_ = file->message_type(69);
  static const int db_update_pvai_basic_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, infos_),
  };
  db_update_pvai_basic_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_update_pvai_basic_info_in_descriptor_,
      db_update_pvai_basic_info_in::default_instance_,
      db_update_pvai_basic_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_update_pvai_basic_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_update_pvai_basic_info_in));
  activity_step_t_descriptor_ = file->message_type(70);
  static const int activity_step_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, step_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, step_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, is_need_step_),
  };
  activity_step_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_step_t_descriptor_,
      activity_step_t::default_instance_,
      activity_step_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_step_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_step_t));
  activity_info_t_descriptor_ = file->message_type(71);
  static const int activity_info_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, revc_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, dead_tm_),
  };
  activity_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      activity_info_t_descriptor_,
      activity_info_t::default_instance_,
      activity_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(activity_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(activity_info_t));
  db_query_activity_list_in_descriptor_ = file->message_type(72);
  static const int db_query_activity_list_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_in, zone_id_),
  };
  db_query_activity_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_activity_list_in_descriptor_,
      db_query_activity_list_in::default_instance_,
      db_query_activity_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_activity_list_in));
  db_query_activity_list_out_descriptor_ = file->message_type(73);
  static const int db_query_activity_list_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_out, infos_),
  };
  db_query_activity_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_activity_list_out_descriptor_,
      db_query_activity_list_out::default_instance_,
      db_query_activity_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_activity_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_activity_list_out));
  db_replace_activity_info_in_descriptor_ = file->message_type(74);
  static const int db_replace_activity_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, infos_),
  };
  db_replace_activity_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_replace_activity_info_in_descriptor_,
      db_replace_activity_info_in::default_instance_,
      db_replace_activity_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_replace_activity_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_replace_activity_info_in));
  db_delete_activity_info_in_descriptor_ = file->message_type(75);
  static const int db_delete_activity_info_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, activity_ids_),
  };
  db_delete_activity_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_delete_activity_info_in_descriptor_,
      db_delete_activity_info_in::default_instance_,
      db_delete_activity_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_delete_activity_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_delete_activity_info_in));
  mail_item_attachment_t_descriptor_ = file->message_type(76);
  static const int mail_item_attachment_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, item_num_),
  };
  mail_item_attachment_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_item_attachment_t_descriptor_,
      mail_item_attachment_t::default_instance_,
      mail_item_attachment_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_item_attachment_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_item_attachment_t));
  db_mail_info_t_descriptor_ = file->message_type(77);
  static const int db_mail_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, come_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, items_),
  };
  db_mail_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_mail_info_t_descriptor_,
      db_mail_info_t::default_instance_,
      db_mail_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_mail_info_t));
  db_add_new_mail_in_descriptor_ = file->message_type(78);
  static const int db_add_new_mail_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, mail_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, gm_server_id_),
  };
  db_add_new_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_new_mail_in_descriptor_,
      db_add_new_mail_in::default_instance_,
      db_add_new_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_new_mail_in));
  db_add_new_mail_out_descriptor_ = file->message_type(79);
  static const int db_add_new_mail_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, gm_server_id_),
  };
  db_add_new_mail_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_new_mail_out_descriptor_,
      db_add_new_mail_out::default_instance_,
      db_add_new_mail_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_new_mail_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_new_mail_out));
  db_query_mail_infos_in_descriptor_ = file->message_type(80);
  static const int db_query_mail_infos_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, query_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, page_num_),
  };
  db_query_mail_infos_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_infos_in_descriptor_,
      db_query_mail_infos_in::default_instance_,
      db_query_mail_infos_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_infos_in));
  db_query_mail_infos_out_descriptor_ = file->message_type(81);
  static const int db_query_mail_infos_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, mail_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, query_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, page_num_),
  };
  db_query_mail_infos_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_infos_out_descriptor_,
      db_query_mail_infos_out::default_instance_,
      db_query_mail_infos_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_infos_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_infos_out));
  db_query_players_info_in_descriptor_ = file->message_type(82);
  static const int db_query_players_info_in_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, is_ref_cnt_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, players_),
  };
  db_query_players_info_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_players_info_in_descriptor_,
      db_query_players_info_in::default_instance_,
      db_query_players_info_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_players_info_in));
  db_query_players_info_out_descriptor_ = file->message_type(83);
  static const int db_query_players_info_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, is_ref_cnt_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, players_),
  };
  db_query_players_info_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_players_info_out_descriptor_,
      db_query_players_info_out::default_instance_,
      db_query_players_info_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_players_info_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_players_info_out));
  db_query_userinfo_by_name_zone_in_descriptor_ = file->message_type(84);
  static const int db_query_userinfo_by_name_zone_in_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, channelid_),
  };
  db_query_userinfo_by_name_zone_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_userinfo_by_name_zone_in_descriptor_,
      db_query_userinfo_by_name_zone_in::default_instance_,
      db_query_userinfo_by_name_zone_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_userinfo_by_name_zone_in));
  db_query_userinfo_by_name_zone_out_descriptor_ = file->message_type(85);
  static const int db_query_userinfo_by_name_zone_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, reg_tm_),
  };
  db_query_userinfo_by_name_zone_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_userinfo_by_name_zone_out_descriptor_,
      db_query_userinfo_by_name_zone_out::default_instance_,
      db_query_userinfo_by_name_zone_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_userinfo_by_name_zone_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_userinfo_by_name_zone_out));
  db_query_mail_list_in_descriptor_ = file->message_type(86);
  static const int db_query_mail_list_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, zone_id_),
  };
  db_query_mail_list_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_list_in_descriptor_,
      db_query_mail_list_in::default_instance_,
      db_query_mail_list_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_list_in));
  db_mail_list_descriptor_ = file->message_type(87);
  static const int db_mail_list_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, hasread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, hasattach_),
  };
  db_mail_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_mail_list_descriptor_,
      db_mail_list::default_instance_,
      db_mail_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_mail_list));
  db_query_mail_list_out_descriptor_ = file->message_type(88);
  static const int db_query_mail_list_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, mail_),
  };
  db_query_mail_list_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_list_out_descriptor_,
      db_query_mail_list_out::default_instance_,
      db_query_mail_list_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_list_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_list_out));
  db_query_mail_in_descriptor_ = file->message_type(89);
  static const int db_query_mail_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, mail_id_),
  };
  db_query_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_in_descriptor_,
      db_query_mail_in::default_instance_,
      db_query_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_in));
  db_query_mail_out_descriptor_ = file->message_type(90);
  static const int db_query_mail_out_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, hasget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, from_tm_),
  };
  db_query_mail_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_query_mail_out_descriptor_,
      db_query_mail_out::default_instance_,
      db_query_mail_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_query_mail_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_query_mail_out));
  db_get_attach_in_descriptor_ = file->message_type(91);
  static const int db_get_attach_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, zone_id_),
  };
  db_get_attach_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_attach_in_descriptor_,
      db_get_attach_in::default_instance_,
      db_get_attach_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_attach_in));
  db_get_attach_out_descriptor_ = file->message_type(92);
  static const int db_get_attach_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, hasget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, mailid_),
  };
  db_get_attach_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_attach_out_descriptor_,
      db_get_attach_out::default_instance_,
      db_get_attach_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_attach_out));
  db_get_attach_success_in_descriptor_ = file->message_type(93);
  static const int db_get_attach_success_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, zone_id_),
  };
  db_get_attach_success_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_get_attach_success_in_descriptor_,
      db_get_attach_success_in::default_instance_,
      db_get_attach_success_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_get_attach_success_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_get_attach_success_in));
  db_del_mail_in_descriptor_ = file->message_type(94);
  static const int db_del_mail_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, zone_id_),
  };
  db_del_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_del_mail_in_descriptor_,
      db_del_mail_in::default_instance_,
      db_del_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_del_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_del_mail_in));
  db_new_mail_in_descriptor_ = file->message_type(95);
  static const int db_new_mail_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_in, zone_id_),
  };
  db_new_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_new_mail_in_descriptor_,
      db_new_mail_in::default_instance_,
      db_new_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_new_mail_in));
  db_new_mail_out_descriptor_ = file->message_type(96);
  static const int db_new_mail_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_out, hasnew_),
  };
  db_new_mail_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_new_mail_out_descriptor_,
      db_new_mail_out::default_instance_,
      db_new_mail_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_new_mail_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_new_mail_out));
  db_attach_descriptor_ = file->message_type(97);
  static const int db_attach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, num_),
  };
  db_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_attach_descriptor_,
      db_attach::default_instance_,
      db_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_attach));
  db_add_mail_in_descriptor_ = file->message_type(98);
  static const int db_add_mail_in_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, items_),
  };
  db_add_mail_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_in_descriptor_,
      db_add_mail_in::default_instance_,
      db_add_mail_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_in));
  db_add_mail_by_switch_in_descriptor_ = file->message_type(99);
  static const int db_add_mail_by_switch_in_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, server_id_),
  };
  db_add_mail_by_switch_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_by_switch_in_descriptor_,
      db_add_mail_by_switch_in::default_instance_,
      db_add_mail_by_switch_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_by_switch_in));
  db_add_mail_by_switch_out_descriptor_ = file->message_type(100);
  static const int db_add_mail_by_switch_out_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, server_id_),
  };
  db_add_mail_by_switch_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_by_switch_out_descriptor_,
      db_add_mail_by_switch_out::default_instance_,
      db_add_mail_by_switch_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_by_switch_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_by_switch_out));
  mail_rel_descriptor_ = file->message_type(101);
  static const int mail_rel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, hasattach_),
  };
  mail_rel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_rel_descriptor_,
      mail_rel::default_instance_,
      mail_rel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_rel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_rel));
  db_add_mail_rel_by_switch_in_descriptor_ = file->message_type(102);
  static const int db_add_mail_rel_by_switch_in_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_by_switch_in, info_),
  };
  db_add_mail_rel_by_switch_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_rel_by_switch_in_descriptor_,
      db_add_mail_rel_by_switch_in::default_instance_,
      db_add_mail_rel_by_switch_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_by_switch_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_by_switch_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_rel_by_switch_in));
  db_add_mail_rel_flush_in_descriptor_ = file->message_type(103);
  static const int db_add_mail_rel_flush_in_offsets_[1] = {
  };
  db_add_mail_rel_flush_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_mail_rel_flush_in_descriptor_,
      db_add_mail_rel_flush_in::default_instance_,
      db_add_mail_rel_flush_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_flush_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_mail_rel_flush_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_mail_rel_flush_in));
  db_add_diamond_by_switch_in_descriptor_ = file->message_type(104);
  static const int db_add_diamond_by_switch_in_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, reg_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, add_diamond_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, order_index_),
  };
  db_add_diamond_by_switch_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_diamond_by_switch_in_descriptor_,
      db_add_diamond_by_switch_in::default_instance_,
      db_add_diamond_by_switch_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_diamond_by_switch_in));
  db_add_diamond_by_switch_out_descriptor_ = file->message_type(105);
  static const int db_add_diamond_by_switch_out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_out, order_index_),
  };
  db_add_diamond_by_switch_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_add_diamond_by_switch_out_descriptor_,
      db_add_diamond_by_switch_out::default_instance_,
      db_add_diamond_by_switch_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_add_diamond_by_switch_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_add_diamond_by_switch_out));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_msgheader_t_descriptor_, &db_msgheader_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_pvai_info_t_descriptor_, &db_player_pvai_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_player_info_t_descriptor_, &db_player_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_crtrole_in_descriptor_, &db_crtrole_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_crtrole_out_descriptor_, &db_crtrole_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_in_descriptor_, &db_get_role_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_out_descriptor_, &db_get_role_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_gm_in_descriptor_, &db_get_role_list_by_gm_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_role_list_by_gm_out_descriptor_, &db_get_role_list_by_gm_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_login_in_descriptor_, &db_login_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_login_out_descriptor_, &db_login_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_role_in_descriptor_, &db_del_role_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_levelup_in_descriptor_, &db_levelup_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_query_in_descriptor_, &db_backpack_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_equip_hole_descriptor_, &db_equip_hole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_packpos_descriptor_, &db_packpos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_query_out_descriptor_, &db_backpack_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_add_in_descriptor_, &db_backpack_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_update_in_descriptor_, &db_backpack_update_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_del_in_descriptor_, &db_backpack_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_backpack_move_in_descriptor_, &db_backpack_move_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_info_descriptor_, &db_instance_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_query_in_descriptor_, &db_instance_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_query_out_descriptor_, &db_instance_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_instance_modify_in_descriptor_, &db_instance_modify_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_query_in_descriptor_, &db_task_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_info_descriptor_, &db_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_query_out_descriptor_, &db_task_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_task_step_in_descriptor_, &db_task_step_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_daily_task_info_descriptor_, &db_daily_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_daily_task_in_descriptor_, &db_query_daily_task_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_daily_task_out_descriptor_, &db_query_daily_task_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_replace_daily_task_in_descriptor_, &db_replace_daily_task_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_daily_task_in_descriptor_, &db_del_daily_task_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_query_in_descriptor_, &db_attribute_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_info_descriptor_, &db_attribute_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_query_out_descriptor_, &db_attribute_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attribute_set_in_descriptor_, &db_attribute_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shared_attribute_query_in_descriptor_, &db_shared_attribute_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shared_attribute_query_out_descriptor_, &db_shared_attribute_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_shared_attribute_set_in_descriptor_, &db_shared_attribute_set_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_in_descriptor_, &db_skill_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_out_descriptor_, &db_skill_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_query_out_skill_info_descriptor_, &db_skill_query_out_skill_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_skill_add_in_descriptor_, &db_skill_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_query_in_descriptor_, &db_friend_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_id_by_name_in_descriptor_, &db_query_id_by_name_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_id_by_name_out_descriptor_, &db_query_id_by_name_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    show_info_descriptor_, &show_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_nearby_query_in_descriptor_, &db_nearby_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_nearby_query_out_descriptor_, &db_nearby_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_partner_in_descriptor_, &db_list_partner_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_list_partner_out_descriptor_, &db_list_partner_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_query_out_descriptor_, &db_friend_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_add_in_descriptor_, &db_friend_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_friend_del_in_descriptor_, &db_friend_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_query_in_descriptor_, &db_dnd_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_query_out_descriptor_, &db_dnd_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_add_in_descriptor_, &db_dnd_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_dnd_del_in_descriptor_, &db_dnd_del_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_info_descriptor_, &db_ai_rank_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_descriptor_, &db_ai_rank_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_one_log_descriptor_, &db_ai_rank_log_one_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_add_in_descriptor_, &db_ai_rank_add_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_add_out_descriptor_, &db_ai_rank_add_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_query_in_descriptor_, &db_ai_rank_query_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_query_out_descriptor_, &db_ai_rank_query_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_exchange_in_descriptor_, &db_ai_rank_exchange_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_range_in_descriptor_, &db_ai_rank_range_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_range_out_descriptor_, &db_ai_rank_range_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_ai_rank_log_in_descriptor_, &db_ai_rank_log_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_update_pvai_basic_info_in_descriptor_, &db_update_pvai_basic_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_step_t_descriptor_, &activity_step_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    activity_info_t_descriptor_, &activity_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_activity_list_in_descriptor_, &db_query_activity_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_activity_list_out_descriptor_, &db_query_activity_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_replace_activity_info_in_descriptor_, &db_replace_activity_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_delete_activity_info_in_descriptor_, &db_delete_activity_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_item_attachment_t_descriptor_, &mail_item_attachment_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_mail_info_t_descriptor_, &db_mail_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_new_mail_in_descriptor_, &db_add_new_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_new_mail_out_descriptor_, &db_add_new_mail_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_infos_in_descriptor_, &db_query_mail_infos_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_infos_out_descriptor_, &db_query_mail_infos_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_players_info_in_descriptor_, &db_query_players_info_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_players_info_out_descriptor_, &db_query_players_info_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_userinfo_by_name_zone_in_descriptor_, &db_query_userinfo_by_name_zone_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_userinfo_by_name_zone_out_descriptor_, &db_query_userinfo_by_name_zone_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_list_in_descriptor_, &db_query_mail_list_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_mail_list_descriptor_, &db_mail_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_list_out_descriptor_, &db_query_mail_list_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_in_descriptor_, &db_query_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_query_mail_out_descriptor_, &db_query_mail_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_attach_in_descriptor_, &db_get_attach_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_attach_out_descriptor_, &db_get_attach_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_get_attach_success_in_descriptor_, &db_get_attach_success_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_del_mail_in_descriptor_, &db_del_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_new_mail_in_descriptor_, &db_new_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_new_mail_out_descriptor_, &db_new_mail_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_attach_descriptor_, &db_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_in_descriptor_, &db_add_mail_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_by_switch_in_descriptor_, &db_add_mail_by_switch_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_by_switch_out_descriptor_, &db_add_mail_by_switch_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_rel_descriptor_, &mail_rel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_rel_by_switch_in_descriptor_, &db_add_mail_rel_by_switch_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_mail_rel_flush_in_descriptor_, &db_add_mail_rel_flush_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_diamond_by_switch_in_descriptor_, &db_add_diamond_by_switch_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_add_diamond_by_switch_out_descriptor_, &db_add_diamond_by_switch_out::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2eproto() {
  delete db_msgheader_t::default_instance_;
  delete db_msgheader_t_reflection_;
  delete db_player_pvai_info_t::default_instance_;
  delete db_player_pvai_info_t_reflection_;
  delete db_player_info_t::default_instance_;
  delete db_player_info_t_reflection_;
  delete db_crtrole_in::default_instance_;
  delete db_crtrole_in_reflection_;
  delete db_crtrole_out::default_instance_;
  delete db_crtrole_out_reflection_;
  delete db_get_role_list_in::default_instance_;
  delete db_get_role_list_in_reflection_;
  delete db_get_role_list_out::default_instance_;
  delete db_get_role_list_out_reflection_;
  delete db_get_role_list_by_gm_in::default_instance_;
  delete db_get_role_list_by_gm_in_reflection_;
  delete db_get_role_list_by_gm_out::default_instance_;
  delete db_get_role_list_by_gm_out_reflection_;
  delete db_login_in::default_instance_;
  delete db_login_in_reflection_;
  delete db_login_out::default_instance_;
  delete db_login_out_reflection_;
  delete db_del_role_in::default_instance_;
  delete db_del_role_in_reflection_;
  delete db_levelup_in::default_instance_;
  delete db_levelup_in_reflection_;
  delete db_backpack_query_in::default_instance_;
  delete db_backpack_query_in_reflection_;
  delete db_equip_hole::default_instance_;
  delete db_equip_hole_reflection_;
  delete db_packpos::default_instance_;
  delete db_packpos_reflection_;
  delete db_backpack_query_out::default_instance_;
  delete db_backpack_query_out_reflection_;
  delete db_backpack_add_in::default_instance_;
  delete db_backpack_add_in_reflection_;
  delete db_backpack_update_in::default_instance_;
  delete db_backpack_update_in_reflection_;
  delete db_backpack_del_in::default_instance_;
  delete db_backpack_del_in_reflection_;
  delete db_backpack_move_in::default_instance_;
  delete db_backpack_move_in_reflection_;
  delete db_instance_info::default_instance_;
  delete db_instance_info_reflection_;
  delete db_instance_query_in::default_instance_;
  delete db_instance_query_in_reflection_;
  delete db_instance_query_out::default_instance_;
  delete db_instance_query_out_reflection_;
  delete db_instance_modify_in::default_instance_;
  delete db_instance_modify_in_reflection_;
  delete db_task_query_in::default_instance_;
  delete db_task_query_in_reflection_;
  delete db_task_info::default_instance_;
  delete db_task_info_reflection_;
  delete db_task_query_out::default_instance_;
  delete db_task_query_out_reflection_;
  delete db_task_step_in::default_instance_;
  delete db_task_step_in_reflection_;
  delete db_daily_task_info::default_instance_;
  delete db_daily_task_info_reflection_;
  delete db_query_daily_task_in::default_instance_;
  delete db_query_daily_task_in_reflection_;
  delete db_query_daily_task_out::default_instance_;
  delete db_query_daily_task_out_reflection_;
  delete db_replace_daily_task_in::default_instance_;
  delete db_replace_daily_task_in_reflection_;
  delete db_del_daily_task_in::default_instance_;
  delete db_del_daily_task_in_reflection_;
  delete db_attribute_query_in::default_instance_;
  delete db_attribute_query_in_reflection_;
  delete db_attribute_info::default_instance_;
  delete db_attribute_info_reflection_;
  delete db_attribute_query_out::default_instance_;
  delete db_attribute_query_out_reflection_;
  delete db_attribute_set_in::default_instance_;
  delete db_attribute_set_in_reflection_;
  delete db_shared_attribute_query_in::default_instance_;
  delete db_shared_attribute_query_in_reflection_;
  delete db_shared_attribute_query_out::default_instance_;
  delete db_shared_attribute_query_out_reflection_;
  delete db_shared_attribute_set_in::default_instance_;
  delete db_shared_attribute_set_in_reflection_;
  delete db_skill_query_in::default_instance_;
  delete db_skill_query_in_reflection_;
  delete db_skill_query_out::default_instance_;
  delete db_skill_query_out_reflection_;
  delete db_skill_query_out_skill_info::default_instance_;
  delete db_skill_query_out_skill_info_reflection_;
  delete db_skill_add_in::default_instance_;
  delete db_skill_add_in_reflection_;
  delete db_friend_query_in::default_instance_;
  delete db_friend_query_in_reflection_;
  delete db_query_id_by_name_in::default_instance_;
  delete db_query_id_by_name_in_reflection_;
  delete db_query_id_by_name_out::default_instance_;
  delete db_query_id_by_name_out_reflection_;
  delete show_info::default_instance_;
  delete show_info_reflection_;
  delete db_nearby_query_in::default_instance_;
  delete db_nearby_query_in_reflection_;
  delete db_nearby_query_out::default_instance_;
  delete db_nearby_query_out_reflection_;
  delete db_list_partner_in::default_instance_;
  delete db_list_partner_in_reflection_;
  delete db_list_partner_out::default_instance_;
  delete db_list_partner_out_reflection_;
  delete db_friend_query_out::default_instance_;
  delete db_friend_query_out_reflection_;
  delete db_friend_add_in::default_instance_;
  delete db_friend_add_in_reflection_;
  delete db_friend_del_in::default_instance_;
  delete db_friend_del_in_reflection_;
  delete db_dnd_query_in::default_instance_;
  delete db_dnd_query_in_reflection_;
  delete db_dnd_query_out::default_instance_;
  delete db_dnd_query_out_reflection_;
  delete db_dnd_add_in::default_instance_;
  delete db_dnd_add_in_reflection_;
  delete db_dnd_del_in::default_instance_;
  delete db_dnd_del_in_reflection_;
  delete db_ai_rank_info::default_instance_;
  delete db_ai_rank_info_reflection_;
  delete db_ai_rank_log::default_instance_;
  delete db_ai_rank_log_reflection_;
  delete db_ai_rank_log_one_log::default_instance_;
  delete db_ai_rank_log_one_log_reflection_;
  delete db_ai_rank_add_in::default_instance_;
  delete db_ai_rank_add_in_reflection_;
  delete db_ai_rank_add_out::default_instance_;
  delete db_ai_rank_add_out_reflection_;
  delete db_ai_rank_query_in::default_instance_;
  delete db_ai_rank_query_in_reflection_;
  delete db_ai_rank_query_out::default_instance_;
  delete db_ai_rank_query_out_reflection_;
  delete db_ai_rank_exchange_in::default_instance_;
  delete db_ai_rank_exchange_in_reflection_;
  delete db_ai_rank_range_in::default_instance_;
  delete db_ai_rank_range_in_reflection_;
  delete db_ai_rank_range_out::default_instance_;
  delete db_ai_rank_range_out_reflection_;
  delete db_ai_rank_log_in::default_instance_;
  delete db_ai_rank_log_in_reflection_;
  delete db_update_pvai_basic_info_in::default_instance_;
  delete db_update_pvai_basic_info_in_reflection_;
  delete activity_step_t::default_instance_;
  delete activity_step_t_reflection_;
  delete activity_info_t::default_instance_;
  delete activity_info_t_reflection_;
  delete db_query_activity_list_in::default_instance_;
  delete db_query_activity_list_in_reflection_;
  delete db_query_activity_list_out::default_instance_;
  delete db_query_activity_list_out_reflection_;
  delete db_replace_activity_info_in::default_instance_;
  delete db_replace_activity_info_in_reflection_;
  delete db_delete_activity_info_in::default_instance_;
  delete db_delete_activity_info_in_reflection_;
  delete mail_item_attachment_t::default_instance_;
  delete mail_item_attachment_t_reflection_;
  delete db_mail_info_t::default_instance_;
  delete db_mail_info_t_reflection_;
  delete db_add_new_mail_in::default_instance_;
  delete db_add_new_mail_in_reflection_;
  delete db_add_new_mail_out::default_instance_;
  delete db_add_new_mail_out_reflection_;
  delete db_query_mail_infos_in::default_instance_;
  delete db_query_mail_infos_in_reflection_;
  delete db_query_mail_infos_out::default_instance_;
  delete db_query_mail_infos_out_reflection_;
  delete db_query_players_info_in::default_instance_;
  delete db_query_players_info_in_reflection_;
  delete db_query_players_info_out::default_instance_;
  delete db_query_players_info_out_reflection_;
  delete db_query_userinfo_by_name_zone_in::default_instance_;
  delete db_query_userinfo_by_name_zone_in_reflection_;
  delete db_query_userinfo_by_name_zone_out::default_instance_;
  delete db_query_userinfo_by_name_zone_out_reflection_;
  delete db_query_mail_list_in::default_instance_;
  delete db_query_mail_list_in_reflection_;
  delete db_mail_list::default_instance_;
  delete db_mail_list_reflection_;
  delete db_query_mail_list_out::default_instance_;
  delete db_query_mail_list_out_reflection_;
  delete db_query_mail_in::default_instance_;
  delete db_query_mail_in_reflection_;
  delete db_query_mail_out::default_instance_;
  delete db_query_mail_out_reflection_;
  delete db_get_attach_in::default_instance_;
  delete db_get_attach_in_reflection_;
  delete db_get_attach_out::default_instance_;
  delete db_get_attach_out_reflection_;
  delete db_get_attach_success_in::default_instance_;
  delete db_get_attach_success_in_reflection_;
  delete db_del_mail_in::default_instance_;
  delete db_del_mail_in_reflection_;
  delete db_new_mail_in::default_instance_;
  delete db_new_mail_in_reflection_;
  delete db_new_mail_out::default_instance_;
  delete db_new_mail_out_reflection_;
  delete db_attach::default_instance_;
  delete db_attach_reflection_;
  delete db_add_mail_in::default_instance_;
  delete db_add_mail_in_reflection_;
  delete db_add_mail_by_switch_in::default_instance_;
  delete db_add_mail_by_switch_in_reflection_;
  delete db_add_mail_by_switch_out::default_instance_;
  delete db_add_mail_by_switch_out_reflection_;
  delete mail_rel::default_instance_;
  delete mail_rel_reflection_;
  delete db_add_mail_rel_by_switch_in::default_instance_;
  delete db_add_mail_rel_by_switch_in_reflection_;
  delete db_add_mail_rel_flush_in::default_instance_;
  delete db_add_mail_rel_flush_in_reflection_;
  delete db_add_diamond_by_switch_in::default_instance_;
  delete db_add_diamond_by_switch_in_reflection_;
  delete db_add_diamond_by_switch_out::default_instance_;
  delete db_add_diamond_by_switch_out_reflection_;
}

void protobuf_AddDesc_db_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010db.proto\022\004rudb\"\233\001\n\016db_msgheader_t\022\020\n\010m"
    "sg_name\030\001 \002(\014\022\022\n\ntarget_uid\030\002 \002(\r\022\017\n\007err"
    "code\030\003 \002(\r\022\020\n\010reg_time\030\004 \001(\r\022\017\n\007src_uid\030"
    "\005 \001(\r\022\020\n\010login_id\030\006 \001(\r\022\013\n\003aux\030\007 \001(\014\022\020\n\010"
    "trans_id\030\010 \001(\r\"|\n\025db_player_pvai_info_t\022"
    "\014\n\004rank\030\001 \002(\r\022\021\n\taccu_coin\030\002 \002(\r\022\027\n\017accu"
    "_reputation\030\003 \002(\r\022\022\n\naccu_times\030\004 \002(\r\022\025\n"
    "\raccu_end_time\030\005 \002(\r\"\300\001\n\020db_player_info_"
    "t\022\016\n\006userid\030\001 \002(\004\022\020\n\010reg_time\030\002 \002(\r\022\r\n\005l"
    "evel\030\003 \001(\r\022\014\n\004name\030\004 \001(\014\022\014\n\004type\030\005 \001(\r\022\016"
    "\n\006gender\030\006 \001(\r\022\017\n\007zone_id\030\007 \001(\r\022\016\n\006vip_l"
    "v\030\010 \001(\r\022.\n\tpvai_info\030\t \001(\0132\033.rudb.db_pla"
    "yer_pvai_info_t\"L\n\rdb_crtrole_in\022\017\n\007zone"
    "_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\r\022\016\n"
    "\006gender\030\004 \002(\r\"M\n\016db_crtrole_out\022\017\n\007regti"
    "me\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\r\022\016\n\006"
    "gender\030\004 \002(\r\"6\n\023db_get_role_list_in\022\017\n\007z"
    "one_id\030\001 \002(\r\022\016\n\006userid\030\002 \002(\004\"N\n\024db_get_r"
    "ole_list_out\022\017\n\007zone_id\030\001 \002(\r\022%\n\005roles\030\002"
    " \003(\0132\026.rudb.db_player_info_t\",\n\031db_get_r"
    "ole_list_by_gm_in\022\017\n\007zone_id\030\001 \002(\r\"T\n\032db"
    "_get_role_list_by_gm_out\022\017\n\007zone_id\030\001 \002("
    "\r\022%\n\005roles\030\002 \003(\0132\026.rudb.db_player_info_t"
    "\"\036\n\013db_login_in\022\017\n\007zone_id\030\001 \002(\r\"}\n\014db_l"
    "ogin_out\022\014\n\004name\030\001 \002(\014\022\017\n\007regtime\030\002 \002(\r\022"
    "\014\n\004type\030\003 \002(\r\022\016\n\006gender\030\004 \002(\r\022\n\n\002lv\030\005 \002("
    "\r\022\013\n\003exp\030\006 \002(\r\022\027\n\017last_login_time\030\007 \002(\r\""
    "!\n\016db_del_role_in\022\017\n\007zone_id\030\001 \002(\r\"/\n\rdb"
    "_levelup_in\022\017\n\007zone_id\030\001 \002(\r\022\r\n\005level\030\002 "
    "\002(\r\"\'\n\024db_backpack_query_in\022\017\n\007zone_id\030\001"
    " \002(\r\"^\n\rdb_equip_hole\022\022\n\nhole_index\030\001 \002("
    "\r\022\023\n\013item_gem_id\030\002 \002(\r\022\020\n\010attr_key\030\003 \002(\r"
    "\022\022\n\nattr_value\030\004 \002(\r\"\266\001\n\ndb_packpos\022\013\n\003p"
    "os\030\001 \002(\r\022\017\n\007item_id\030\002 \002(\r\022\022\n\nitem_level\030"
    "\003 \002(\r\022\020\n\010item_num\030\004 \002(\r\022\r\n\005hole1\030\t \001(\r\022\r"
    "\n\005hole2\030\006 \001(\r\022\r\n\005hole3\030\007 \001(\r\022\r\n\005hole4\030\010 "
    "\001(\r\022(\n\013equip_holes\030\005 \003(\0132\023.rudb.db_equip"
    "_hole\"8\n\025db_backpack_query_out\022\037\n\005items\030"
    "\001 \003(\0132\020.rudb.db_packpos\"F\n\022db_backpack_a"
    "dd_in\022\017\n\007zone_id\030\001 \002(\r\022\037\n\005items\030\002 \003(\0132\020."
    "rudb.db_packpos\"I\n\025db_backpack_update_in"
    "\022\017\n\007zone_id\030\001 \002(\r\022\037\n\005items\030\002 \003(\0132\020.rudb."
    "db_packpos\"F\n\022db_backpack_del_in\022\017\n\007zone"
    "_id\030\001 \002(\r\022\037\n\005items\030\002 \003(\0132\020.rudb.db_packp"
    "os\"H\n\023db_backpack_move_in\022\017\n\007zone_id\030\001 \002"
    "(\r\022\020\n\010pos_from\030\002 \002(\r\022\016\n\006pos_to\030\003 \002(\r\"u\n\020"
    "db_instance_info\022\023\n\013instance_id\030\001 \002(\r\022\014\n"
    "\004star\030\002 \002(\r\022\026\n\016can_enter_flag\030\003 \002(\r\022\025\n\rr"
    "efresh_times\030\004 \002(\r\022\017\n\007dead_tm\030\005 \002(\r\"\'\n\024d"
    "b_instance_query_in\022\017\n\007zone_id\030\001 \002(\r\"B\n\025"
    "db_instance_query_out\022)\n\tinstances\030\001 \003(\013"
    "2\026.rudb.db_instance_info\"S\n\025db_instance_"
    "modify_in\022\017\n\007zone_id\030\001 \002(\r\022)\n\tinstances\030"
    "\002 \003(\0132\026.rudb.db_instance_info\"#\n\020db_task"
    "_query_in\022\017\n\007zone_id\030\001 \002(\r\"C\n\014db_task_in"
    "fo\022\017\n\007task_id\030\001 \002(\r\022\017\n\007step_id\030\002 \002(\r\022\021\n\t"
    "step_rate\030\003 \002(\r\"6\n\021db_task_query_out\022!\n\005"
    "tasks\030\001 \003(\0132\022.rudb.db_task_info\"W\n\017db_ta"
    "sk_step_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007task_id\030\002"
    " \002(\r\022\017\n\007step_id\030\003 \002(\r\022\021\n\tstep_rate\030\004 \002(\r"
    "\"W\n\022db_daily_task_info\022\025\n\rdaily_task_id\030"
    "\001 \002(\r\022\031\n\021daily_task_status\030\002 \002(\005\022\017\n\007dead"
    "_tm\030\003 \002(\r\")\n\026db_query_daily_task_in\022\017\n\007z"
    "one_id\030\001 \002(\r\"H\n\027db_query_daily_task_out\022"
    "-\n\013daily_tasks\030\001 \003(\0132\030.rudb.db_daily_tas"
    "k_info\"Z\n\030db_replace_daily_task_in\022\017\n\007zo"
    "ne_id\030\001 \002(\r\022-\n\013daily_tasks\030\002 \003(\0132\030.rudb."
    "db_daily_task_info\"\'\n\024db_del_daily_task_"
    "in\022\017\n\007zone_id\030\001 \002(\r\"(\n\025db_attribute_quer"
    "y_in\022\017\n\007zone_id\030\001 \002(\r\"S\n\021db_attribute_in"
    "fo\022\024\n\014attribute_id\030\001 \002(\r\022\027\n\017attribute_va"
    "lue\030\002 \002(\r\022\017\n\007dead_tm\030\003 \002(\r\"E\n\026db_attribu"
    "te_query_out\022+\n\nattributes\030\001 \003(\0132\027.rudb."
    "db_attribute_info\"f\n\023db_attribute_set_in"
    "\022\017\n\007zone_id\030\001 \002(\r\022\024\n\014attribute_id\030\002 \002(\r\022"
    "\027\n\017attribute_value\030\003 \002(\r\022\017\n\007dead_tm\030\004 \002("
    "\r\"/\n\034db_shared_attribute_query_in\022\017\n\007zon"
    "e_id\030\001 \002(\r\"S\n\035db_shared_attribute_query_"
    "out\0222\n\021shared_attributes\030\001 \003(\0132\027.rudb.db"
    "_attribute_info\"m\n\032db_shared_attribute_s"
    "et_in\022\017\n\007zone_id\030\001 \002(\r\022\024\n\014attribute_id\030\002"
    " \002(\r\022\027\n\017attribute_value\030\003 \002(\r\022\017\n\007dead_tm"
    "\030\004 \002(\r\"$\n\021db_skill_query_in\022\017\n\007zone_id\030\001"
    " \002(\r\"~\n\022db_skill_query_out\0223\n\006skills\030\001 \003"
    "(\0132#.rudb.db_skill_query_out.skill_info\032"
    "3\n\nskill_info\022\020\n\010skill_id\030\001 \002(\r\022\023\n\013skill"
    "_level\030\002 \002(\r\"I\n\017db_skill_add_in\022\017\n\007zone_"
    "id\030\001 \002(\r\022\020\n\010skill_id\030\002 \002(\r\022\023\n\013skill_leve"
    "l\030\003 \002(\r\"%\n\022db_friend_query_in\022\017\n\007zone_id"
    "\030\001 \002(\r\"7\n\026db_query_id_by_name_in\022\014\n\004name"
    "\030\001 \002(\014\022\017\n\007zone_id\030\002 \002(\r\"9\n\027db_query_id_b"
    "y_name_out\022\016\n\006userid\030\001 \001(\004\022\016\n\006reg_tm\030\002 \001"
    "(\r\"x\n\tshow_info\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_t"
    "m\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\n\n\002lv\030\004 \002(\r\022\014\n\004typ"
    "e\030\005 \002(\r\022\020\n\010prestige\030\006 \002(\r\022\021\n\tpvai_rank\030\007"
    " \002(\r\"K\n\022db_nearby_query_in\022\017\n\007zone_id\030\001 "
    "\002(\r\022$\n\004info\030\002 \003(\0132\026.rudb.db_player_info_"
    "t\"4\n\023db_nearby_query_out\022\035\n\004info\030\001 \003(\0132\017"
    ".rudb.show_info\"N\n\022db_list_partner_in\022\017\n"
    "\007zone_id\030\001 \002(\r\022\'\n\007partner\030\002 \003(\0132\026.rudb.d"
    "b_player_info_t\"4\n\023db_list_partner_out\022\035"
    "\n\004info\030\001 \003(\0132\017.rudb.show_info\">\n\023db_frie"
    "nd_query_out\022\'\n\007friends\030\001 \003(\0132\026.rudb.db_"
    "player_info_t\"E\n\020db_friend_add_in\022\017\n\007fus"
    "erid\030\001 \002(\004\022\017\n\007freg_tm\030\002 \002(\r\022\017\n\007zone_id\030\003"
    " \002(\r\"E\n\020db_friend_del_in\022\017\n\007zone_id\030\001 \002("
    "\r\022\017\n\007fuserid\030\002 \002(\004\022\017\n\007freg_tm\030\003 \002(\r\"\"\n\017d"
    "b_dnd_query_in\022\017\n\007zone_id\030\001 \002(\r\"8\n\020db_dn"
    "d_query_out\022$\n\004dnds\030\001 \003(\0132\026.rudb.db_play"
    "er_info_t\"B\n\rdb_dnd_add_in\022\017\n\007zone_id\030\001 "
    "\002(\r\022\017\n\007duserid\030\002 \002(\004\022\017\n\007dreg_tm\030\003 \002(\r\"B\n"
    "\rdb_dnd_del_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007duser"
    "id\030\002 \002(\004\022\017\n\007dreg_tm\030\003 \002(\r\"A\n\017db_ai_rank_"
    "info\022\016\n\006userid\030\001 \002(\004\022\020\n\010reg_time\030\002 \002(\r\022\014"
    "\n\004rank\030\003 \002(\r\"r\n\016db_ai_rank_log\022*\n\004logs\030\001"
    " \003(\0132\034.rudb.db_ai_rank_log.one_log\0324\n\007on"
    "e_log\022\014\n\004name\030\001 \002(\014\022\016\n\006direct\030\002 \002(\010\022\013\n\003w"
    "in\030\003 \002(\010\"g\n\021db_ai_rank_add_in\022\017\n\007zone_id"
    "\030\001 \002(\r\022\021\n\taccu_coin\030\002 \002(\r\022\027\n\017accu_reputa"
    "tion\030\003 \002(\r\022\025\n\raccu_end_time\030\004 \002(\r\"D\n\022db_"
    "ai_rank_add_out\022.\n\tpvai_info\030\001 \002(\0132\033.rud"
    "b.db_player_pvai_info_t\"6\n\023db_ai_rank_qu"
    "ery_in\022\017\n\007zone_id\030\001 \002(\r\022\016\n\006length\030\002 \002(\r\""
    "m\n\024db_ai_rank_query_out\022\014\n\004rank\030\001 \002(\r\022$\n"
    "\005infos\030\002 \003(\0132\025.rudb.db_ai_rank_info\022!\n\003l"
    "og\030\003 \002(\0132\024.rudb.db_ai_rank_log\"Y\n\026db_ai_"
    "rank_exchange_in\022\017\n\007zone_id\030\001 \002(\r\022\025\n\rtar"
    "get_userid\030\002 \002(\004\022\027\n\017target_reg_time\030\003 \002("
    "\r\"B\n\023db_ai_rank_range_in\022\017\n\007zone_id\030\001 \002("
    "\r\022\r\n\005start\030\002 \002(\r\022\013\n\003end\030\003 \002(\r\"<\n\024db_ai_r"
    "ank_range_out\022$\n\005infos\030\001 \003(\0132\025.rudb.db_a"
    "i_rank_info\"\204\001\n\021db_ai_rank_log_in\022\017\n\007zon"
    "e_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\025\n\rtarget_useri"
    "d\030\003 \002(\004\022\027\n\017target_reg_time\030\004 \002(\r\022\023\n\013targ"
    "et_name\030\005 \002(\014\022\013\n\003win\030\006 \002(\010\"V\n\034db_update_"
    "pvai_basic_info_in\022\017\n\007zone_id\030\001 \002(\r\022%\n\005i"
    "nfos\030\002 \003(\0132\026.rudb.db_player_info_t\"_\n\017ac"
    "tivity_step_t\022\021\n\tstep_type\030\001 \002(\r\022\017\n\007step"
    "_id\030\002 \002(\r\022\022\n\nstep_value\030\003 \002(\r\022\024\n\014is_need"
    "_step\030\004 \002(\r\"x\n\017activity_info_t\022\023\n\013activi"
    "ty_id\030\001 \002(\r\022$\n\005steps\030\002 \003(\0132\025.rudb.activi"
    "ty_step_t\022\031\n\021revc_reward_times\030\003 \002(\r\022\017\n\007"
    "dead_tm\030\004 \002(\r\",\n\031db_query_activity_list_"
    "in\022\017\n\007zone_id\030\001 \002(\r\"B\n\032db_query_activity"
    "_list_out\022$\n\005infos\030\001 \003(\0132\025.rudb.activity"
    "_info_t\"T\n\033db_replace_activity_info_in\022\017"
    "\n\007zone_id\030\001 \002(\r\022$\n\005infos\030\002 \003(\0132\025.rudb.ac"
    "tivity_info_t\"C\n\032db_delete_activity_info"
    "_in\022\017\n\007zone_id\030\001 \002(\r\022\024\n\014activity_ids\030\002 \003"
    "(\r\";\n\026mail_item_attachment_t\022\017\n\007item_id\030"
    "\001 \002(\r\022\020\n\010item_num\030\002 \002(\r\"\201\001\n\016db_mail_info"
    "_t\022\017\n\007mail_id\030\001 \002(\004\022\r\n\005title\030\002 \002(\014\022\021\n\tco"
    "me_from\030\003 \002(\014\022\017\n\007content\030\004 \002(\014\022+\n\005items\030"
    "\005 \003(\0132\034.rudb.mail_item_attachment_t\"d\n\022d"
    "b_add_new_mail_in\022\017\n\007zone_id\030\001 \002(\r\022\'\n\tma"
    "il_info\030\002 \002(\0132\024.rudb.db_mail_info_t\022\024\n\014g"
    "m_server_id\030\003 \001(\r\"M\n\023db_add_new_mail_out"
    "\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007mail_id\030\002 \002(\004\022\024\n\014gm"
    "_server_id\030\003 \001(\r\"`\n\026db_query_mail_infos_"
    "in\022\017\n\007zone_id\030\001 \002(\r\022\020\n\010mail_ids\030\002 \003(\004\022\021\n"
    "\tquery_cmd\030\003 \002(\r\022\020\n\010page_num\030\004 \001(\r\"h\n\027db"
    "_query_mail_infos_out\022(\n\nmail_infos\030\001 \003("
    "\0132\024.rudb.db_mail_info_t\022\021\n\tquery_cmd\030\002 \002"
    "(\r\022\020\n\010page_num\030\003 \001(\r\"y\n\030db_query_players"
    "_info_in\022\017\n\007zone_id\030\001 \002(\r\022\013\n\003cmd\030\002 \002(\r\022\026"
    "\n\016is_ref_cnt_cmd\030\003 \002(\010\022\'\n\007players\030\004 \003(\0132"
    "\026.rudb.db_player_info_t\"i\n\031db_query_play"
    "ers_info_out\022\013\n\003cmd\030\001 \002(\r\022\026\n\016is_ref_cnt_"
    "cmd\030\002 \002(\010\022\'\n\007players\030\003 \003(\0132\026.rudb.db_pla"
    "yer_info_t\"U\n!db_query_userinfo_by_name_"
    "zone_in\022\017\n\007zone_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\021"
    "\n\tchannelid\030\003 \001(\r\"D\n\"db_query_userinfo_b"
    "y_name_zone_out\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_t"
    "m\030\002 \002(\r\"(\n\025db_query_mail_list_in\022\017\n\007zone"
    "_id\030\001 \002(\r\"Q\n\014db_mail_list\022\016\n\006mailid\030\001 \002("
    "\r\022\r\n\005title\030\002 \001(\014\022\017\n\007hasread\030\003 \002(\010\022\021\n\thas"
    "attach\030\004 \002(\010\"e\n\026db_query_mail_list_out\022$"
    "\n\010maillist\030\001 \003(\0132\022.rudb.db_mail_list\022%\n\004"
    "mail\030\002 \001(\0132\027.rudb.db_query_mail_out\"4\n\020d"
    "b_query_mail_in\022\017\n\007zone_id\030\001 \002(\r\022\017\n\007mail"
    "_id\030\002 \002(\r\"\201\001\n\021db_query_mail_out\022\016\n\006maili"
    "d\030\001 \002(\r\022\r\n\005title\030\002 \001(\014\022\014\n\004from\030\003 \001(\014\022\017\n\007"
    "content\030\004 \001(\014\022\r\n\005items\030\005 \001(\014\022\016\n\006hasget\030\006"
    " \002(\010\022\017\n\007from_tm\030\007 \002(\014\"3\n\020db_get_attach_i"
    "n\022\016\n\006mailid\030\001 \002(\r\022\017\n\007zone_id\030\002 \002(\r\"B\n\021db"
    "_get_attach_out\022\016\n\006hasget\030\001 \002(\010\022\r\n\005items"
    "\030\002 \002(\014\022\016\n\006mailid\030\003 \002(\r\";\n\030db_get_attach_"
    "success_in\022\016\n\006mailid\030\001 \002(\r\022\017\n\007zone_id\030\002 "
    "\002(\r\"1\n\016db_del_mail_in\022\016\n\006mailid\030\001 \002(\r\022\017\n"
    "\007zone_id\030\002 \002(\r\"!\n\016db_new_mail_in\022\017\n\007zone"
    "_id\030\001 \002(\r\"!\n\017db_new_mail_out\022\016\n\006hasnew\030\001"
    " \002(\r\"$\n\tdb_attach\022\n\n\002id\030\001 \002(\r\022\013\n\003num\030\002 \002"
    "(\r\"o\n\016db_add_mail_in\022\017\n\007zone_id\030\001 \002(\r\022\r\n"
    "\005title\030\002 \002(\014\022\014\n\004from\030\003 \002(\014\022\017\n\007content\030\004 "
    "\002(\014\022\036\n\005items\030\005 \003(\0132\017.rudb.db_attach\"{\n\030d"
    "b_add_mail_by_switch_in\022\r\n\005title\030\001 \002(\014\022\014"
    "\n\004from\030\002 \002(\014\022\017\n\007content\030\003 \002(\014\022\036\n\005items\030\004"
    " \003(\0132\017.rudb.db_attach\022\021\n\tserver_id\030\005 \002(\r"
    "\"\?\n\031db_add_mail_by_switch_out\022\017\n\007mail_id"
    "\030\001 \002(\005\022\021\n\tserver_id\030\002 \002(\r\"a\n\010mail_rel\022\016\n"
    "\006userid\030\001 \002(\004\022\020\n\010reg_time\030\002 \002(\r\022\017\n\007zone_"
    "id\030\003 \002(\r\022\017\n\007mail_id\030\004 \002(\r\022\021\n\thasattach\030\005"
    " \002(\r\"<\n\034db_add_mail_rel_by_switch_in\022\034\n\004"
    "info\030\001 \003(\0132\016.rudb.mail_rel\"\032\n\030db_add_mai"
    "l_rel_flush_in\"|\n\033db_add_diamond_by_swit"
    "ch_in\022\016\n\006userid\030\001 \002(\004\022\016\n\006reg_tm\030\002 \002(\r\022\017\n"
    "\007zone_id\030\003 \002(\r\022\027\n\017add_diamond_num\030\004 \002(\r\022"
    "\023\n\013order_index\030\005 \002(\004\"3\n\034db_add_diamond_b"
    "y_switch_out\022\023\n\013order_index\030\001 \002(\004", 8353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db.proto", &protobuf_RegisterTypes);
  db_msgheader_t::default_instance_ = new db_msgheader_t();
  db_player_pvai_info_t::default_instance_ = new db_player_pvai_info_t();
  db_player_info_t::default_instance_ = new db_player_info_t();
  db_crtrole_in::default_instance_ = new db_crtrole_in();
  db_crtrole_out::default_instance_ = new db_crtrole_out();
  db_get_role_list_in::default_instance_ = new db_get_role_list_in();
  db_get_role_list_out::default_instance_ = new db_get_role_list_out();
  db_get_role_list_by_gm_in::default_instance_ = new db_get_role_list_by_gm_in();
  db_get_role_list_by_gm_out::default_instance_ = new db_get_role_list_by_gm_out();
  db_login_in::default_instance_ = new db_login_in();
  db_login_out::default_instance_ = new db_login_out();
  db_del_role_in::default_instance_ = new db_del_role_in();
  db_levelup_in::default_instance_ = new db_levelup_in();
  db_backpack_query_in::default_instance_ = new db_backpack_query_in();
  db_equip_hole::default_instance_ = new db_equip_hole();
  db_packpos::default_instance_ = new db_packpos();
  db_backpack_query_out::default_instance_ = new db_backpack_query_out();
  db_backpack_add_in::default_instance_ = new db_backpack_add_in();
  db_backpack_update_in::default_instance_ = new db_backpack_update_in();
  db_backpack_del_in::default_instance_ = new db_backpack_del_in();
  db_backpack_move_in::default_instance_ = new db_backpack_move_in();
  db_instance_info::default_instance_ = new db_instance_info();
  db_instance_query_in::default_instance_ = new db_instance_query_in();
  db_instance_query_out::default_instance_ = new db_instance_query_out();
  db_instance_modify_in::default_instance_ = new db_instance_modify_in();
  db_task_query_in::default_instance_ = new db_task_query_in();
  db_task_info::default_instance_ = new db_task_info();
  db_task_query_out::default_instance_ = new db_task_query_out();
  db_task_step_in::default_instance_ = new db_task_step_in();
  db_daily_task_info::default_instance_ = new db_daily_task_info();
  db_query_daily_task_in::default_instance_ = new db_query_daily_task_in();
  db_query_daily_task_out::default_instance_ = new db_query_daily_task_out();
  db_replace_daily_task_in::default_instance_ = new db_replace_daily_task_in();
  db_del_daily_task_in::default_instance_ = new db_del_daily_task_in();
  db_attribute_query_in::default_instance_ = new db_attribute_query_in();
  db_attribute_info::default_instance_ = new db_attribute_info();
  db_attribute_query_out::default_instance_ = new db_attribute_query_out();
  db_attribute_set_in::default_instance_ = new db_attribute_set_in();
  db_shared_attribute_query_in::default_instance_ = new db_shared_attribute_query_in();
  db_shared_attribute_query_out::default_instance_ = new db_shared_attribute_query_out();
  db_shared_attribute_set_in::default_instance_ = new db_shared_attribute_set_in();
  db_skill_query_in::default_instance_ = new db_skill_query_in();
  db_skill_query_out::default_instance_ = new db_skill_query_out();
  db_skill_query_out_skill_info::default_instance_ = new db_skill_query_out_skill_info();
  db_skill_add_in::default_instance_ = new db_skill_add_in();
  db_friend_query_in::default_instance_ = new db_friend_query_in();
  db_query_id_by_name_in::default_instance_ = new db_query_id_by_name_in();
  db_query_id_by_name_out::default_instance_ = new db_query_id_by_name_out();
  show_info::default_instance_ = new show_info();
  db_nearby_query_in::default_instance_ = new db_nearby_query_in();
  db_nearby_query_out::default_instance_ = new db_nearby_query_out();
  db_list_partner_in::default_instance_ = new db_list_partner_in();
  db_list_partner_out::default_instance_ = new db_list_partner_out();
  db_friend_query_out::default_instance_ = new db_friend_query_out();
  db_friend_add_in::default_instance_ = new db_friend_add_in();
  db_friend_del_in::default_instance_ = new db_friend_del_in();
  db_dnd_query_in::default_instance_ = new db_dnd_query_in();
  db_dnd_query_out::default_instance_ = new db_dnd_query_out();
  db_dnd_add_in::default_instance_ = new db_dnd_add_in();
  db_dnd_del_in::default_instance_ = new db_dnd_del_in();
  db_ai_rank_info::default_instance_ = new db_ai_rank_info();
  db_ai_rank_log::default_instance_ = new db_ai_rank_log();
  db_ai_rank_log_one_log::default_instance_ = new db_ai_rank_log_one_log();
  db_ai_rank_add_in::default_instance_ = new db_ai_rank_add_in();
  db_ai_rank_add_out::default_instance_ = new db_ai_rank_add_out();
  db_ai_rank_query_in::default_instance_ = new db_ai_rank_query_in();
  db_ai_rank_query_out::default_instance_ = new db_ai_rank_query_out();
  db_ai_rank_exchange_in::default_instance_ = new db_ai_rank_exchange_in();
  db_ai_rank_range_in::default_instance_ = new db_ai_rank_range_in();
  db_ai_rank_range_out::default_instance_ = new db_ai_rank_range_out();
  db_ai_rank_log_in::default_instance_ = new db_ai_rank_log_in();
  db_update_pvai_basic_info_in::default_instance_ = new db_update_pvai_basic_info_in();
  activity_step_t::default_instance_ = new activity_step_t();
  activity_info_t::default_instance_ = new activity_info_t();
  db_query_activity_list_in::default_instance_ = new db_query_activity_list_in();
  db_query_activity_list_out::default_instance_ = new db_query_activity_list_out();
  db_replace_activity_info_in::default_instance_ = new db_replace_activity_info_in();
  db_delete_activity_info_in::default_instance_ = new db_delete_activity_info_in();
  mail_item_attachment_t::default_instance_ = new mail_item_attachment_t();
  db_mail_info_t::default_instance_ = new db_mail_info_t();
  db_add_new_mail_in::default_instance_ = new db_add_new_mail_in();
  db_add_new_mail_out::default_instance_ = new db_add_new_mail_out();
  db_query_mail_infos_in::default_instance_ = new db_query_mail_infos_in();
  db_query_mail_infos_out::default_instance_ = new db_query_mail_infos_out();
  db_query_players_info_in::default_instance_ = new db_query_players_info_in();
  db_query_players_info_out::default_instance_ = new db_query_players_info_out();
  db_query_userinfo_by_name_zone_in::default_instance_ = new db_query_userinfo_by_name_zone_in();
  db_query_userinfo_by_name_zone_out::default_instance_ = new db_query_userinfo_by_name_zone_out();
  db_query_mail_list_in::default_instance_ = new db_query_mail_list_in();
  db_mail_list::default_instance_ = new db_mail_list();
  db_query_mail_list_out::default_instance_ = new db_query_mail_list_out();
  db_query_mail_in::default_instance_ = new db_query_mail_in();
  db_query_mail_out::default_instance_ = new db_query_mail_out();
  db_get_attach_in::default_instance_ = new db_get_attach_in();
  db_get_attach_out::default_instance_ = new db_get_attach_out();
  db_get_attach_success_in::default_instance_ = new db_get_attach_success_in();
  db_del_mail_in::default_instance_ = new db_del_mail_in();
  db_new_mail_in::default_instance_ = new db_new_mail_in();
  db_new_mail_out::default_instance_ = new db_new_mail_out();
  db_attach::default_instance_ = new db_attach();
  db_add_mail_in::default_instance_ = new db_add_mail_in();
  db_add_mail_by_switch_in::default_instance_ = new db_add_mail_by_switch_in();
  db_add_mail_by_switch_out::default_instance_ = new db_add_mail_by_switch_out();
  mail_rel::default_instance_ = new mail_rel();
  db_add_mail_rel_by_switch_in::default_instance_ = new db_add_mail_rel_by_switch_in();
  db_add_mail_rel_flush_in::default_instance_ = new db_add_mail_rel_flush_in();
  db_add_diamond_by_switch_in::default_instance_ = new db_add_diamond_by_switch_in();
  db_add_diamond_by_switch_out::default_instance_ = new db_add_diamond_by_switch_out();
  db_msgheader_t::default_instance_->InitAsDefaultInstance();
  db_player_pvai_info_t::default_instance_->InitAsDefaultInstance();
  db_player_info_t::default_instance_->InitAsDefaultInstance();
  db_crtrole_in::default_instance_->InitAsDefaultInstance();
  db_crtrole_out::default_instance_->InitAsDefaultInstance();
  db_get_role_list_in::default_instance_->InitAsDefaultInstance();
  db_get_role_list_out::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_gm_in::default_instance_->InitAsDefaultInstance();
  db_get_role_list_by_gm_out::default_instance_->InitAsDefaultInstance();
  db_login_in::default_instance_->InitAsDefaultInstance();
  db_login_out::default_instance_->InitAsDefaultInstance();
  db_del_role_in::default_instance_->InitAsDefaultInstance();
  db_levelup_in::default_instance_->InitAsDefaultInstance();
  db_backpack_query_in::default_instance_->InitAsDefaultInstance();
  db_equip_hole::default_instance_->InitAsDefaultInstance();
  db_packpos::default_instance_->InitAsDefaultInstance();
  db_backpack_query_out::default_instance_->InitAsDefaultInstance();
  db_backpack_add_in::default_instance_->InitAsDefaultInstance();
  db_backpack_update_in::default_instance_->InitAsDefaultInstance();
  db_backpack_del_in::default_instance_->InitAsDefaultInstance();
  db_backpack_move_in::default_instance_->InitAsDefaultInstance();
  db_instance_info::default_instance_->InitAsDefaultInstance();
  db_instance_query_in::default_instance_->InitAsDefaultInstance();
  db_instance_query_out::default_instance_->InitAsDefaultInstance();
  db_instance_modify_in::default_instance_->InitAsDefaultInstance();
  db_task_query_in::default_instance_->InitAsDefaultInstance();
  db_task_info::default_instance_->InitAsDefaultInstance();
  db_task_query_out::default_instance_->InitAsDefaultInstance();
  db_task_step_in::default_instance_->InitAsDefaultInstance();
  db_daily_task_info::default_instance_->InitAsDefaultInstance();
  db_query_daily_task_in::default_instance_->InitAsDefaultInstance();
  db_query_daily_task_out::default_instance_->InitAsDefaultInstance();
  db_replace_daily_task_in::default_instance_->InitAsDefaultInstance();
  db_del_daily_task_in::default_instance_->InitAsDefaultInstance();
  db_attribute_query_in::default_instance_->InitAsDefaultInstance();
  db_attribute_info::default_instance_->InitAsDefaultInstance();
  db_attribute_query_out::default_instance_->InitAsDefaultInstance();
  db_attribute_set_in::default_instance_->InitAsDefaultInstance();
  db_shared_attribute_query_in::default_instance_->InitAsDefaultInstance();
  db_shared_attribute_query_out::default_instance_->InitAsDefaultInstance();
  db_shared_attribute_set_in::default_instance_->InitAsDefaultInstance();
  db_skill_query_in::default_instance_->InitAsDefaultInstance();
  db_skill_query_out::default_instance_->InitAsDefaultInstance();
  db_skill_query_out_skill_info::default_instance_->InitAsDefaultInstance();
  db_skill_add_in::default_instance_->InitAsDefaultInstance();
  db_friend_query_in::default_instance_->InitAsDefaultInstance();
  db_query_id_by_name_in::default_instance_->InitAsDefaultInstance();
  db_query_id_by_name_out::default_instance_->InitAsDefaultInstance();
  show_info::default_instance_->InitAsDefaultInstance();
  db_nearby_query_in::default_instance_->InitAsDefaultInstance();
  db_nearby_query_out::default_instance_->InitAsDefaultInstance();
  db_list_partner_in::default_instance_->InitAsDefaultInstance();
  db_list_partner_out::default_instance_->InitAsDefaultInstance();
  db_friend_query_out::default_instance_->InitAsDefaultInstance();
  db_friend_add_in::default_instance_->InitAsDefaultInstance();
  db_friend_del_in::default_instance_->InitAsDefaultInstance();
  db_dnd_query_in::default_instance_->InitAsDefaultInstance();
  db_dnd_query_out::default_instance_->InitAsDefaultInstance();
  db_dnd_add_in::default_instance_->InitAsDefaultInstance();
  db_dnd_del_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_info::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log_one_log::default_instance_->InitAsDefaultInstance();
  db_ai_rank_add_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_add_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_query_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_query_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_exchange_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_range_in::default_instance_->InitAsDefaultInstance();
  db_ai_rank_range_out::default_instance_->InitAsDefaultInstance();
  db_ai_rank_log_in::default_instance_->InitAsDefaultInstance();
  db_update_pvai_basic_info_in::default_instance_->InitAsDefaultInstance();
  activity_step_t::default_instance_->InitAsDefaultInstance();
  activity_info_t::default_instance_->InitAsDefaultInstance();
  db_query_activity_list_in::default_instance_->InitAsDefaultInstance();
  db_query_activity_list_out::default_instance_->InitAsDefaultInstance();
  db_replace_activity_info_in::default_instance_->InitAsDefaultInstance();
  db_delete_activity_info_in::default_instance_->InitAsDefaultInstance();
  mail_item_attachment_t::default_instance_->InitAsDefaultInstance();
  db_mail_info_t::default_instance_->InitAsDefaultInstance();
  db_add_new_mail_in::default_instance_->InitAsDefaultInstance();
  db_add_new_mail_out::default_instance_->InitAsDefaultInstance();
  db_query_mail_infos_in::default_instance_->InitAsDefaultInstance();
  db_query_mail_infos_out::default_instance_->InitAsDefaultInstance();
  db_query_players_info_in::default_instance_->InitAsDefaultInstance();
  db_query_players_info_out::default_instance_->InitAsDefaultInstance();
  db_query_userinfo_by_name_zone_in::default_instance_->InitAsDefaultInstance();
  db_query_userinfo_by_name_zone_out::default_instance_->InitAsDefaultInstance();
  db_query_mail_list_in::default_instance_->InitAsDefaultInstance();
  db_mail_list::default_instance_->InitAsDefaultInstance();
  db_query_mail_list_out::default_instance_->InitAsDefaultInstance();
  db_query_mail_in::default_instance_->InitAsDefaultInstance();
  db_query_mail_out::default_instance_->InitAsDefaultInstance();
  db_get_attach_in::default_instance_->InitAsDefaultInstance();
  db_get_attach_out::default_instance_->InitAsDefaultInstance();
  db_get_attach_success_in::default_instance_->InitAsDefaultInstance();
  db_del_mail_in::default_instance_->InitAsDefaultInstance();
  db_new_mail_in::default_instance_->InitAsDefaultInstance();
  db_new_mail_out::default_instance_->InitAsDefaultInstance();
  db_attach::default_instance_->InitAsDefaultInstance();
  db_add_mail_in::default_instance_->InitAsDefaultInstance();
  db_add_mail_by_switch_in::default_instance_->InitAsDefaultInstance();
  db_add_mail_by_switch_out::default_instance_->InitAsDefaultInstance();
  mail_rel::default_instance_->InitAsDefaultInstance();
  db_add_mail_rel_by_switch_in::default_instance_->InitAsDefaultInstance();
  db_add_mail_rel_flush_in::default_instance_->InitAsDefaultInstance();
  db_add_diamond_by_switch_in::default_instance_->InitAsDefaultInstance();
  db_add_diamond_by_switch_out::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2eproto {
  StaticDescriptorInitializer_db_2eproto() {
    protobuf_AddDesc_db_2eproto();
  }
} static_descriptor_initializer_db_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int db_msgheader_t::kMsgNameFieldNumber;
const int db_msgheader_t::kTargetUidFieldNumber;
const int db_msgheader_t::kErrcodeFieldNumber;
const int db_msgheader_t::kRegTimeFieldNumber;
const int db_msgheader_t::kSrcUidFieldNumber;
const int db_msgheader_t::kLoginIdFieldNumber;
const int db_msgheader_t::kAuxFieldNumber;
const int db_msgheader_t::kTransIdFieldNumber;
#endif  // !_MSC_VER

db_msgheader_t::db_msgheader_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_msgheader_t::InitAsDefaultInstance() {
}

db_msgheader_t::db_msgheader_t(const db_msgheader_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_msgheader_t::SharedCtor() {
  _cached_size_ = 0;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_uid_ = 0u;
  errcode_ = 0u;
  reg_time_ = 0u;
  src_uid_ = 0u;
  login_id_ = 0u;
  aux_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_msgheader_t::~db_msgheader_t() {
  SharedDtor();
}

void db_msgheader_t::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (aux_ != &::google::protobuf::internal::kEmptyString) {
    delete aux_;
  }
  if (this != default_instance_) {
  }
}

void db_msgheader_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_msgheader_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_msgheader_t_descriptor_;
}

const db_msgheader_t& db_msgheader_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_msgheader_t* db_msgheader_t::default_instance_ = NULL;

db_msgheader_t* db_msgheader_t::New() const {
  return new db_msgheader_t;
}

void db_msgheader_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    target_uid_ = 0u;
    errcode_ = 0u;
    reg_time_ = 0u;
    src_uid_ = 0u;
    login_id_ = 0u;
    if (has_aux()) {
      if (aux_ != &::google::protobuf::internal::kEmptyString) {
        aux_->clear();
      }
    }
    trans_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_msgheader_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes msg_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_uid;
        break;
      }
      
      // required uint32 target_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_uid_)));
          set_has_target_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }
      
      // required uint32 errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reg_time;
        break;
      }
      
      // optional uint32 reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_uid;
        break;
      }
      
      // optional uint32 src_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_uid_)));
          set_has_src_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_login_id;
        break;
      }
      
      // optional uint32 login_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_id_)));
          set_has_login_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aux;
        break;
      }
      
      // optional bytes aux = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aux()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_trans_id;
        break;
      }
      
      // optional uint32 trans_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_id_)));
          set_has_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_msgheader_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes msg_name = 1;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msg_name(), output);
  }
  
  // required uint32 target_uid = 2;
  if (has_target_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_uid(), output);
  }
  
  // required uint32 errcode = 3;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->errcode(), output);
  }
  
  // optional uint32 reg_time = 4;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reg_time(), output);
  }
  
  // optional uint32 src_uid = 5;
  if (has_src_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->src_uid(), output);
  }
  
  // optional uint32 login_id = 6;
  if (has_login_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->login_id(), output);
  }
  
  // optional bytes aux = 7;
  if (has_aux()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->aux(), output);
  }
  
  // optional uint32 trans_id = 8;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->trans_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_msgheader_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes msg_name = 1;
  if (has_msg_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg_name(), target);
  }
  
  // required uint32 target_uid = 2;
  if (has_target_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_uid(), target);
  }
  
  // required uint32 errcode = 3;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->errcode(), target);
  }
  
  // optional uint32 reg_time = 4;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reg_time(), target);
  }
  
  // optional uint32 src_uid = 5;
  if (has_src_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->src_uid(), target);
  }
  
  // optional uint32 login_id = 6;
  if (has_login_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->login_id(), target);
  }
  
  // optional bytes aux = 7;
  if (has_aux()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->aux(), target);
  }
  
  // optional uint32 trans_id = 8;
  if (has_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->trans_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_msgheader_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes msg_name = 1;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_name());
    }
    
    // required uint32 target_uid = 2;
    if (has_target_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_uid());
    }
    
    // required uint32 errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 reg_time = 4;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 src_uid = 5;
    if (has_src_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_uid());
    }
    
    // optional uint32 login_id = 6;
    if (has_login_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_id());
    }
    
    // optional bytes aux = 7;
    if (has_aux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aux());
    }
    
    // optional uint32 trans_id = 8;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_msgheader_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_msgheader_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_msgheader_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_msgheader_t::MergeFrom(const db_msgheader_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_target_uid()) {
      set_target_uid(from.target_uid());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_src_uid()) {
      set_src_uid(from.src_uid());
    }
    if (from.has_login_id()) {
      set_login_id(from.login_id());
    }
    if (from.has_aux()) {
      set_aux(from.aux());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_msgheader_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_msgheader_t::CopyFrom(const db_msgheader_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_msgheader_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_msgheader_t::Swap(db_msgheader_t* other) {
  if (other != this) {
    std::swap(msg_name_, other->msg_name_);
    std::swap(target_uid_, other->target_uid_);
    std::swap(errcode_, other->errcode_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(src_uid_, other->src_uid_);
    std::swap(login_id_, other->login_id_);
    std::swap(aux_, other->aux_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_msgheader_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_msgheader_t_descriptor_;
  metadata.reflection = db_msgheader_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_pvai_info_t::kRankFieldNumber;
const int db_player_pvai_info_t::kAccuCoinFieldNumber;
const int db_player_pvai_info_t::kAccuReputationFieldNumber;
const int db_player_pvai_info_t::kAccuTimesFieldNumber;
const int db_player_pvai_info_t::kAccuEndTimeFieldNumber;
#endif  // !_MSC_VER

db_player_pvai_info_t::db_player_pvai_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_pvai_info_t::InitAsDefaultInstance() {
}

db_player_pvai_info_t::db_player_pvai_info_t(const db_player_pvai_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_pvai_info_t::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  accu_coin_ = 0u;
  accu_reputation_ = 0u;
  accu_times_ = 0u;
  accu_end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_pvai_info_t::~db_player_pvai_info_t() {
  SharedDtor();
}

void db_player_pvai_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_player_pvai_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_pvai_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_pvai_info_t_descriptor_;
}

const db_player_pvai_info_t& db_player_pvai_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_pvai_info_t* db_player_pvai_info_t::default_instance_ = NULL;

db_player_pvai_info_t* db_player_pvai_info_t::New() const {
  return new db_player_pvai_info_t;
}

void db_player_pvai_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    accu_coin_ = 0u;
    accu_reputation_ = 0u;
    accu_times_ = 0u;
    accu_end_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_pvai_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accu_coin;
        break;
      }
      
      // required uint32 accu_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_coin_)));
          set_has_accu_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accu_reputation;
        break;
      }
      
      // required uint32 accu_reputation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_reputation_)));
          set_has_accu_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accu_times;
        break;
      }
      
      // required uint32 accu_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_times_)));
          set_has_accu_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accu_end_time;
        break;
      }
      
      // required uint32 accu_end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_end_time_)));
          set_has_accu_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_pvai_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accu_coin(), output);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accu_reputation(), output);
  }
  
  // required uint32 accu_times = 4;
  if (has_accu_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accu_times(), output);
  }
  
  // required uint32 accu_end_time = 5;
  if (has_accu_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accu_end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_pvai_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accu_coin(), target);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accu_reputation(), target);
  }
  
  // required uint32 accu_times = 4;
  if (has_accu_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accu_times(), target);
  }
  
  // required uint32 accu_end_time = 5;
  if (has_accu_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accu_end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_pvai_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required uint32 accu_coin = 2;
    if (has_accu_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_coin());
    }
    
    // required uint32 accu_reputation = 3;
    if (has_accu_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_reputation());
    }
    
    // required uint32 accu_times = 4;
    if (has_accu_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_times());
    }
    
    // required uint32 accu_end_time = 5;
    if (has_accu_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_pvai_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_pvai_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_pvai_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_pvai_info_t::MergeFrom(const db_player_pvai_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_accu_coin()) {
      set_accu_coin(from.accu_coin());
    }
    if (from.has_accu_reputation()) {
      set_accu_reputation(from.accu_reputation());
    }
    if (from.has_accu_times()) {
      set_accu_times(from.accu_times());
    }
    if (from.has_accu_end_time()) {
      set_accu_end_time(from.accu_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_pvai_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_pvai_info_t::CopyFrom(const db_player_pvai_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_pvai_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_player_pvai_info_t::Swap(db_player_pvai_info_t* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(accu_coin_, other->accu_coin_);
    std::swap(accu_reputation_, other->accu_reputation_);
    std::swap(accu_times_, other->accu_times_);
    std::swap(accu_end_time_, other->accu_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_pvai_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_pvai_info_t_descriptor_;
  metadata.reflection = db_player_pvai_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_player_info_t::kUseridFieldNumber;
const int db_player_info_t::kRegTimeFieldNumber;
const int db_player_info_t::kLevelFieldNumber;
const int db_player_info_t::kNameFieldNumber;
const int db_player_info_t::kTypeFieldNumber;
const int db_player_info_t::kGenderFieldNumber;
const int db_player_info_t::kZoneIdFieldNumber;
const int db_player_info_t::kVipLvFieldNumber;
const int db_player_info_t::kPvaiInfoFieldNumber;
#endif  // !_MSC_VER

db_player_info_t::db_player_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_player_info_t::InitAsDefaultInstance() {
  pvai_info_ = const_cast< ::rudb::db_player_pvai_info_t*>(&::rudb::db_player_pvai_info_t::default_instance());
}

db_player_info_t::db_player_info_t(const db_player_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_player_info_t::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_time_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  zone_id_ = 0u;
  vip_lv_ = 0u;
  pvai_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_player_info_t::~db_player_info_t() {
  SharedDtor();
}

void db_player_info_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pvai_info_;
  }
}

void db_player_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_player_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_player_info_t_descriptor_;
}

const db_player_info_t& db_player_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_player_info_t* db_player_info_t::default_instance_ = NULL;

db_player_info_t* db_player_info_t::New() const {
  return new db_player_info_t;
}

void db_player_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_time_ = 0u;
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
    zone_id_ = 0u;
    vip_lv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pvai_info()) {
      if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_player_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }
      
      // optional uint32 gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zone_id;
        break;
      }
      
      // optional uint32 zone_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_lv;
        break;
      }
      
      // optional uint32 vip_lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pvai_info;
        break;
      }
      
      // optional .rudb.db_player_pvai_info_t pvai_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvai_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvai_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_player_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gender(), output);
  }
  
  // optional uint32 zone_id = 7;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zone_id(), output);
  }
  
  // optional uint32 vip_lv = 8;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_lv(), output);
  }
  
  // optional .rudb.db_player_pvai_info_t pvai_info = 9;
  if (has_pvai_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pvai_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_player_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gender(), target);
  }
  
  // optional uint32 zone_id = 7;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zone_id(), target);
  }
  
  // optional uint32 vip_lv = 8;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_lv(), target);
  }
  
  // optional .rudb.db_player_pvai_info_t pvai_info = 9;
  if (has_pvai_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pvai_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_player_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // optional uint32 zone_id = 7;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // optional uint32 vip_lv = 8;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rudb.db_player_pvai_info_t pvai_info = 9;
    if (has_pvai_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvai_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_player_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_player_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_player_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_player_info_t::MergeFrom(const db_player_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pvai_info()) {
      mutable_pvai_info()->::rudb::db_player_pvai_info_t::MergeFrom(from.pvai_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_player_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_player_info_t::CopyFrom(const db_player_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_player_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pvai_info()) {
    if (!this->pvai_info().IsInitialized()) return false;
  }
  return true;
}

void db_player_info_t::Swap(db_player_info_t* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(pvai_info_, other->pvai_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_player_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_player_info_t_descriptor_;
  metadata.reflection = db_player_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_crtrole_in::kZoneIdFieldNumber;
const int db_crtrole_in::kNameFieldNumber;
const int db_crtrole_in::kTypeFieldNumber;
const int db_crtrole_in::kGenderFieldNumber;
#endif  // !_MSC_VER

db_crtrole_in::db_crtrole_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_crtrole_in::InitAsDefaultInstance() {
}

db_crtrole_in::db_crtrole_in(const db_crtrole_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_crtrole_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crtrole_in::~db_crtrole_in() {
  SharedDtor();
}

void db_crtrole_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_crtrole_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crtrole_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crtrole_in_descriptor_;
}

const db_crtrole_in& db_crtrole_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_crtrole_in* db_crtrole_in::default_instance_ = NULL;

db_crtrole_in* db_crtrole_in::New() const {
  return new db_crtrole_in;
}

void db_crtrole_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_crtrole_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_crtrole_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_crtrole_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_crtrole_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crtrole_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_crtrole_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crtrole_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crtrole_in::MergeFrom(const db_crtrole_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_crtrole_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crtrole_in::CopyFrom(const db_crtrole_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crtrole_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_crtrole_in::Swap(db_crtrole_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_crtrole_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crtrole_in_descriptor_;
  metadata.reflection = db_crtrole_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_crtrole_out::kRegtimeFieldNumber;
const int db_crtrole_out::kNameFieldNumber;
const int db_crtrole_out::kTypeFieldNumber;
const int db_crtrole_out::kGenderFieldNumber;
#endif  // !_MSC_VER

db_crtrole_out::db_crtrole_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_crtrole_out::InitAsDefaultInstance() {
}

db_crtrole_out::db_crtrole_out(const db_crtrole_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_crtrole_out::SharedCtor() {
  _cached_size_ = 0;
  regtime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  gender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crtrole_out::~db_crtrole_out() {
  SharedDtor();
}

void db_crtrole_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_crtrole_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crtrole_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crtrole_out_descriptor_;
}

const db_crtrole_out& db_crtrole_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_crtrole_out* db_crtrole_out::default_instance_ = NULL;

db_crtrole_out* db_crtrole_out::New() const {
  return new db_crtrole_out;
}

void db_crtrole_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regtime_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    gender_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_crtrole_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 regtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtime_)));
          set_has_regtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_crtrole_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 regtime = 1;
  if (has_regtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regtime(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_crtrole_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 regtime = 1;
  if (has_regtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->regtime(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_crtrole_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 regtime = 1;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtime());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crtrole_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_crtrole_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crtrole_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crtrole_out::MergeFrom(const db_crtrole_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regtime()) {
      set_regtime(from.regtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_crtrole_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crtrole_out::CopyFrom(const db_crtrole_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crtrole_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_crtrole_out::Swap(db_crtrole_out* other) {
  if (other != this) {
    std::swap(regtime_, other->regtime_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_crtrole_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crtrole_out_descriptor_;
  metadata.reflection = db_crtrole_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_in::kZoneIdFieldNumber;
const int db_get_role_list_in::kUseridFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_in::db_get_role_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_in::InitAsDefaultInstance() {
}

db_get_role_list_in::db_get_role_list_in(const db_get_role_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_in::~db_get_role_list_in() {
  SharedDtor();
}

void db_get_role_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_in_descriptor_;
}

const db_get_role_list_in& db_get_role_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_in* db_get_role_list_in::default_instance_ = NULL;

db_get_role_list_in* db_get_role_list_in::New() const {
  return new db_get_role_list_in;
}

void db_get_role_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_in::MergeFrom(const db_get_role_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_in::CopyFrom(const db_get_role_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_role_list_in::Swap(db_get_role_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_in_descriptor_;
  metadata.reflection = db_get_role_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_out::kZoneIdFieldNumber;
const int db_get_role_list_out::kRolesFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_out::db_get_role_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_out::InitAsDefaultInstance() {
}

db_get_role_list_out::db_get_role_list_out(const db_get_role_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_out::~db_get_role_list_out() {
  SharedDtor();
}

void db_get_role_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_out_descriptor_;
}

const db_get_role_list_out& db_get_role_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_out* db_get_role_list_out::default_instance_ = NULL;

db_get_role_list_out* db_get_role_list_out::New() const {
  return new db_get_role_list_out;
}

void db_get_role_list_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }
      
      // repeated .rudb.db_player_info_t roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_out::MergeFrom(const db_get_role_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_out::CopyFrom(const db_get_role_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_role_list_out::Swap(db_get_role_list_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_out_descriptor_;
  metadata.reflection = db_get_role_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_gm_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_gm_in::db_get_role_list_by_gm_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_gm_in::InitAsDefaultInstance() {
}

db_get_role_list_by_gm_in::db_get_role_list_by_gm_in(const db_get_role_list_by_gm_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_gm_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_gm_in::~db_get_role_list_by_gm_in() {
  SharedDtor();
}

void db_get_role_list_by_gm_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_gm_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_gm_in_descriptor_;
}

const db_get_role_list_by_gm_in& db_get_role_list_by_gm_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_gm_in* db_get_role_list_by_gm_in::default_instance_ = NULL;

db_get_role_list_by_gm_in* db_get_role_list_by_gm_in::New() const {
  return new db_get_role_list_by_gm_in;
}

void db_get_role_list_by_gm_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_gm_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_gm_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_gm_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_gm_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_gm_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_gm_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_gm_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_gm_in::MergeFrom(const db_get_role_list_by_gm_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_gm_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_gm_in::CopyFrom(const db_get_role_list_by_gm_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_gm_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_get_role_list_by_gm_in::Swap(db_get_role_list_by_gm_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_gm_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_gm_in_descriptor_;
  metadata.reflection = db_get_role_list_by_gm_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_role_list_by_gm_out::kZoneIdFieldNumber;
const int db_get_role_list_by_gm_out::kRolesFieldNumber;
#endif  // !_MSC_VER

db_get_role_list_by_gm_out::db_get_role_list_by_gm_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_role_list_by_gm_out::InitAsDefaultInstance() {
}

db_get_role_list_by_gm_out::db_get_role_list_by_gm_out(const db_get_role_list_by_gm_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_role_list_by_gm_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_role_list_by_gm_out::~db_get_role_list_by_gm_out() {
  SharedDtor();
}

void db_get_role_list_by_gm_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_role_list_by_gm_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_role_list_by_gm_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_role_list_by_gm_out_descriptor_;
}

const db_get_role_list_by_gm_out& db_get_role_list_by_gm_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_role_list_by_gm_out* db_get_role_list_by_gm_out::default_instance_ = NULL;

db_get_role_list_by_gm_out* db_get_role_list_by_gm_out::New() const {
  return new db_get_role_list_by_gm_out;
}

void db_get_role_list_by_gm_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_role_list_by_gm_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }
      
      // repeated .rudb.db_player_info_t roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_role_list_by_gm_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_role_list_by_gm_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_role_list_by_gm_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_role_list_by_gm_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_role_list_by_gm_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_role_list_by_gm_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_role_list_by_gm_out::MergeFrom(const db_get_role_list_by_gm_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_role_list_by_gm_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_role_list_by_gm_out::CopyFrom(const db_get_role_list_by_gm_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_role_list_by_gm_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void db_get_role_list_by_gm_out::Swap(db_get_role_list_by_gm_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_role_list_by_gm_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_role_list_by_gm_out_descriptor_;
  metadata.reflection = db_get_role_list_by_gm_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_login_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_login_in::db_login_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_login_in::InitAsDefaultInstance() {
}

db_login_in::db_login_in(const db_login_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_login_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_login_in::~db_login_in() {
  SharedDtor();
}

void db_login_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_login_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_login_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_login_in_descriptor_;
}

const db_login_in& db_login_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_login_in* db_login_in::default_instance_ = NULL;

db_login_in* db_login_in::New() const {
  return new db_login_in;
}

void db_login_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_login_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_login_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_login_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_login_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_login_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_login_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_login_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_login_in::MergeFrom(const db_login_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_login_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_login_in::CopyFrom(const db_login_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_login_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_login_in::Swap(db_login_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_login_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_login_in_descriptor_;
  metadata.reflection = db_login_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_login_out::kNameFieldNumber;
const int db_login_out::kRegtimeFieldNumber;
const int db_login_out::kTypeFieldNumber;
const int db_login_out::kGenderFieldNumber;
const int db_login_out::kLvFieldNumber;
const int db_login_out::kExpFieldNumber;
const int db_login_out::kLastLoginTimeFieldNumber;
#endif  // !_MSC_VER

db_login_out::db_login_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_login_out::InitAsDefaultInstance() {
}

db_login_out::db_login_out(const db_login_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_login_out::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regtime_ = 0u;
  type_ = 0u;
  gender_ = 0u;
  lv_ = 0u;
  exp_ = 0u;
  last_login_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_login_out::~db_login_out() {
  SharedDtor();
}

void db_login_out::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_login_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_login_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_login_out_descriptor_;
}

const db_login_out& db_login_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_login_out* db_login_out::default_instance_ = NULL;

db_login_out* db_login_out::New() const {
  return new db_login_out;
}

void db_login_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    regtime_ = 0u;
    type_ = 0u;
    gender_ = 0u;
    lv_ = 0u;
    exp_ = 0u;
    last_login_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_login_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regtime;
        break;
      }
      
      // required uint32 regtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regtime_)));
          set_has_regtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_login_time;
        break;
      }
      
      // required uint32 last_login_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_login_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required uint32 regtime = 2;
  if (has_regtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regtime(), output);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }
  
  // required uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }
  
  // required uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }
  
  // required uint32 last_login_time = 7;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_login_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_login_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required uint32 regtime = 2;
  if (has_regtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regtime(), target);
  }
  
  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // required uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }
  
  // required uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }
  
  // required uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }
  
  // required uint32 last_login_time = 7;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_login_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_login_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 regtime = 2;
    if (has_regtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regtime());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // required uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 last_login_time = 7;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_login_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_login_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_login_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_login_out::MergeFrom(const db_login_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_regtime()) {
      set_regtime(from.regtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_login_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_login_out::CopyFrom(const db_login_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_login_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void db_login_out::Swap(db_login_out* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(regtime_, other->regtime_);
    std::swap(type_, other->type_);
    std::swap(gender_, other->gender_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_login_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_login_out_descriptor_;
  metadata.reflection = db_login_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_role_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_role_in::db_del_role_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_role_in::InitAsDefaultInstance() {
}

db_del_role_in::db_del_role_in(const db_del_role_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_role_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_role_in::~db_del_role_in() {
  SharedDtor();
}

void db_del_role_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_role_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_role_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_role_in_descriptor_;
}

const db_del_role_in& db_del_role_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_role_in* db_del_role_in::default_instance_ = NULL;

db_del_role_in* db_del_role_in::New() const {
  return new db_del_role_in;
}

void db_del_role_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_role_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_role_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_role_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_role_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_role_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_role_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_role_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_role_in::MergeFrom(const db_del_role_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_role_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_role_in::CopyFrom(const db_del_role_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_role_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_role_in::Swap(db_del_role_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_role_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_role_in_descriptor_;
  metadata.reflection = db_del_role_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_levelup_in::kZoneIdFieldNumber;
const int db_levelup_in::kLevelFieldNumber;
#endif  // !_MSC_VER

db_levelup_in::db_levelup_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_levelup_in::InitAsDefaultInstance() {
}

db_levelup_in::db_levelup_in(const db_levelup_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_levelup_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_levelup_in::~db_levelup_in() {
  SharedDtor();
}

void db_levelup_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_levelup_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_levelup_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_levelup_in_descriptor_;
}

const db_levelup_in& db_levelup_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_levelup_in* db_levelup_in::default_instance_ = NULL;

db_levelup_in* db_levelup_in::New() const {
  return new db_levelup_in;
}

void db_levelup_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_levelup_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_levelup_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_levelup_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_levelup_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_levelup_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_levelup_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_levelup_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_levelup_in::MergeFrom(const db_levelup_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_levelup_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_levelup_in::CopyFrom(const db_levelup_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_levelup_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_levelup_in::Swap(db_levelup_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_levelup_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_levelup_in_descriptor_;
  metadata.reflection = db_levelup_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_backpack_query_in::db_backpack_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_query_in::InitAsDefaultInstance() {
}

db_backpack_query_in::db_backpack_query_in(const db_backpack_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_query_in::~db_backpack_query_in() {
  SharedDtor();
}

void db_backpack_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_query_in_descriptor_;
}

const db_backpack_query_in& db_backpack_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_query_in* db_backpack_query_in::default_instance_ = NULL;

db_backpack_query_in* db_backpack_query_in::New() const {
  return new db_backpack_query_in;
}

void db_backpack_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_query_in::MergeFrom(const db_backpack_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_query_in::CopyFrom(const db_backpack_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_backpack_query_in::Swap(db_backpack_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_query_in_descriptor_;
  metadata.reflection = db_backpack_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_equip_hole::kHoleIndexFieldNumber;
const int db_equip_hole::kItemGemIdFieldNumber;
const int db_equip_hole::kAttrKeyFieldNumber;
const int db_equip_hole::kAttrValueFieldNumber;
#endif  // !_MSC_VER

db_equip_hole::db_equip_hole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_equip_hole::InitAsDefaultInstance() {
}

db_equip_hole::db_equip_hole(const db_equip_hole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_equip_hole::SharedCtor() {
  _cached_size_ = 0;
  hole_index_ = 0u;
  item_gem_id_ = 0u;
  attr_key_ = 0u;
  attr_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_equip_hole::~db_equip_hole() {
  SharedDtor();
}

void db_equip_hole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_equip_hole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_equip_hole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_equip_hole_descriptor_;
}

const db_equip_hole& db_equip_hole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_equip_hole* db_equip_hole::default_instance_ = NULL;

db_equip_hole* db_equip_hole::New() const {
  return new db_equip_hole;
}

void db_equip_hole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hole_index_ = 0u;
    item_gem_id_ = 0u;
    attr_key_ = 0u;
    attr_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_equip_hole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hole_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_gem_id;
        break;
      }
      
      // required uint32 item_gem_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_gem_id_)));
          set_has_item_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attr_key;
        break;
      }
      
      // required uint32 attr_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_key_)));
          set_has_attr_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attr_value;
        break;
      }
      
      // required uint32 attr_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_equip_hole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hole_index(), output);
  }
  
  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_gem_id(), output);
  }
  
  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attr_key(), output);
  }
  
  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attr_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_equip_hole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hole_index = 1;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hole_index(), target);
  }
  
  // required uint32 item_gem_id = 2;
  if (has_item_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_gem_id(), target);
  }
  
  // required uint32 attr_key = 3;
  if (has_attr_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attr_key(), target);
  }
  
  // required uint32 attr_value = 4;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attr_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_equip_hole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hole_index = 1;
    if (has_hole_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_index());
    }
    
    // required uint32 item_gem_id = 2;
    if (has_item_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_gem_id());
    }
    
    // required uint32 attr_key = 3;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_key());
    }
    
    // required uint32 attr_value = 4;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_equip_hole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_equip_hole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_equip_hole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_equip_hole::MergeFrom(const db_equip_hole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
    if (from.has_item_gem_id()) {
      set_item_gem_id(from.item_gem_id());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_equip_hole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_equip_hole::CopyFrom(const db_equip_hole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_equip_hole::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_equip_hole::Swap(db_equip_hole* other) {
  if (other != this) {
    std::swap(hole_index_, other->hole_index_);
    std::swap(item_gem_id_, other->item_gem_id_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_equip_hole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_equip_hole_descriptor_;
  metadata.reflection = db_equip_hole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_packpos::kPosFieldNumber;
const int db_packpos::kItemIdFieldNumber;
const int db_packpos::kItemLevelFieldNumber;
const int db_packpos::kItemNumFieldNumber;
const int db_packpos::kHole1FieldNumber;
const int db_packpos::kHole2FieldNumber;
const int db_packpos::kHole3FieldNumber;
const int db_packpos::kHole4FieldNumber;
const int db_packpos::kEquipHolesFieldNumber;
#endif  // !_MSC_VER

db_packpos::db_packpos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_packpos::InitAsDefaultInstance() {
}

db_packpos::db_packpos(const db_packpos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_packpos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_id_ = 0u;
  item_level_ = 0u;
  item_num_ = 0u;
  hole1_ = 0u;
  hole2_ = 0u;
  hole3_ = 0u;
  hole4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_packpos::~db_packpos() {
  SharedDtor();
}

void db_packpos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_packpos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_packpos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_packpos_descriptor_;
}

const db_packpos& db_packpos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_packpos* db_packpos::default_instance_ = NULL;

db_packpos* db_packpos::New() const {
  return new db_packpos;
}

void db_packpos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    item_id_ = 0u;
    item_level_ = 0u;
    item_num_ = 0u;
    hole1_ = 0u;
    hole2_ = 0u;
    hole3_ = 0u;
    hole4_ = 0u;
  }
  equip_holes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_packpos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level;
        break;
      }
      
      // required uint32 item_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          set_has_item_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }
      
      // required uint32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_holes;
        break;
      }
      
      // repeated .rudb.db_equip_hole equip_holes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_holes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_holes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_holes;
        if (input->ExpectTag(48)) goto parse_hole2;
        break;
      }
      
      // optional uint32 hole2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole2_)));
          set_has_hole2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hole3;
        break;
      }
      
      // optional uint32 hole3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole3_)));
          set_has_hole3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hole4;
        break;
      }
      
      // optional uint32 hole4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole4_)));
          set_has_hole4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hole1;
        break;
      }
      
      // optional uint32 hole1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole1_)));
          set_has_hole1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_packpos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }
  
  // required uint32 item_level = 3;
  if (has_item_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_level(), output);
  }
  
  // required uint32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_num(), output);
  }
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip_holes(i), output);
  }
  
  // optional uint32 hole2 = 6;
  if (has_hole2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hole2(), output);
  }
  
  // optional uint32 hole3 = 7;
  if (has_hole3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hole3(), output);
  }
  
  // optional uint32 hole4 = 8;
  if (has_hole4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hole4(), output);
  }
  
  // optional uint32 hole1 = 9;
  if (has_hole1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hole1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_packpos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }
  
  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }
  
  // required uint32 item_level = 3;
  if (has_item_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_level(), target);
  }
  
  // required uint32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_num(), target);
  }
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  for (int i = 0; i < this->equip_holes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip_holes(i), target);
  }
  
  // optional uint32 hole2 = 6;
  if (has_hole2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hole2(), target);
  }
  
  // optional uint32 hole3 = 7;
  if (has_hole3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hole3(), target);
  }
  
  // optional uint32 hole4 = 8;
  if (has_hole4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hole4(), target);
  }
  
  // optional uint32 hole1 = 9;
  if (has_hole1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hole1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_packpos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }
    
    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_level = 3;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }
    
    // required uint32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }
    
    // optional uint32 hole1 = 9;
    if (has_hole1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole1());
    }
    
    // optional uint32 hole2 = 6;
    if (has_hole2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole2());
    }
    
    // optional uint32 hole3 = 7;
    if (has_hole3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole3());
    }
    
    // optional uint32 hole4 = 8;
    if (has_hole4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole4());
    }
    
  }
  // repeated .rudb.db_equip_hole equip_holes = 5;
  total_size += 1 * this->equip_holes_size();
  for (int i = 0; i < this->equip_holes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_holes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_packpos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_packpos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_packpos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_packpos::MergeFrom(const db_packpos& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_holes_.MergeFrom(from.equip_holes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_level()) {
      set_item_level(from.item_level());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_hole1()) {
      set_hole1(from.hole1());
    }
    if (from.has_hole2()) {
      set_hole2(from.hole2());
    }
    if (from.has_hole3()) {
      set_hole3(from.hole3());
    }
    if (from.has_hole4()) {
      set_hole4(from.hole4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_packpos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_packpos::CopyFrom(const db_packpos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_packpos::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < equip_holes_size(); i++) {
    if (!this->equip_holes(i).IsInitialized()) return false;
  }
  return true;
}

void db_packpos::Swap(db_packpos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_level_, other->item_level_);
    std::swap(item_num_, other->item_num_);
    std::swap(hole1_, other->hole1_);
    std::swap(hole2_, other->hole2_);
    std::swap(hole3_, other->hole3_);
    std::swap(hole4_, other->hole4_);
    equip_holes_.Swap(&other->equip_holes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_packpos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_packpos_descriptor_;
  metadata.reflection = db_packpos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_query_out::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_query_out::db_backpack_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_query_out::InitAsDefaultInstance() {
}

db_backpack_query_out::db_backpack_query_out(const db_backpack_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_query_out::~db_backpack_query_out() {
  SharedDtor();
}

void db_backpack_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_query_out_descriptor_;
}

const db_backpack_query_out& db_backpack_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_query_out* db_backpack_query_out::default_instance_ = NULL;

db_backpack_query_out* db_backpack_query_out::New() const {
  return new db_backpack_query_out;
}

void db_backpack_query_out::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_packpos items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_packpos items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_packpos items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_packpos items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_query_out::MergeFrom(const db_backpack_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_query_out::CopyFrom(const db_backpack_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_query_out::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_query_out::Swap(db_backpack_query_out* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_query_out_descriptor_;
  metadata.reflection = db_backpack_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_add_in::kZoneIdFieldNumber;
const int db_backpack_add_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_add_in::db_backpack_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_add_in::InitAsDefaultInstance() {
}

db_backpack_add_in::db_backpack_add_in(const db_backpack_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_add_in::~db_backpack_add_in() {
  SharedDtor();
}

void db_backpack_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_add_in_descriptor_;
}

const db_backpack_add_in& db_backpack_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_add_in* db_backpack_add_in::default_instance_ = NULL;

db_backpack_add_in* db_backpack_add_in::New() const {
  return new db_backpack_add_in;
}

void db_backpack_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_add_in::MergeFrom(const db_backpack_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_add_in::CopyFrom(const db_backpack_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_add_in::Swap(db_backpack_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_add_in_descriptor_;
  metadata.reflection = db_backpack_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_update_in::kZoneIdFieldNumber;
const int db_backpack_update_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_update_in::db_backpack_update_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_update_in::InitAsDefaultInstance() {
}

db_backpack_update_in::db_backpack_update_in(const db_backpack_update_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_update_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_update_in::~db_backpack_update_in() {
  SharedDtor();
}

void db_backpack_update_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_update_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_update_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_update_in_descriptor_;
}

const db_backpack_update_in& db_backpack_update_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_update_in* db_backpack_update_in::default_instance_ = NULL;

db_backpack_update_in* db_backpack_update_in::New() const {
  return new db_backpack_update_in;
}

void db_backpack_update_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_update_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_update_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_update_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_update_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_update_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_update_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_update_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_update_in::MergeFrom(const db_backpack_update_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_update_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_update_in::CopyFrom(const db_backpack_update_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_update_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_update_in::Swap(db_backpack_update_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_update_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_update_in_descriptor_;
  metadata.reflection = db_backpack_update_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_del_in::kZoneIdFieldNumber;
const int db_backpack_del_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_backpack_del_in::db_backpack_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_del_in::InitAsDefaultInstance() {
}

db_backpack_del_in::db_backpack_del_in(const db_backpack_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_del_in::~db_backpack_del_in() {
  SharedDtor();
}

void db_backpack_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_del_in_descriptor_;
}

const db_backpack_del_in& db_backpack_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_del_in* db_backpack_del_in::default_instance_ = NULL;

db_backpack_del_in* db_backpack_del_in::New() const {
  return new db_backpack_del_in;
}

void db_backpack_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_packpos items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_packpos items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_packpos items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_del_in::MergeFrom(const db_backpack_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_del_in::CopyFrom(const db_backpack_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_backpack_del_in::Swap(db_backpack_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_del_in_descriptor_;
  metadata.reflection = db_backpack_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_backpack_move_in::kZoneIdFieldNumber;
const int db_backpack_move_in::kPosFromFieldNumber;
const int db_backpack_move_in::kPosToFieldNumber;
#endif  // !_MSC_VER

db_backpack_move_in::db_backpack_move_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_backpack_move_in::InitAsDefaultInstance() {
}

db_backpack_move_in::db_backpack_move_in(const db_backpack_move_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_backpack_move_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  pos_from_ = 0u;
  pos_to_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_backpack_move_in::~db_backpack_move_in() {
  SharedDtor();
}

void db_backpack_move_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_backpack_move_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_backpack_move_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_backpack_move_in_descriptor_;
}

const db_backpack_move_in& db_backpack_move_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_backpack_move_in* db_backpack_move_in::default_instance_ = NULL;

db_backpack_move_in* db_backpack_move_in::New() const {
  return new db_backpack_move_in;
}

void db_backpack_move_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    pos_from_ = 0u;
    pos_to_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_backpack_move_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_from;
        break;
      }
      
      // required uint32 pos_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_from_)));
          set_has_pos_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_to;
        break;
      }
      
      // required uint32 pos_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_to_)));
          set_has_pos_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_backpack_move_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 pos_from = 2;
  if (has_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos_from(), output);
  }
  
  // required uint32 pos_to = 3;
  if (has_pos_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_backpack_move_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 pos_from = 2;
  if (has_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos_from(), target);
  }
  
  // required uint32 pos_to = 3;
  if (has_pos_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_backpack_move_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 pos_from = 2;
    if (has_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_from());
    }
    
    // required uint32 pos_to = 3;
    if (has_pos_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_to());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_backpack_move_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_backpack_move_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_backpack_move_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_backpack_move_in::MergeFrom(const db_backpack_move_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_pos_from()) {
      set_pos_from(from.pos_from());
    }
    if (from.has_pos_to()) {
      set_pos_to(from.pos_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_backpack_move_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_backpack_move_in::CopyFrom(const db_backpack_move_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_backpack_move_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_backpack_move_in::Swap(db_backpack_move_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(pos_from_, other->pos_from_);
    std::swap(pos_to_, other->pos_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_backpack_move_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_backpack_move_in_descriptor_;
  metadata.reflection = db_backpack_move_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_info::kInstanceIdFieldNumber;
const int db_instance_info::kStarFieldNumber;
const int db_instance_info::kCanEnterFlagFieldNumber;
const int db_instance_info::kRefreshTimesFieldNumber;
const int db_instance_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_instance_info::db_instance_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_info::InitAsDefaultInstance() {
}

db_instance_info::db_instance_info(const db_instance_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_info::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  star_ = 0u;
  can_enter_flag_ = 0u;
  refresh_times_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_info::~db_instance_info() {
  SharedDtor();
}

void db_instance_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_info_descriptor_;
}

const db_instance_info& db_instance_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_info* db_instance_info::default_instance_ = NULL;

db_instance_info* db_instance_info::New() const {
  return new db_instance_info;
}

void db_instance_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    star_ = 0u;
    can_enter_flag_ = 0u;
    refresh_times_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_enter_flag;
        break;
      }
      
      // required uint32 can_enter_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_enter_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_enter_flag_)));
          set_has_can_enter_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refresh_times;
        break;
      }
      
      // required uint32 refresh_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }
  
  // required uint32 can_enter_flag = 3;
  if (has_can_enter_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->can_enter_flag(), output);
  }
  
  // required uint32 refresh_times = 4;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refresh_times(), output);
  }
  
  // required uint32 dead_tm = 5;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }
  
  // required uint32 can_enter_flag = 3;
  if (has_can_enter_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->can_enter_flag(), target);
  }
  
  // required uint32 refresh_times = 4;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refresh_times(), target);
  }
  
  // required uint32 dead_tm = 5;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
    // required uint32 can_enter_flag = 3;
    if (has_can_enter_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_enter_flag());
    }
    
    // required uint32 refresh_times = 4;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_times());
    }
    
    // required uint32 dead_tm = 5;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_info::MergeFrom(const db_instance_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_can_enter_flag()) {
      set_can_enter_flag(from.can_enter_flag());
    }
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_info::CopyFrom(const db_instance_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_instance_info::Swap(db_instance_info* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(star_, other->star_);
    std::swap(can_enter_flag_, other->can_enter_flag_);
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_info_descriptor_;
  metadata.reflection = db_instance_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_instance_query_in::db_instance_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_query_in::InitAsDefaultInstance() {
}

db_instance_query_in::db_instance_query_in(const db_instance_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_query_in::~db_instance_query_in() {
  SharedDtor();
}

void db_instance_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_query_in_descriptor_;
}

const db_instance_query_in& db_instance_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_query_in* db_instance_query_in::default_instance_ = NULL;

db_instance_query_in* db_instance_query_in::New() const {
  return new db_instance_query_in;
}

void db_instance_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_query_in::MergeFrom(const db_instance_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_query_in::CopyFrom(const db_instance_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_instance_query_in::Swap(db_instance_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_query_in_descriptor_;
  metadata.reflection = db_instance_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_query_out::kInstancesFieldNumber;
#endif  // !_MSC_VER

db_instance_query_out::db_instance_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_query_out::InitAsDefaultInstance() {
}

db_instance_query_out::db_instance_query_out(const db_instance_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_query_out::~db_instance_query_out() {
  SharedDtor();
}

void db_instance_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_query_out_descriptor_;
}

const db_instance_query_out& db_instance_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_query_out* db_instance_query_out::default_instance_ = NULL;

db_instance_query_out* db_instance_query_out::New() const {
  return new db_instance_query_out;
}

void db_instance_query_out::Clear() {
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_instance_info instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_instance_info instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_instance_info instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_instance_info instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_query_out::MergeFrom(const db_instance_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_query_out::CopyFrom(const db_instance_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_query_out::IsInitialized() const {
  
  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void db_instance_query_out::Swap(db_instance_query_out* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_query_out_descriptor_;
  metadata.reflection = db_instance_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_instance_modify_in::kZoneIdFieldNumber;
const int db_instance_modify_in::kInstancesFieldNumber;
#endif  // !_MSC_VER

db_instance_modify_in::db_instance_modify_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_instance_modify_in::InitAsDefaultInstance() {
}

db_instance_modify_in::db_instance_modify_in(const db_instance_modify_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_instance_modify_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_instance_modify_in::~db_instance_modify_in() {
  SharedDtor();
}

void db_instance_modify_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_instance_modify_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_instance_modify_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_instance_modify_in_descriptor_;
}

const db_instance_modify_in& db_instance_modify_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_instance_modify_in* db_instance_modify_in::default_instance_ = NULL;

db_instance_modify_in* db_instance_modify_in::New() const {
  return new db_instance_modify_in;
}

void db_instance_modify_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_instance_modify_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instances;
        break;
      }
      
      // repeated .rudb.db_instance_info instances = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_instance_modify_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_instance_info instances = 2;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_instance_modify_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_instance_info instances = 2;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_instance_modify_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_instance_info instances = 2;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_instance_modify_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_instance_modify_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_instance_modify_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_instance_modify_in::MergeFrom(const db_instance_modify_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_instance_modify_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_instance_modify_in::CopyFrom(const db_instance_modify_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_instance_modify_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void db_instance_modify_in::Swap(db_instance_modify_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_instance_modify_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_instance_modify_in_descriptor_;
  metadata.reflection = db_instance_modify_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_task_query_in::db_task_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_query_in::InitAsDefaultInstance() {
}

db_task_query_in::db_task_query_in(const db_task_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_query_in::~db_task_query_in() {
  SharedDtor();
}

void db_task_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_query_in_descriptor_;
}

const db_task_query_in& db_task_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_query_in* db_task_query_in::default_instance_ = NULL;

db_task_query_in* db_task_query_in::New() const {
  return new db_task_query_in;
}

void db_task_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_query_in::MergeFrom(const db_task_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_query_in::CopyFrom(const db_task_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_task_query_in::Swap(db_task_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_query_in_descriptor_;
  metadata.reflection = db_task_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_info::kTaskIdFieldNumber;
const int db_task_info::kStepIdFieldNumber;
const int db_task_info::kStepRateFieldNumber;
#endif  // !_MSC_VER

db_task_info::db_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_info::InitAsDefaultInstance() {
}

db_task_info::db_task_info(const db_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_info::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  step_id_ = 0u;
  step_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_info::~db_task_info() {
  SharedDtor();
}

void db_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_info_descriptor_;
}

const db_task_info& db_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_info* db_task_info::default_instance_ = NULL;

db_task_info* db_task_info::New() const {
  return new db_task_info;
}

void db_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    step_id_ = 0u;
    step_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_rate;
        break;
      }
      
      // required uint32 step_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_rate_)));
          set_has_step_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }
  
  // required uint32 step_rate = 3;
  if (has_step_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }
  
  // required uint32 step_rate = 3;
  if (has_step_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_rate = 3;
    if (has_step_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_info::MergeFrom(const db_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_rate()) {
      set_step_rate(from.step_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_info::CopyFrom(const db_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_task_info::Swap(db_task_info* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_rate_, other->step_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_info_descriptor_;
  metadata.reflection = db_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_query_out::kTasksFieldNumber;
#endif  // !_MSC_VER

db_task_query_out::db_task_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_query_out::InitAsDefaultInstance() {
}

db_task_query_out::db_task_query_out(const db_task_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_query_out::~db_task_query_out() {
  SharedDtor();
}

void db_task_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_query_out_descriptor_;
}

const db_task_query_out& db_task_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_query_out* db_task_query_out::default_instance_ = NULL;

db_task_query_out* db_task_query_out::New() const {
  return new db_task_query_out;
}

void db_task_query_out::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_task_info tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_task_info tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_task_info tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_task_info tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_query_out::MergeFrom(const db_task_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_query_out::CopyFrom(const db_task_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_query_out::IsInitialized() const {
  
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_task_query_out::Swap(db_task_query_out* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_query_out_descriptor_;
  metadata.reflection = db_task_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_task_step_in::kZoneIdFieldNumber;
const int db_task_step_in::kTaskIdFieldNumber;
const int db_task_step_in::kStepIdFieldNumber;
const int db_task_step_in::kStepRateFieldNumber;
#endif  // !_MSC_VER

db_task_step_in::db_task_step_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_task_step_in::InitAsDefaultInstance() {
}

db_task_step_in::db_task_step_in(const db_task_step_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_task_step_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  task_id_ = 0u;
  step_id_ = 0u;
  step_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_task_step_in::~db_task_step_in() {
  SharedDtor();
}

void db_task_step_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_task_step_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_task_step_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_task_step_in_descriptor_;
}

const db_task_step_in& db_task_step_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_task_step_in* db_task_step_in::default_instance_ = NULL;

db_task_step_in* db_task_step_in::New() const {
  return new db_task_step_in;
}

void db_task_step_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    task_id_ = 0u;
    step_id_ = 0u;
    step_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_task_step_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }
      
      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_step_rate;
        break;
      }
      
      // required uint32 step_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_rate_)));
          set_has_step_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_task_step_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }
  
  // required uint32 step_id = 3;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_id(), output);
  }
  
  // required uint32 step_rate = 4;
  if (has_step_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_task_step_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }
  
  // required uint32 step_id = 3;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_id(), target);
  }
  
  // required uint32 step_rate = 4;
  if (has_step_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_task_step_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required uint32 step_id = 3;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_rate = 4;
    if (has_step_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_task_step_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_task_step_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_task_step_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_task_step_in::MergeFrom(const db_task_step_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_rate()) {
      set_step_rate(from.step_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_task_step_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_step_in::CopyFrom(const db_task_step_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_step_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_task_step_in::Swap(db_task_step_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_rate_, other->step_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_task_step_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_task_step_in_descriptor_;
  metadata.reflection = db_task_step_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_daily_task_info::kDailyTaskIdFieldNumber;
const int db_daily_task_info::kDailyTaskStatusFieldNumber;
const int db_daily_task_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_daily_task_info::db_daily_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_daily_task_info::InitAsDefaultInstance() {
}

db_daily_task_info::db_daily_task_info(const db_daily_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_daily_task_info::SharedCtor() {
  _cached_size_ = 0;
  daily_task_id_ = 0u;
  daily_task_status_ = 0;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_daily_task_info::~db_daily_task_info() {
  SharedDtor();
}

void db_daily_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_daily_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_daily_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_daily_task_info_descriptor_;
}

const db_daily_task_info& db_daily_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_daily_task_info* db_daily_task_info::default_instance_ = NULL;

db_daily_task_info* db_daily_task_info::New() const {
  return new db_daily_task_info;
}

void db_daily_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daily_task_id_ = 0u;
    daily_task_status_ = 0;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_daily_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 daily_task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_task_id_)));
          set_has_daily_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daily_task_status;
        break;
      }
      
      // required int32 daily_task_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_task_status_)));
          set_has_daily_task_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_daily_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 daily_task_id = 1;
  if (has_daily_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daily_task_id(), output);
  }
  
  // required int32 daily_task_status = 2;
  if (has_daily_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daily_task_status(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_daily_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 daily_task_id = 1;
  if (has_daily_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daily_task_id(), target);
  }
  
  // required int32 daily_task_status = 2;
  if (has_daily_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daily_task_status(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_daily_task_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 daily_task_id = 1;
    if (has_daily_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_task_id());
    }
    
    // required int32 daily_task_status = 2;
    if (has_daily_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_task_status());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_daily_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_daily_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_daily_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_daily_task_info::MergeFrom(const db_daily_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily_task_id()) {
      set_daily_task_id(from.daily_task_id());
    }
    if (from.has_daily_task_status()) {
      set_daily_task_status(from.daily_task_status());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_daily_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_daily_task_info::CopyFrom(const db_daily_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_daily_task_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_daily_task_info::Swap(db_daily_task_info* other) {
  if (other != this) {
    std::swap(daily_task_id_, other->daily_task_id_);
    std::swap(daily_task_status_, other->daily_task_status_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_daily_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_daily_task_info_descriptor_;
  metadata.reflection = db_daily_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_daily_task_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_daily_task_in::db_query_daily_task_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_daily_task_in::InitAsDefaultInstance() {
}

db_query_daily_task_in::db_query_daily_task_in(const db_query_daily_task_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_daily_task_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_daily_task_in::~db_query_daily_task_in() {
  SharedDtor();
}

void db_query_daily_task_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_daily_task_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_daily_task_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_daily_task_in_descriptor_;
}

const db_query_daily_task_in& db_query_daily_task_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_daily_task_in* db_query_daily_task_in::default_instance_ = NULL;

db_query_daily_task_in* db_query_daily_task_in::New() const {
  return new db_query_daily_task_in;
}

void db_query_daily_task_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_daily_task_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_daily_task_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_daily_task_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_daily_task_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_daily_task_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_daily_task_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_daily_task_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_daily_task_in::MergeFrom(const db_query_daily_task_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_daily_task_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_daily_task_in::CopyFrom(const db_query_daily_task_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_daily_task_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_daily_task_in::Swap(db_query_daily_task_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_daily_task_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_daily_task_in_descriptor_;
  metadata.reflection = db_query_daily_task_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_daily_task_out::kDailyTasksFieldNumber;
#endif  // !_MSC_VER

db_query_daily_task_out::db_query_daily_task_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_daily_task_out::InitAsDefaultInstance() {
}

db_query_daily_task_out::db_query_daily_task_out(const db_query_daily_task_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_daily_task_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_daily_task_out::~db_query_daily_task_out() {
  SharedDtor();
}

void db_query_daily_task_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_daily_task_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_daily_task_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_daily_task_out_descriptor_;
}

const db_query_daily_task_out& db_query_daily_task_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_daily_task_out* db_query_daily_task_out::default_instance_ = NULL;

db_query_daily_task_out* db_query_daily_task_out::New() const {
  return new db_query_daily_task_out;
}

void db_query_daily_task_out::Clear() {
  daily_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_daily_task_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_daily_task_info daily_tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_daily_task_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_daily_task_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_daily_task_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  total_size += 1 * this->daily_tasks_size();
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_daily_task_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_daily_task_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_daily_task_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_daily_task_out::MergeFrom(const db_query_daily_task_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_tasks_.MergeFrom(from.daily_tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_daily_task_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_daily_task_out::CopyFrom(const db_query_daily_task_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_daily_task_out::IsInitialized() const {
  
  for (int i = 0; i < daily_tasks_size(); i++) {
    if (!this->daily_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_daily_task_out::Swap(db_query_daily_task_out* other) {
  if (other != this) {
    daily_tasks_.Swap(&other->daily_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_daily_task_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_daily_task_out_descriptor_;
  metadata.reflection = db_query_daily_task_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_replace_daily_task_in::kZoneIdFieldNumber;
const int db_replace_daily_task_in::kDailyTasksFieldNumber;
#endif  // !_MSC_VER

db_replace_daily_task_in::db_replace_daily_task_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_replace_daily_task_in::InitAsDefaultInstance() {
}

db_replace_daily_task_in::db_replace_daily_task_in(const db_replace_daily_task_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_replace_daily_task_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_replace_daily_task_in::~db_replace_daily_task_in() {
  SharedDtor();
}

void db_replace_daily_task_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_replace_daily_task_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_replace_daily_task_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_replace_daily_task_in_descriptor_;
}

const db_replace_daily_task_in& db_replace_daily_task_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_replace_daily_task_in* db_replace_daily_task_in::default_instance_ = NULL;

db_replace_daily_task_in* db_replace_daily_task_in::New() const {
  return new db_replace_daily_task_in;
}

void db_replace_daily_task_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  daily_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_replace_daily_task_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_tasks;
        break;
      }
      
      // repeated .rudb.db_daily_task_info daily_tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_replace_daily_task_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_replace_daily_task_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily_tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_replace_daily_task_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  total_size += 1 * this->daily_tasks_size();
  for (int i = 0; i < this->daily_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_replace_daily_task_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_replace_daily_task_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_replace_daily_task_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_replace_daily_task_in::MergeFrom(const db_replace_daily_task_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_tasks_.MergeFrom(from.daily_tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_replace_daily_task_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_replace_daily_task_in::CopyFrom(const db_replace_daily_task_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_replace_daily_task_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < daily_tasks_size(); i++) {
    if (!this->daily_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void db_replace_daily_task_in::Swap(db_replace_daily_task_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    daily_tasks_.Swap(&other->daily_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_replace_daily_task_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_replace_daily_task_in_descriptor_;
  metadata.reflection = db_replace_daily_task_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_daily_task_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_daily_task_in::db_del_daily_task_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_daily_task_in::InitAsDefaultInstance() {
}

db_del_daily_task_in::db_del_daily_task_in(const db_del_daily_task_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_daily_task_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_daily_task_in::~db_del_daily_task_in() {
  SharedDtor();
}

void db_del_daily_task_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_daily_task_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_daily_task_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_daily_task_in_descriptor_;
}

const db_del_daily_task_in& db_del_daily_task_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_daily_task_in* db_del_daily_task_in::default_instance_ = NULL;

db_del_daily_task_in* db_del_daily_task_in::New() const {
  return new db_del_daily_task_in;
}

void db_del_daily_task_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_daily_task_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_daily_task_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_daily_task_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_daily_task_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_daily_task_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_daily_task_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_daily_task_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_daily_task_in::MergeFrom(const db_del_daily_task_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_daily_task_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_daily_task_in::CopyFrom(const db_del_daily_task_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_daily_task_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_del_daily_task_in::Swap(db_del_daily_task_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_daily_task_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_daily_task_in_descriptor_;
  metadata.reflection = db_del_daily_task_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_attribute_query_in::db_attribute_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_query_in::InitAsDefaultInstance() {
}

db_attribute_query_in::db_attribute_query_in(const db_attribute_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_query_in::~db_attribute_query_in() {
  SharedDtor();
}

void db_attribute_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_query_in_descriptor_;
}

const db_attribute_query_in& db_attribute_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_query_in* db_attribute_query_in::default_instance_ = NULL;

db_attribute_query_in* db_attribute_query_in::New() const {
  return new db_attribute_query_in;
}

void db_attribute_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_query_in::MergeFrom(const db_attribute_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_query_in::CopyFrom(const db_attribute_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_attribute_query_in::Swap(db_attribute_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_query_in_descriptor_;
  metadata.reflection = db_attribute_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_info::kAttributeIdFieldNumber;
const int db_attribute_info::kAttributeValueFieldNumber;
const int db_attribute_info::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_attribute_info::db_attribute_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_info::InitAsDefaultInstance() {
}

db_attribute_info::db_attribute_info(const db_attribute_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_info::SharedCtor() {
  _cached_size_ = 0;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_info::~db_attribute_info() {
  SharedDtor();
}

void db_attribute_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_info_descriptor_;
}

const db_attribute_info& db_attribute_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_info* db_attribute_info::default_instance_ = NULL;

db_attribute_info* db_attribute_info::New() const {
  return new db_attribute_info;
}

void db_attribute_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_id = 1;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 2;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_id = 1;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 2;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 3;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_id = 1;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 2;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 3;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_info::MergeFrom(const db_attribute_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_info::CopyFrom(const db_attribute_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_attribute_info::Swap(db_attribute_info* other) {
  if (other != this) {
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_info_descriptor_;
  metadata.reflection = db_attribute_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_query_out::kAttributesFieldNumber;
#endif  // !_MSC_VER

db_attribute_query_out::db_attribute_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_query_out::InitAsDefaultInstance() {
}

db_attribute_query_out::db_attribute_query_out(const db_attribute_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_query_out::~db_attribute_query_out() {
  SharedDtor();
}

void db_attribute_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_query_out_descriptor_;
}

const db_attribute_query_out& db_attribute_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_query_out* db_attribute_query_out::default_instance_ = NULL;

db_attribute_query_out* db_attribute_query_out::New() const {
  return new db_attribute_query_out;
}

void db_attribute_query_out::Clear() {
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_attribute_info attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_attribute_info attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_attribute_info attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_attribute_info attributes = 1;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_query_out::MergeFrom(const db_attribute_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_query_out::CopyFrom(const db_attribute_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_query_out::IsInitialized() const {
  
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}

void db_attribute_query_out::Swap(db_attribute_query_out* other) {
  if (other != this) {
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_query_out_descriptor_;
  metadata.reflection = db_attribute_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attribute_set_in::kZoneIdFieldNumber;
const int db_attribute_set_in::kAttributeIdFieldNumber;
const int db_attribute_set_in::kAttributeValueFieldNumber;
const int db_attribute_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_attribute_set_in::db_attribute_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attribute_set_in::InitAsDefaultInstance() {
}

db_attribute_set_in::db_attribute_set_in(const db_attribute_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attribute_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attribute_set_in::~db_attribute_set_in() {
  SharedDtor();
}

void db_attribute_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attribute_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attribute_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attribute_set_in_descriptor_;
}

const db_attribute_set_in& db_attribute_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attribute_set_in* db_attribute_set_in::default_instance_ = NULL;

db_attribute_set_in* db_attribute_set_in::New() const {
  return new db_attribute_set_in;
}

void db_attribute_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attribute_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attribute_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attribute_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attribute_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 3;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attribute_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attribute_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attribute_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attribute_set_in::MergeFrom(const db_attribute_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attribute_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attribute_set_in::CopyFrom(const db_attribute_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attribute_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_attribute_set_in::Swap(db_attribute_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attribute_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attribute_set_in_descriptor_;
  metadata.reflection = db_attribute_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shared_attribute_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_shared_attribute_query_in::db_shared_attribute_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shared_attribute_query_in::InitAsDefaultInstance() {
}

db_shared_attribute_query_in::db_shared_attribute_query_in(const db_shared_attribute_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shared_attribute_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shared_attribute_query_in::~db_shared_attribute_query_in() {
  SharedDtor();
}

void db_shared_attribute_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shared_attribute_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shared_attribute_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shared_attribute_query_in_descriptor_;
}

const db_shared_attribute_query_in& db_shared_attribute_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shared_attribute_query_in* db_shared_attribute_query_in::default_instance_ = NULL;

db_shared_attribute_query_in* db_shared_attribute_query_in::New() const {
  return new db_shared_attribute_query_in;
}

void db_shared_attribute_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shared_attribute_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shared_attribute_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shared_attribute_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shared_attribute_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shared_attribute_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shared_attribute_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shared_attribute_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shared_attribute_query_in::MergeFrom(const db_shared_attribute_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shared_attribute_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shared_attribute_query_in::CopyFrom(const db_shared_attribute_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shared_attribute_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_shared_attribute_query_in::Swap(db_shared_attribute_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shared_attribute_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shared_attribute_query_in_descriptor_;
  metadata.reflection = db_shared_attribute_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shared_attribute_query_out::kSharedAttributesFieldNumber;
#endif  // !_MSC_VER

db_shared_attribute_query_out::db_shared_attribute_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shared_attribute_query_out::InitAsDefaultInstance() {
}

db_shared_attribute_query_out::db_shared_attribute_query_out(const db_shared_attribute_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shared_attribute_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shared_attribute_query_out::~db_shared_attribute_query_out() {
  SharedDtor();
}

void db_shared_attribute_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shared_attribute_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shared_attribute_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shared_attribute_query_out_descriptor_;
}

const db_shared_attribute_query_out& db_shared_attribute_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shared_attribute_query_out* db_shared_attribute_query_out::default_instance_ = NULL;

db_shared_attribute_query_out* db_shared_attribute_query_out::New() const {
  return new db_shared_attribute_query_out;
}

void db_shared_attribute_query_out::Clear() {
  shared_attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shared_attribute_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_attribute_info shared_attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shared_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shared_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shared_attribute_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  for (int i = 0; i < this->shared_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shared_attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shared_attribute_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  for (int i = 0; i < this->shared_attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shared_attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shared_attribute_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  total_size += 1 * this->shared_attributes_size();
  for (int i = 0; i < this->shared_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shared_attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shared_attribute_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shared_attribute_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shared_attribute_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shared_attribute_query_out::MergeFrom(const db_shared_attribute_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  shared_attributes_.MergeFrom(from.shared_attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shared_attribute_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shared_attribute_query_out::CopyFrom(const db_shared_attribute_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shared_attribute_query_out::IsInitialized() const {
  
  for (int i = 0; i < shared_attributes_size(); i++) {
    if (!this->shared_attributes(i).IsInitialized()) return false;
  }
  return true;
}

void db_shared_attribute_query_out::Swap(db_shared_attribute_query_out* other) {
  if (other != this) {
    shared_attributes_.Swap(&other->shared_attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shared_attribute_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shared_attribute_query_out_descriptor_;
  metadata.reflection = db_shared_attribute_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_shared_attribute_set_in::kZoneIdFieldNumber;
const int db_shared_attribute_set_in::kAttributeIdFieldNumber;
const int db_shared_attribute_set_in::kAttributeValueFieldNumber;
const int db_shared_attribute_set_in::kDeadTmFieldNumber;
#endif  // !_MSC_VER

db_shared_attribute_set_in::db_shared_attribute_set_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_shared_attribute_set_in::InitAsDefaultInstance() {
}

db_shared_attribute_set_in::db_shared_attribute_set_in(const db_shared_attribute_set_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_shared_attribute_set_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  attribute_id_ = 0u;
  attribute_value_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_shared_attribute_set_in::~db_shared_attribute_set_in() {
  SharedDtor();
}

void db_shared_attribute_set_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_shared_attribute_set_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_shared_attribute_set_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_shared_attribute_set_in_descriptor_;
}

const db_shared_attribute_set_in& db_shared_attribute_set_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_shared_attribute_set_in* db_shared_attribute_set_in::default_instance_ = NULL;

db_shared_attribute_set_in* db_shared_attribute_set_in::New() const {
  return new db_shared_attribute_set_in;
}

void db_shared_attribute_set_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    attribute_id_ = 0u;
    attribute_value_ = 0u;
    dead_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_shared_attribute_set_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_id;
        break;
      }
      
      // required uint32 attribute_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attribute_value;
        break;
      }
      
      // required uint32 attribute_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_value_)));
          set_has_attribute_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_shared_attribute_set_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attribute_value(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_shared_attribute_set_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }
  
  // required uint32 attribute_value = 3;
  if (has_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attribute_value(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_shared_attribute_set_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }
    
    // required uint32 attribute_value = 3;
    if (has_attribute_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_value());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_shared_attribute_set_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_shared_attribute_set_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_shared_attribute_set_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_shared_attribute_set_in::MergeFrom(const db_shared_attribute_set_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_attribute_value()) {
      set_attribute_value(from.attribute_value());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_shared_attribute_set_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_shared_attribute_set_in::CopyFrom(const db_shared_attribute_set_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_shared_attribute_set_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_shared_attribute_set_in::Swap(db_shared_attribute_set_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(attribute_value_, other->attribute_value_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_shared_attribute_set_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_shared_attribute_set_in_descriptor_;
  metadata.reflection = db_shared_attribute_set_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_skill_query_in::db_skill_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_in::InitAsDefaultInstance() {
}

db_skill_query_in::db_skill_query_in(const db_skill_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_in::~db_skill_query_in() {
  SharedDtor();
}

void db_skill_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_in_descriptor_;
}

const db_skill_query_in& db_skill_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_in* db_skill_query_in::default_instance_ = NULL;

db_skill_query_in* db_skill_query_in::New() const {
  return new db_skill_query_in;
}

void db_skill_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_in::MergeFrom(const db_skill_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_in::CopyFrom(const db_skill_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_skill_query_in::Swap(db_skill_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_in_descriptor_;
  metadata.reflection = db_skill_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_query_out_skill_info::kSkillIdFieldNumber;
const int db_skill_query_out_skill_info::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

db_skill_query_out_skill_info::db_skill_query_out_skill_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_out_skill_info::InitAsDefaultInstance() {
}

db_skill_query_out_skill_info::db_skill_query_out_skill_info(const db_skill_query_out_skill_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_out_skill_info::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_out_skill_info::~db_skill_query_out_skill_info() {
  SharedDtor();
}

void db_skill_query_out_skill_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_out_skill_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_out_skill_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_out_skill_info_descriptor_;
}

const db_skill_query_out_skill_info& db_skill_query_out_skill_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_out_skill_info* db_skill_query_out_skill_info::default_instance_ = NULL;

db_skill_query_out_skill_info* db_skill_query_out_skill_info::New() const {
  return new db_skill_query_out_skill_info;
}

void db_skill_query_out_skill_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_out_skill_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }
      
      // required uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_out_skill_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }
  
  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_out_skill_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }
  
  // required uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_out_skill_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // required uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_out_skill_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_out_skill_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_out_skill_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_out_skill_info::MergeFrom(const db_skill_query_out_skill_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_out_skill_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_out_skill_info::CopyFrom(const db_skill_query_out_skill_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_out_skill_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_skill_query_out_skill_info::Swap(db_skill_query_out_skill_info* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_out_skill_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_out_skill_info_descriptor_;
  metadata.reflection = db_skill_query_out_skill_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_skill_query_out::kSkillsFieldNumber;
#endif  // !_MSC_VER

db_skill_query_out::db_skill_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_query_out::InitAsDefaultInstance() {
}

db_skill_query_out::db_skill_query_out(const db_skill_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_query_out::~db_skill_query_out() {
  SharedDtor();
}

void db_skill_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_query_out_descriptor_;
}

const db_skill_query_out& db_skill_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_query_out* db_skill_query_out::default_instance_ = NULL;

db_skill_query_out* db_skill_query_out::New() const {
  return new db_skill_query_out;
}

void db_skill_query_out::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_skill_query_out.skill_info skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_query_out::MergeFrom(const db_skill_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_query_out::CopyFrom(const db_skill_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_query_out::IsInitialized() const {
  
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void db_skill_query_out::Swap(db_skill_query_out* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_query_out_descriptor_;
  metadata.reflection = db_skill_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_skill_add_in::kZoneIdFieldNumber;
const int db_skill_add_in::kSkillIdFieldNumber;
const int db_skill_add_in::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

db_skill_add_in::db_skill_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_skill_add_in::InitAsDefaultInstance() {
}

db_skill_add_in::db_skill_add_in(const db_skill_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_skill_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  skill_id_ = 0u;
  skill_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_skill_add_in::~db_skill_add_in() {
  SharedDtor();
}

void db_skill_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_skill_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_skill_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_skill_add_in_descriptor_;
}

const db_skill_add_in& db_skill_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_skill_add_in* db_skill_add_in::default_instance_ = NULL;

db_skill_add_in* db_skill_add_in::New() const {
  return new db_skill_add_in;
}

void db_skill_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    skill_id_ = 0u;
    skill_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_skill_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }
      
      // required uint32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_skill_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }
  
  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_skill_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }
  
  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_skill_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }
    
    // required uint32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_skill_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_skill_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_skill_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_skill_add_in::MergeFrom(const db_skill_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_skill_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_skill_add_in::CopyFrom(const db_skill_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_skill_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_skill_add_in::Swap(db_skill_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_skill_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_skill_add_in_descriptor_;
  metadata.reflection = db_skill_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_friend_query_in::db_friend_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_query_in::InitAsDefaultInstance() {
}

db_friend_query_in::db_friend_query_in(const db_friend_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_query_in::~db_friend_query_in() {
  SharedDtor();
}

void db_friend_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_query_in_descriptor_;
}

const db_friend_query_in& db_friend_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_query_in* db_friend_query_in::default_instance_ = NULL;

db_friend_query_in* db_friend_query_in::New() const {
  return new db_friend_query_in;
}

void db_friend_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_query_in::MergeFrom(const db_friend_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_query_in::CopyFrom(const db_friend_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_friend_query_in::Swap(db_friend_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_query_in_descriptor_;
  metadata.reflection = db_friend_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_id_by_name_in::kNameFieldNumber;
const int db_query_id_by_name_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_id_by_name_in::db_query_id_by_name_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_id_by_name_in::InitAsDefaultInstance() {
}

db_query_id_by_name_in::db_query_id_by_name_in(const db_query_id_by_name_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_id_by_name_in::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_id_by_name_in::~db_query_id_by_name_in() {
  SharedDtor();
}

void db_query_id_by_name_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_id_by_name_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_id_by_name_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_id_by_name_in_descriptor_;
}

const db_query_id_by_name_in& db_query_id_by_name_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_id_by_name_in* db_query_id_by_name_in::default_instance_ = NULL;

db_query_id_by_name_in* db_query_id_by_name_in::New() const {
  return new db_query_id_by_name_in;
}

void db_query_id_by_name_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_id_by_name_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_id_by_name_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_id_by_name_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_id_by_name_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_id_by_name_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_id_by_name_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_id_by_name_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_id_by_name_in::MergeFrom(const db_query_id_by_name_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_id_by_name_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_id_by_name_in::CopyFrom(const db_query_id_by_name_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_id_by_name_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_id_by_name_in::Swap(db_query_id_by_name_in* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_id_by_name_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_id_by_name_in_descriptor_;
  metadata.reflection = db_query_id_by_name_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_id_by_name_out::kUseridFieldNumber;
const int db_query_id_by_name_out::kRegTmFieldNumber;
#endif  // !_MSC_VER

db_query_id_by_name_out::db_query_id_by_name_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_id_by_name_out::InitAsDefaultInstance() {
}

db_query_id_by_name_out::db_query_id_by_name_out(const db_query_id_by_name_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_id_by_name_out::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_id_by_name_out::~db_query_id_by_name_out() {
  SharedDtor();
}

void db_query_id_by_name_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_id_by_name_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_id_by_name_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_id_by_name_out_descriptor_;
}

const db_query_id_by_name_out& db_query_id_by_name_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_id_by_name_out* db_query_id_by_name_out::default_instance_ = NULL;

db_query_id_by_name_out* db_query_id_by_name_out::New() const {
  return new db_query_id_by_name_out;
}

void db_query_id_by_name_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_id_by_name_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // optional uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_id_by_name_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // optional uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_id_by_name_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // optional uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_id_by_name_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // optional uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_id_by_name_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_id_by_name_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_id_by_name_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_id_by_name_out::MergeFrom(const db_query_id_by_name_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_id_by_name_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_id_by_name_out::CopyFrom(const db_query_id_by_name_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_id_by_name_out::IsInitialized() const {
  
  return true;
}

void db_query_id_by_name_out::Swap(db_query_id_by_name_out* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_id_by_name_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_id_by_name_out_descriptor_;
  metadata.reflection = db_query_id_by_name_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int show_info::kUseridFieldNumber;
const int show_info::kRegTmFieldNumber;
const int show_info::kNameFieldNumber;
const int show_info::kLvFieldNumber;
const int show_info::kTypeFieldNumber;
const int show_info::kPrestigeFieldNumber;
const int show_info::kPvaiRankFieldNumber;
#endif  // !_MSC_VER

show_info::show_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void show_info::InitAsDefaultInstance() {
}

show_info::show_info(const show_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void show_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  type_ = 0u;
  prestige_ = 0u;
  pvai_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

show_info::~show_info() {
  SharedDtor();
}

void show_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void show_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* show_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return show_info_descriptor_;
}

const show_info& show_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

show_info* show_info::default_instance_ = NULL;

show_info* show_info::New() const {
  return new show_info;
}

void show_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    type_ = 0u;
    prestige_ = 0u;
    pvai_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool show_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }
      
      // required uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prestige;
        break;
      }
      
      // required uint32 prestige = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pvai_rank;
        break;
      }
      
      // required uint32 pvai_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvai_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvai_rank_)));
          set_has_pvai_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void show_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }
  
  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // required uint32 prestige = 6;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prestige(), output);
  }
  
  // required uint32 pvai_rank = 7;
  if (has_pvai_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pvai_rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* show_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }
  
  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }
  
  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // required uint32 prestige = 6;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prestige(), target);
  }
  
  // required uint32 pvai_rank = 7;
  if (has_pvai_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pvai_rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int show_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }
    
    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 prestige = 6;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }
    
    // required uint32 pvai_rank = 7;
    if (has_pvai_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvai_rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void show_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const show_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const show_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void show_info::MergeFrom(const show_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_pvai_rank()) {
      set_pvai_rank(from.pvai_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void show_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void show_info::CopyFrom(const show_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool show_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void show_info::Swap(show_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(prestige_, other->prestige_);
    std::swap(pvai_rank_, other->pvai_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata show_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = show_info_descriptor_;
  metadata.reflection = show_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_nearby_query_in::kZoneIdFieldNumber;
const int db_nearby_query_in::kInfoFieldNumber;
#endif  // !_MSC_VER

db_nearby_query_in::db_nearby_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_nearby_query_in::InitAsDefaultInstance() {
}

db_nearby_query_in::db_nearby_query_in(const db_nearby_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_nearby_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_nearby_query_in::~db_nearby_query_in() {
  SharedDtor();
}

void db_nearby_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_nearby_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_nearby_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_nearby_query_in_descriptor_;
}

const db_nearby_query_in& db_nearby_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_nearby_query_in* db_nearby_query_in::default_instance_ = NULL;

db_nearby_query_in* db_nearby_query_in::New() const {
  return new db_nearby_query_in;
}

void db_nearby_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_nearby_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .rudb.db_player_info_t info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_nearby_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_nearby_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_nearby_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_nearby_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_nearby_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_nearby_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_nearby_query_in::MergeFrom(const db_nearby_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_nearby_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_nearby_query_in::CopyFrom(const db_nearby_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_nearby_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_nearby_query_in::Swap(db_nearby_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_nearby_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_nearby_query_in_descriptor_;
  metadata.reflection = db_nearby_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_nearby_query_out::kInfoFieldNumber;
#endif  // !_MSC_VER

db_nearby_query_out::db_nearby_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_nearby_query_out::InitAsDefaultInstance() {
}

db_nearby_query_out::db_nearby_query_out(const db_nearby_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_nearby_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_nearby_query_out::~db_nearby_query_out() {
  SharedDtor();
}

void db_nearby_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_nearby_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_nearby_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_nearby_query_out_descriptor_;
}

const db_nearby_query_out& db_nearby_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_nearby_query_out* db_nearby_query_out::default_instance_ = NULL;

db_nearby_query_out* db_nearby_query_out::New() const {
  return new db_nearby_query_out;
}

void db_nearby_query_out::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_nearby_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.show_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_nearby_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_nearby_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_nearby_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.show_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_nearby_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_nearby_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_nearby_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_nearby_query_out::MergeFrom(const db_nearby_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_nearby_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_nearby_query_out::CopyFrom(const db_nearby_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_nearby_query_out::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_nearby_query_out::Swap(db_nearby_query_out* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_nearby_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_nearby_query_out_descriptor_;
  metadata.reflection = db_nearby_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_partner_in::kZoneIdFieldNumber;
const int db_list_partner_in::kPartnerFieldNumber;
#endif  // !_MSC_VER

db_list_partner_in::db_list_partner_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_partner_in::InitAsDefaultInstance() {
}

db_list_partner_in::db_list_partner_in(const db_list_partner_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_partner_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_partner_in::~db_list_partner_in() {
  SharedDtor();
}

void db_list_partner_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_partner_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_partner_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_partner_in_descriptor_;
}

const db_list_partner_in& db_list_partner_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_partner_in* db_list_partner_in::default_instance_ = NULL;

db_list_partner_in* db_list_partner_in::New() const {
  return new db_list_partner_in;
}

void db_list_partner_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  partner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_partner_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partner;
        break;
      }
      
      // repeated .rudb.db_player_info_t partner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partner;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_partner_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t partner = 2;
  for (int i = 0; i < this->partner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->partner(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_partner_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t partner = 2;
  for (int i = 0; i < this->partner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->partner(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_partner_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t partner = 2;
  total_size += 1 * this->partner_size();
  for (int i = 0; i < this->partner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_partner_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_partner_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_partner_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_partner_in::MergeFrom(const db_list_partner_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  partner_.MergeFrom(from.partner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_partner_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_partner_in::CopyFrom(const db_list_partner_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_partner_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < partner_size(); i++) {
    if (!this->partner(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_partner_in::Swap(db_list_partner_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    partner_.Swap(&other->partner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_partner_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_partner_in_descriptor_;
  metadata.reflection = db_list_partner_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_list_partner_out::kInfoFieldNumber;
#endif  // !_MSC_VER

db_list_partner_out::db_list_partner_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_list_partner_out::InitAsDefaultInstance() {
}

db_list_partner_out::db_list_partner_out(const db_list_partner_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_list_partner_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_list_partner_out::~db_list_partner_out() {
  SharedDtor();
}

void db_list_partner_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_list_partner_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_list_partner_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_list_partner_out_descriptor_;
}

const db_list_partner_out& db_list_partner_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_list_partner_out* db_list_partner_out::default_instance_ = NULL;

db_list_partner_out* db_list_partner_out::New() const {
  return new db_list_partner_out;
}

void db_list_partner_out::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_list_partner_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.show_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_list_partner_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_list_partner_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.show_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_list_partner_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.show_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_list_partner_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_list_partner_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_list_partner_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_list_partner_out::MergeFrom(const db_list_partner_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_list_partner_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_list_partner_out::CopyFrom(const db_list_partner_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_list_partner_out::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_list_partner_out::Swap(db_list_partner_out* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_list_partner_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_list_partner_out_descriptor_;
  metadata.reflection = db_list_partner_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_query_out::kFriendsFieldNumber;
#endif  // !_MSC_VER

db_friend_query_out::db_friend_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_query_out::InitAsDefaultInstance() {
}

db_friend_query_out::db_friend_query_out(const db_friend_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_query_out::~db_friend_query_out() {
  SharedDtor();
}

void db_friend_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_query_out_descriptor_;
}

const db_friend_query_out& db_friend_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_query_out* db_friend_query_out::default_instance_ = NULL;

db_friend_query_out* db_friend_query_out::New() const {
  return new db_friend_query_out;
}

void db_friend_query_out::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_query_out::MergeFrom(const db_friend_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_query_out::CopyFrom(const db_friend_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_query_out::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void db_friend_query_out::Swap(db_friend_query_out* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_query_out_descriptor_;
  metadata.reflection = db_friend_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_add_in::kFuseridFieldNumber;
const int db_friend_add_in::kFregTmFieldNumber;
const int db_friend_add_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_friend_add_in::db_friend_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_add_in::InitAsDefaultInstance() {
}

db_friend_add_in::db_friend_add_in(const db_friend_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_add_in::SharedCtor() {
  _cached_size_ = 0;
  fuserid_ = GOOGLE_ULONGLONG(0);
  freg_tm_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_add_in::~db_friend_add_in() {
  SharedDtor();
}

void db_friend_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_add_in_descriptor_;
}

const db_friend_add_in& db_friend_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_add_in* db_friend_add_in::default_instance_ = NULL;

db_friend_add_in* db_friend_add_in::New() const {
  return new db_friend_add_in;
}

void db_friend_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fuserid_ = GOOGLE_ULONGLONG(0);
    freg_tm_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fuserid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuserid_)));
          set_has_fuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freg_tm;
        break;
      }
      
      // required uint32 freg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freg_tm_)));
          set_has_freg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 fuserid = 1;
  if (has_fuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuserid(), output);
  }
  
  // required uint32 freg_tm = 2;
  if (has_freg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 fuserid = 1;
  if (has_fuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuserid(), target);
  }
  
  // required uint32 freg_tm = 2;
  if (has_freg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 fuserid = 1;
    if (has_fuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuserid());
    }
    
    // required uint32 freg_tm = 2;
    if (has_freg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_add_in::MergeFrom(const db_friend_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuserid()) {
      set_fuserid(from.fuserid());
    }
    if (from.has_freg_tm()) {
      set_freg_tm(from.freg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_add_in::CopyFrom(const db_friend_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_friend_add_in::Swap(db_friend_add_in* other) {
  if (other != this) {
    std::swap(fuserid_, other->fuserid_);
    std::swap(freg_tm_, other->freg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_add_in_descriptor_;
  metadata.reflection = db_friend_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_friend_del_in::kZoneIdFieldNumber;
const int db_friend_del_in::kFuseridFieldNumber;
const int db_friend_del_in::kFregTmFieldNumber;
#endif  // !_MSC_VER

db_friend_del_in::db_friend_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_friend_del_in::InitAsDefaultInstance() {
}

db_friend_del_in::db_friend_del_in(const db_friend_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_friend_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  fuserid_ = GOOGLE_ULONGLONG(0);
  freg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_friend_del_in::~db_friend_del_in() {
  SharedDtor();
}

void db_friend_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_friend_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_friend_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_friend_del_in_descriptor_;
}

const db_friend_del_in& db_friend_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_friend_del_in* db_friend_del_in::default_instance_ = NULL;

db_friend_del_in* db_friend_del_in::New() const {
  return new db_friend_del_in;
}

void db_friend_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    fuserid_ = GOOGLE_ULONGLONG(0);
    freg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_friend_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fuserid;
        break;
      }
      
      // required uint64 fuserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuserid_)));
          set_has_fuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freg_tm;
        break;
      }
      
      // required uint32 freg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freg_tm_)));
          set_has_freg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_friend_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 fuserid = 2;
  if (has_fuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuserid(), output);
  }
  
  // required uint32 freg_tm = 3;
  if (has_freg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_friend_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 fuserid = 2;
  if (has_fuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuserid(), target);
  }
  
  // required uint32 freg_tm = 3;
  if (has_freg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_friend_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 fuserid = 2;
    if (has_fuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuserid());
    }
    
    // required uint32 freg_tm = 3;
    if (has_freg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_friend_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_friend_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_friend_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_friend_del_in::MergeFrom(const db_friend_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_fuserid()) {
      set_fuserid(from.fuserid());
    }
    if (from.has_freg_tm()) {
      set_freg_tm(from.freg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_friend_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friend_del_in::CopyFrom(const db_friend_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friend_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_friend_del_in::Swap(db_friend_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(fuserid_, other->fuserid_);
    std::swap(freg_tm_, other->freg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_friend_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_friend_del_in_descriptor_;
  metadata.reflection = db_friend_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_query_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_dnd_query_in::db_dnd_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_query_in::InitAsDefaultInstance() {
}

db_dnd_query_in::db_dnd_query_in(const db_dnd_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_query_in::~db_dnd_query_in() {
  SharedDtor();
}

void db_dnd_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_query_in_descriptor_;
}

const db_dnd_query_in& db_dnd_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_query_in* db_dnd_query_in::default_instance_ = NULL;

db_dnd_query_in* db_dnd_query_in::New() const {
  return new db_dnd_query_in;
}

void db_dnd_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_query_in::MergeFrom(const db_dnd_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_query_in::CopyFrom(const db_dnd_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_dnd_query_in::Swap(db_dnd_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_query_in_descriptor_;
  metadata.reflection = db_dnd_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_query_out::kDndsFieldNumber;
#endif  // !_MSC_VER

db_dnd_query_out::db_dnd_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_query_out::InitAsDefaultInstance() {
}

db_dnd_query_out::db_dnd_query_out(const db_dnd_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_query_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_query_out::~db_dnd_query_out() {
  SharedDtor();
}

void db_dnd_query_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_query_out_descriptor_;
}

const db_dnd_query_out& db_dnd_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_query_out* db_dnd_query_out::default_instance_ = NULL;

db_dnd_query_out* db_dnd_query_out::New() const {
  return new db_dnd_query_out;
}

void db_dnd_query_out::Clear() {
  dnds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_player_info_t dnds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dnds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dnds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dnds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_player_info_t dnds = 1;
  for (int i = 0; i < this->dnds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dnds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_player_info_t dnds = 1;
  for (int i = 0; i < this->dnds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dnds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_query_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_player_info_t dnds = 1;
  total_size += 1 * this->dnds_size();
  for (int i = 0; i < this->dnds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dnds(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_query_out::MergeFrom(const db_dnd_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  dnds_.MergeFrom(from.dnds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_query_out::CopyFrom(const db_dnd_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_query_out::IsInitialized() const {
  
  for (int i = 0; i < dnds_size(); i++) {
    if (!this->dnds(i).IsInitialized()) return false;
  }
  return true;
}

void db_dnd_query_out::Swap(db_dnd_query_out* other) {
  if (other != this) {
    dnds_.Swap(&other->dnds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_query_out_descriptor_;
  metadata.reflection = db_dnd_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_add_in::kZoneIdFieldNumber;
const int db_dnd_add_in::kDuseridFieldNumber;
const int db_dnd_add_in::kDregTmFieldNumber;
#endif  // !_MSC_VER

db_dnd_add_in::db_dnd_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_add_in::InitAsDefaultInstance() {
}

db_dnd_add_in::db_dnd_add_in(const db_dnd_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  duserid_ = GOOGLE_ULONGLONG(0);
  dreg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_add_in::~db_dnd_add_in() {
  SharedDtor();
}

void db_dnd_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_add_in_descriptor_;
}

const db_dnd_add_in& db_dnd_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_add_in* db_dnd_add_in::default_instance_ = NULL;

db_dnd_add_in* db_dnd_add_in::New() const {
  return new db_dnd_add_in;
}

void db_dnd_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    duserid_ = GOOGLE_ULONGLONG(0);
    dreg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duserid;
        break;
      }
      
      // required uint64 duserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duserid_)));
          set_has_duserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dreg_tm;
        break;
      }
      
      // required uint32 dreg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dreg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dreg_tm_)));
          set_has_dreg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duserid(), output);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dreg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duserid(), target);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dreg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 duserid = 2;
    if (has_duserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duserid());
    }
    
    // required uint32 dreg_tm = 3;
    if (has_dreg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dreg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_add_in::MergeFrom(const db_dnd_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_duserid()) {
      set_duserid(from.duserid());
    }
    if (from.has_dreg_tm()) {
      set_dreg_tm(from.dreg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_add_in::CopyFrom(const db_dnd_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_dnd_add_in::Swap(db_dnd_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(duserid_, other->duserid_);
    std::swap(dreg_tm_, other->dreg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_add_in_descriptor_;
  metadata.reflection = db_dnd_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_dnd_del_in::kZoneIdFieldNumber;
const int db_dnd_del_in::kDuseridFieldNumber;
const int db_dnd_del_in::kDregTmFieldNumber;
#endif  // !_MSC_VER

db_dnd_del_in::db_dnd_del_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_dnd_del_in::InitAsDefaultInstance() {
}

db_dnd_del_in::db_dnd_del_in(const db_dnd_del_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_dnd_del_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  duserid_ = GOOGLE_ULONGLONG(0);
  dreg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_dnd_del_in::~db_dnd_del_in() {
  SharedDtor();
}

void db_dnd_del_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_dnd_del_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_dnd_del_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_dnd_del_in_descriptor_;
}

const db_dnd_del_in& db_dnd_del_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_dnd_del_in* db_dnd_del_in::default_instance_ = NULL;

db_dnd_del_in* db_dnd_del_in::New() const {
  return new db_dnd_del_in;
}

void db_dnd_del_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    duserid_ = GOOGLE_ULONGLONG(0);
    dreg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_dnd_del_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duserid;
        break;
      }
      
      // required uint64 duserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duserid_)));
          set_has_duserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dreg_tm;
        break;
      }
      
      // required uint32 dreg_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dreg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dreg_tm_)));
          set_has_dreg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_dnd_del_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duserid(), output);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dreg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_dnd_del_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 duserid = 2;
  if (has_duserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duserid(), target);
  }
  
  // required uint32 dreg_tm = 3;
  if (has_dreg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dreg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_dnd_del_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 duserid = 2;
    if (has_duserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duserid());
    }
    
    // required uint32 dreg_tm = 3;
    if (has_dreg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dreg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_dnd_del_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_dnd_del_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_dnd_del_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_dnd_del_in::MergeFrom(const db_dnd_del_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_duserid()) {
      set_duserid(from.duserid());
    }
    if (from.has_dreg_tm()) {
      set_dreg_tm(from.dreg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_dnd_del_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_dnd_del_in::CopyFrom(const db_dnd_del_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_dnd_del_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_dnd_del_in::Swap(db_dnd_del_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(duserid_, other->duserid_);
    std::swap(dreg_tm_, other->dreg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_dnd_del_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_dnd_del_in_descriptor_;
  metadata.reflection = db_dnd_del_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_info::kUseridFieldNumber;
const int db_ai_rank_info::kRegTimeFieldNumber;
const int db_ai_rank_info::kRankFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_info::db_ai_rank_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_info::InitAsDefaultInstance() {
}

db_ai_rank_info::db_ai_rank_info(const db_ai_rank_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_info::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_time_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_info::~db_ai_rank_info() {
  SharedDtor();
}

void db_ai_rank_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_info_descriptor_;
}

const db_ai_rank_info& db_ai_rank_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_info* db_ai_rank_info::default_instance_ = NULL;

db_ai_rank_info* db_ai_rank_info::New() const {
  return new db_ai_rank_info;
}

void db_ai_rank_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_time_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_info::MergeFrom(const db_ai_rank_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_info::CopyFrom(const db_ai_rank_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_info::Swap(db_ai_rank_info* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_info_descriptor_;
  metadata.reflection = db_ai_rank_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_log_one_log::kNameFieldNumber;
const int db_ai_rank_log_one_log::kDirectFieldNumber;
const int db_ai_rank_log_one_log::kWinFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log_one_log::db_ai_rank_log_one_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log_one_log::InitAsDefaultInstance() {
}

db_ai_rank_log_one_log::db_ai_rank_log_one_log(const db_ai_rank_log_one_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log_one_log::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direct_ = false;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log_one_log::~db_ai_rank_log_one_log() {
  SharedDtor();
}

void db_ai_rank_log_one_log::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_ai_rank_log_one_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log_one_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_one_log_descriptor_;
}

const db_ai_rank_log_one_log& db_ai_rank_log_one_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log_one_log* db_ai_rank_log_one_log::default_instance_ = NULL;

db_ai_rank_log_one_log* db_ai_rank_log_one_log::New() const {
  return new db_ai_rank_log_one_log;
}

void db_ai_rank_log_one_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    direct_ = false;
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log_one_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct;
        break;
      }
      
      // required bool direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }
      
      // required bool win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log_one_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // required bool direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->direct(), output);
  }
  
  // required bool win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log_one_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // required bool direct = 2;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->direct(), target);
  }
  
  // required bool win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log_one_log::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required bool direct = 2;
    if (has_direct()) {
      total_size += 1 + 1;
    }
    
    // required bool win = 3;
    if (has_win()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log_one_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log_one_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log_one_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log_one_log::MergeFrom(const db_ai_rank_log_one_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log_one_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log_one_log::CopyFrom(const db_ai_rank_log_one_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log_one_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_log_one_log::Swap(db_ai_rank_log_one_log* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(direct_, other->direct_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log_one_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_one_log_descriptor_;
  metadata.reflection = db_ai_rank_log_one_log_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_ai_rank_log::kLogsFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log::db_ai_rank_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log::InitAsDefaultInstance() {
}

db_ai_rank_log::db_ai_rank_log(const db_ai_rank_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log::~db_ai_rank_log() {
  SharedDtor();
}

void db_ai_rank_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_descriptor_;
}

const db_ai_rank_log& db_ai_rank_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log* db_ai_rank_log::default_instance_ = NULL;

db_ai_rank_log* db_ai_rank_log::New() const {
  return new db_ai_rank_log;
}

void db_ai_rank_log::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_ai_rank_log.one_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log::MergeFrom(const db_ai_rank_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log::CopyFrom(const db_ai_rank_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log::IsInitialized() const {
  
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_log::Swap(db_ai_rank_log* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_descriptor_;
  metadata.reflection = db_ai_rank_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_add_in::kZoneIdFieldNumber;
const int db_ai_rank_add_in::kAccuCoinFieldNumber;
const int db_ai_rank_add_in::kAccuReputationFieldNumber;
const int db_ai_rank_add_in::kAccuEndTimeFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_add_in::db_ai_rank_add_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_add_in::InitAsDefaultInstance() {
}

db_ai_rank_add_in::db_ai_rank_add_in(const db_ai_rank_add_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_add_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  accu_coin_ = 0u;
  accu_reputation_ = 0u;
  accu_end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_add_in::~db_ai_rank_add_in() {
  SharedDtor();
}

void db_ai_rank_add_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_add_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_add_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_add_in_descriptor_;
}

const db_ai_rank_add_in& db_ai_rank_add_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_add_in* db_ai_rank_add_in::default_instance_ = NULL;

db_ai_rank_add_in* db_ai_rank_add_in::New() const {
  return new db_ai_rank_add_in;
}

void db_ai_rank_add_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    accu_coin_ = 0u;
    accu_reputation_ = 0u;
    accu_end_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_add_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accu_coin;
        break;
      }
      
      // required uint32 accu_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_coin_)));
          set_has_accu_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accu_reputation;
        break;
      }
      
      // required uint32 accu_reputation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_reputation_)));
          set_has_accu_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accu_end_time;
        break;
      }
      
      // required uint32 accu_end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accu_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accu_end_time_)));
          set_has_accu_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_add_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accu_coin(), output);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accu_reputation(), output);
  }
  
  // required uint32 accu_end_time = 4;
  if (has_accu_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accu_end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_add_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 accu_coin = 2;
  if (has_accu_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accu_coin(), target);
  }
  
  // required uint32 accu_reputation = 3;
  if (has_accu_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accu_reputation(), target);
  }
  
  // required uint32 accu_end_time = 4;
  if (has_accu_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accu_end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_add_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 accu_coin = 2;
    if (has_accu_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_coin());
    }
    
    // required uint32 accu_reputation = 3;
    if (has_accu_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_reputation());
    }
    
    // required uint32 accu_end_time = 4;
    if (has_accu_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accu_end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_add_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_add_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_add_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_add_in::MergeFrom(const db_ai_rank_add_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_accu_coin()) {
      set_accu_coin(from.accu_coin());
    }
    if (from.has_accu_reputation()) {
      set_accu_reputation(from.accu_reputation());
    }
    if (from.has_accu_end_time()) {
      set_accu_end_time(from.accu_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_add_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_add_in::CopyFrom(const db_ai_rank_add_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_add_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void db_ai_rank_add_in::Swap(db_ai_rank_add_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(accu_coin_, other->accu_coin_);
    std::swap(accu_reputation_, other->accu_reputation_);
    std::swap(accu_end_time_, other->accu_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_add_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_add_in_descriptor_;
  metadata.reflection = db_ai_rank_add_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_add_out::kPvaiInfoFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_add_out::db_ai_rank_add_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_add_out::InitAsDefaultInstance() {
  pvai_info_ = const_cast< ::rudb::db_player_pvai_info_t*>(&::rudb::db_player_pvai_info_t::default_instance());
}

db_ai_rank_add_out::db_ai_rank_add_out(const db_ai_rank_add_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_add_out::SharedCtor() {
  _cached_size_ = 0;
  pvai_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_add_out::~db_ai_rank_add_out() {
  SharedDtor();
}

void db_ai_rank_add_out::SharedDtor() {
  if (this != default_instance_) {
    delete pvai_info_;
  }
}

void db_ai_rank_add_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_add_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_add_out_descriptor_;
}

const db_ai_rank_add_out& db_ai_rank_add_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_add_out* db_ai_rank_add_out::default_instance_ = NULL;

db_ai_rank_add_out* db_ai_rank_add_out::New() const {
  return new db_ai_rank_add_out;
}

void db_ai_rank_add_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pvai_info()) {
      if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_add_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rudb.db_player_pvai_info_t pvai_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvai_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_add_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rudb.db_player_pvai_info_t pvai_info = 1;
  if (has_pvai_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pvai_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_add_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rudb.db_player_pvai_info_t pvai_info = 1;
  if (has_pvai_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pvai_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_add_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rudb.db_player_pvai_info_t pvai_info = 1;
    if (has_pvai_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvai_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_add_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_add_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_add_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_add_out::MergeFrom(const db_ai_rank_add_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvai_info()) {
      mutable_pvai_info()->::rudb::db_player_pvai_info_t::MergeFrom(from.pvai_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_add_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_add_out::CopyFrom(const db_ai_rank_add_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_add_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pvai_info()) {
    if (!this->pvai_info().IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_add_out::Swap(db_ai_rank_add_out* other) {
  if (other != this) {
    std::swap(pvai_info_, other->pvai_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_add_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_add_out_descriptor_;
  metadata.reflection = db_ai_rank_add_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_query_in::kZoneIdFieldNumber;
const int db_ai_rank_query_in::kLengthFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_query_in::db_ai_rank_query_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_query_in::InitAsDefaultInstance() {
}

db_ai_rank_query_in::db_ai_rank_query_in(const db_ai_rank_query_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_query_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_query_in::~db_ai_rank_query_in() {
  SharedDtor();
}

void db_ai_rank_query_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_query_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_query_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_query_in_descriptor_;
}

const db_ai_rank_query_in& db_ai_rank_query_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_query_in* db_ai_rank_query_in::default_instance_ = NULL;

db_ai_rank_query_in* db_ai_rank_query_in::New() const {
  return new db_ai_rank_query_in;
}

void db_ai_rank_query_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_query_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // required uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_query_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_query_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_query_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_query_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_query_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_query_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_query_in::MergeFrom(const db_ai_rank_query_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_query_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_query_in::CopyFrom(const db_ai_rank_query_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_query_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_ai_rank_query_in::Swap(db_ai_rank_query_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_query_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_query_in_descriptor_;
  metadata.reflection = db_ai_rank_query_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_query_out::kRankFieldNumber;
const int db_ai_rank_query_out::kInfosFieldNumber;
const int db_ai_rank_query_out::kLogFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_query_out::db_ai_rank_query_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_query_out::InitAsDefaultInstance() {
  log_ = const_cast< ::rudb::db_ai_rank_log*>(&::rudb::db_ai_rank_log::default_instance());
}

db_ai_rank_query_out::db_ai_rank_query_out(const db_ai_rank_query_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_query_out::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_query_out::~db_ai_rank_query_out() {
  SharedDtor();
}

void db_ai_rank_query_out::SharedDtor() {
  if (this != default_instance_) {
    delete log_;
  }
}

void db_ai_rank_query_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_query_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_query_out_descriptor_;
}

const db_ai_rank_query_out& db_ai_rank_query_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_query_out* db_ai_rank_query_out::default_instance_ = NULL;

db_ai_rank_query_out* db_ai_rank_query_out::New() const {
  return new db_ai_rank_query_out;
}

void db_ai_rank_query_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_log()) {
      if (log_ != NULL) log_->::rudb::db_ai_rank_log::Clear();
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_query_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.db_ai_rank_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // required .rudb.db_ai_rank_log log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_query_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  // required .rudb.db_ai_rank_log log = 3;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_query_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  // required .rudb.db_ai_rank_log log = 3;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_query_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // required .rudb.db_ai_rank_log log = 3;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }
    
  }
  // repeated .rudb.db_ai_rank_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_query_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_query_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_query_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_query_out::MergeFrom(const db_ai_rank_query_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_log()) {
      mutable_log()->::rudb::db_ai_rank_log::MergeFrom(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_query_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_query_out::CopyFrom(const db_ai_rank_query_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_query_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  if (has_log()) {
    if (!this->log().IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_query_out::Swap(db_ai_rank_query_out* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    infos_.Swap(&other->infos_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_query_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_query_out_descriptor_;
  metadata.reflection = db_ai_rank_query_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_exchange_in::kZoneIdFieldNumber;
const int db_ai_rank_exchange_in::kTargetUseridFieldNumber;
const int db_ai_rank_exchange_in::kTargetRegTimeFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_exchange_in::db_ai_rank_exchange_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_exchange_in::InitAsDefaultInstance() {
}

db_ai_rank_exchange_in::db_ai_rank_exchange_in(const db_ai_rank_exchange_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_exchange_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  target_userid_ = GOOGLE_ULONGLONG(0);
  target_reg_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_exchange_in::~db_ai_rank_exchange_in() {
  SharedDtor();
}

void db_ai_rank_exchange_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_exchange_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_exchange_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_exchange_in_descriptor_;
}

const db_ai_rank_exchange_in& db_ai_rank_exchange_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_exchange_in* db_ai_rank_exchange_in::default_instance_ = NULL;

db_ai_rank_exchange_in* db_ai_rank_exchange_in::New() const {
  return new db_ai_rank_exchange_in;
}

void db_ai_rank_exchange_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    target_userid_ = GOOGLE_ULONGLONG(0);
    target_reg_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_exchange_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_userid;
        break;
      }
      
      // required uint64 target_userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_userid_)));
          set_has_target_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_reg_time;
        break;
      }
      
      // required uint32 target_reg_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_reg_time_)));
          set_has_target_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_exchange_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 target_userid = 2;
  if (has_target_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_userid(), output);
  }
  
  // required uint32 target_reg_time = 3;
  if (has_target_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_reg_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_exchange_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 target_userid = 2;
  if (has_target_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_userid(), target);
  }
  
  // required uint32 target_reg_time = 3;
  if (has_target_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_reg_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_exchange_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 target_userid = 2;
    if (has_target_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_userid());
    }
    
    // required uint32 target_reg_time = 3;
    if (has_target_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_reg_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_exchange_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_exchange_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_exchange_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_exchange_in::MergeFrom(const db_ai_rank_exchange_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_target_userid()) {
      set_target_userid(from.target_userid());
    }
    if (from.has_target_reg_time()) {
      set_target_reg_time(from.target_reg_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_exchange_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_exchange_in::CopyFrom(const db_ai_rank_exchange_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_exchange_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_exchange_in::Swap(db_ai_rank_exchange_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(target_userid_, other->target_userid_);
    std::swap(target_reg_time_, other->target_reg_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_exchange_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_exchange_in_descriptor_;
  metadata.reflection = db_ai_rank_exchange_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_range_in::kZoneIdFieldNumber;
const int db_ai_rank_range_in::kStartFieldNumber;
const int db_ai_rank_range_in::kEndFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_range_in::db_ai_rank_range_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_range_in::InitAsDefaultInstance() {
}

db_ai_rank_range_in::db_ai_rank_range_in(const db_ai_rank_range_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_range_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_range_in::~db_ai_rank_range_in() {
  SharedDtor();
}

void db_ai_rank_range_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_range_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_range_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_range_in_descriptor_;
}

const db_ai_rank_range_in& db_ai_rank_range_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_range_in* db_ai_rank_range_in::default_instance_ = NULL;

db_ai_rank_range_in* db_ai_rank_range_in::New() const {
  return new db_ai_rank_range_in;
}

void db_ai_rank_range_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    start_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_range_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }
      
      // required uint32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }
      
      // required uint32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_range_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start(), output);
  }
  
  // required uint32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_range_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start(), target);
  }
  
  // required uint32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_range_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }
    
    // required uint32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_range_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_range_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_range_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_range_in::MergeFrom(const db_ai_rank_range_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_range_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_range_in::CopyFrom(const db_ai_rank_range_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_range_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_ai_rank_range_in::Swap(db_ai_rank_range_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_range_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_range_in_descriptor_;
  metadata.reflection = db_ai_rank_range_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_range_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_range_out::db_ai_rank_range_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_range_out::InitAsDefaultInstance() {
}

db_ai_rank_range_out::db_ai_rank_range_out(const db_ai_rank_range_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_range_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_range_out::~db_ai_rank_range_out() {
  SharedDtor();
}

void db_ai_rank_range_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_ai_rank_range_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_range_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_range_out_descriptor_;
}

const db_ai_rank_range_out& db_ai_rank_range_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_range_out* db_ai_rank_range_out::default_instance_ = NULL;

db_ai_rank_range_out* db_ai_rank_range_out::New() const {
  return new db_ai_rank_range_out;
}

void db_ai_rank_range_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_range_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_ai_rank_info infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_range_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_ai_rank_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_range_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_ai_rank_info infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_range_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.db_ai_rank_info infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_range_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_range_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_range_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_range_out::MergeFrom(const db_ai_rank_range_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_range_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_range_out::CopyFrom(const db_ai_rank_range_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_range_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_ai_rank_range_out::Swap(db_ai_rank_range_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_range_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_range_out_descriptor_;
  metadata.reflection = db_ai_rank_range_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_ai_rank_log_in::kZoneIdFieldNumber;
const int db_ai_rank_log_in::kNameFieldNumber;
const int db_ai_rank_log_in::kTargetUseridFieldNumber;
const int db_ai_rank_log_in::kTargetRegTimeFieldNumber;
const int db_ai_rank_log_in::kTargetNameFieldNumber;
const int db_ai_rank_log_in::kWinFieldNumber;
#endif  // !_MSC_VER

db_ai_rank_log_in::db_ai_rank_log_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_ai_rank_log_in::InitAsDefaultInstance() {
}

db_ai_rank_log_in::db_ai_rank_log_in(const db_ai_rank_log_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_ai_rank_log_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_userid_ = GOOGLE_ULONGLONG(0);
  target_reg_time_ = 0u;
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_ai_rank_log_in::~db_ai_rank_log_in() {
  SharedDtor();
}

void db_ai_rank_log_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (this != default_instance_) {
  }
}

void db_ai_rank_log_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_ai_rank_log_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_ai_rank_log_in_descriptor_;
}

const db_ai_rank_log_in& db_ai_rank_log_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_ai_rank_log_in* db_ai_rank_log_in::default_instance_ = NULL;

db_ai_rank_log_in* db_ai_rank_log_in::New() const {
  return new db_ai_rank_log_in;
}

void db_ai_rank_log_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    target_userid_ = GOOGLE_ULONGLONG(0);
    target_reg_time_ = 0u;
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_ai_rank_log_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_userid;
        break;
      }
      
      // required uint64 target_userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_userid_)));
          set_has_target_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_reg_time;
        break;
      }
      
      // required uint32 target_reg_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_reg_time_)));
          set_has_target_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target_name;
        break;
      }
      
      // required bytes target_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }
      
      // required bool win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_ai_rank_log_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required uint64 target_userid = 3;
  if (has_target_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_userid(), output);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_reg_time(), output);
  }
  
  // required bytes target_name = 5;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->target_name(), output);
  }
  
  // required bool win = 6;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_ai_rank_log_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required uint64 target_userid = 3;
  if (has_target_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_userid(), target);
  }
  
  // required uint32 target_reg_time = 4;
  if (has_target_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_reg_time(), target);
  }
  
  // required bytes target_name = 5;
  if (has_target_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->target_name(), target);
  }
  
  // required bool win = 6;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_ai_rank_log_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required uint64 target_userid = 3;
    if (has_target_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_userid());
    }
    
    // required uint32 target_reg_time = 4;
    if (has_target_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_reg_time());
    }
    
    // required bytes target_name = 5;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_name());
    }
    
    // required bool win = 6;
    if (has_win()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_ai_rank_log_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_ai_rank_log_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_ai_rank_log_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_ai_rank_log_in::MergeFrom(const db_ai_rank_log_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_target_userid()) {
      set_target_userid(from.target_userid());
    }
    if (from.has_target_reg_time()) {
      set_target_reg_time(from.target_reg_time());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_ai_rank_log_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ai_rank_log_in::CopyFrom(const db_ai_rank_log_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ai_rank_log_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void db_ai_rank_log_in::Swap(db_ai_rank_log_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(target_userid_, other->target_userid_);
    std::swap(target_reg_time_, other->target_reg_time_);
    std::swap(target_name_, other->target_name_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_ai_rank_log_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_ai_rank_log_in_descriptor_;
  metadata.reflection = db_ai_rank_log_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_update_pvai_basic_info_in::kZoneIdFieldNumber;
const int db_update_pvai_basic_info_in::kInfosFieldNumber;
#endif  // !_MSC_VER

db_update_pvai_basic_info_in::db_update_pvai_basic_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_update_pvai_basic_info_in::InitAsDefaultInstance() {
}

db_update_pvai_basic_info_in::db_update_pvai_basic_info_in(const db_update_pvai_basic_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_update_pvai_basic_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_update_pvai_basic_info_in::~db_update_pvai_basic_info_in() {
  SharedDtor();
}

void db_update_pvai_basic_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_update_pvai_basic_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_update_pvai_basic_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_update_pvai_basic_info_in_descriptor_;
}

const db_update_pvai_basic_info_in& db_update_pvai_basic_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_update_pvai_basic_info_in* db_update_pvai_basic_info_in::default_instance_ = NULL;

db_update_pvai_basic_info_in* db_update_pvai_basic_info_in::New() const {
  return new db_update_pvai_basic_info_in;
}

void db_update_pvai_basic_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_update_pvai_basic_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.db_player_info_t infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_update_pvai_basic_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.db_player_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_update_pvai_basic_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.db_player_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_update_pvai_basic_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.db_player_info_t infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_update_pvai_basic_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_update_pvai_basic_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_update_pvai_basic_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_update_pvai_basic_info_in::MergeFrom(const db_update_pvai_basic_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_update_pvai_basic_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_pvai_basic_info_in::CopyFrom(const db_update_pvai_basic_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_pvai_basic_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_update_pvai_basic_info_in::Swap(db_update_pvai_basic_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_update_pvai_basic_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_update_pvai_basic_info_in_descriptor_;
  metadata.reflection = db_update_pvai_basic_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_step_t::kStepTypeFieldNumber;
const int activity_step_t::kStepIdFieldNumber;
const int activity_step_t::kStepValueFieldNumber;
const int activity_step_t::kIsNeedStepFieldNumber;
#endif  // !_MSC_VER

activity_step_t::activity_step_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_step_t::InitAsDefaultInstance() {
}

activity_step_t::activity_step_t(const activity_step_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_step_t::SharedCtor() {
  _cached_size_ = 0;
  step_type_ = 0u;
  step_id_ = 0u;
  step_value_ = 0u;
  is_need_step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_step_t::~activity_step_t() {
  SharedDtor();
}

void activity_step_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_step_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_step_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_step_t_descriptor_;
}

const activity_step_t& activity_step_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

activity_step_t* activity_step_t::default_instance_ = NULL;

activity_step_t* activity_step_t::New() const {
  return new activity_step_t;
}

void activity_step_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_type_ = 0u;
    step_id_ = 0u;
    step_value_ = 0u;
    is_need_step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_step_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 step_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_type_)));
          set_has_step_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }
      
      // required uint32 step_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_value;
        break;
      }
      
      // required uint32 step_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_value_)));
          set_has_step_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_need_step;
        break;
      }
      
      // required uint32 is_need_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_need_step_)));
          set_has_is_need_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_step_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 step_type = 1;
  if (has_step_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step_type(), output);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step_id(), output);
  }
  
  // required uint32 step_value = 3;
  if (has_step_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step_value(), output);
  }
  
  // required uint32 is_need_step = 4;
  if (has_is_need_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_need_step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_step_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 step_type = 1;
  if (has_step_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step_type(), target);
  }
  
  // required uint32 step_id = 2;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step_id(), target);
  }
  
  // required uint32 step_value = 3;
  if (has_step_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step_value(), target);
  }
  
  // required uint32 is_need_step = 4;
  if (has_is_need_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_need_step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_step_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 step_type = 1;
    if (has_step_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_type());
    }
    
    // required uint32 step_id = 2;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_id());
    }
    
    // required uint32 step_value = 3;
    if (has_step_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_value());
    }
    
    // required uint32 is_need_step = 4;
    if (has_is_need_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_need_step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_step_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_step_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_step_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_step_t::MergeFrom(const activity_step_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step_type()) {
      set_step_type(from.step_type());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_step_value()) {
      set_step_value(from.step_value());
    }
    if (from.has_is_need_step()) {
      set_is_need_step(from.is_need_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_step_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_step_t::CopyFrom(const activity_step_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_step_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void activity_step_t::Swap(activity_step_t* other) {
  if (other != this) {
    std::swap(step_type_, other->step_type_);
    std::swap(step_id_, other->step_id_);
    std::swap(step_value_, other->step_value_);
    std::swap(is_need_step_, other->is_need_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_step_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_step_t_descriptor_;
  metadata.reflection = activity_step_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int activity_info_t::kActivityIdFieldNumber;
const int activity_info_t::kStepsFieldNumber;
const int activity_info_t::kRevcRewardTimesFieldNumber;
const int activity_info_t::kDeadTmFieldNumber;
#endif  // !_MSC_VER

activity_info_t::activity_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void activity_info_t::InitAsDefaultInstance() {
}

activity_info_t::activity_info_t(const activity_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void activity_info_t::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0u;
  revc_reward_times_ = 0u;
  dead_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

activity_info_t::~activity_info_t() {
  SharedDtor();
}

void activity_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void activity_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* activity_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return activity_info_t_descriptor_;
}

const activity_info_t& activity_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

activity_info_t* activity_info_t::default_instance_ = NULL;

activity_info_t* activity_info_t::New() const {
  return new activity_info_t;
}

void activity_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0u;
    revc_reward_times_ = 0u;
    dead_tm_ = 0u;
  }
  steps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool activity_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps;
        break;
      }
      
      // repeated .rudb.activity_step_t steps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps;
        if (input->ExpectTag(24)) goto parse_revc_reward_times;
        break;
      }
      
      // required uint32 revc_reward_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revc_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revc_reward_times_)));
          set_has_revc_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_tm;
        break;
      }
      
      // required uint32 dead_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_tm_)));
          set_has_dead_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void activity_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity_id(), output);
  }
  
  // repeated .rudb.activity_step_t steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->steps(i), output);
  }
  
  // required uint32 revc_reward_times = 3;
  if (has_revc_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revc_reward_times(), output);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* activity_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity_id(), target);
  }
  
  // repeated .rudb.activity_step_t steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->steps(i), target);
  }
  
  // required uint32 revc_reward_times = 3;
  if (has_revc_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revc_reward_times(), target);
  }
  
  // required uint32 dead_tm = 4;
  if (has_dead_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int activity_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_id());
    }
    
    // required uint32 revc_reward_times = 3;
    if (has_revc_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revc_reward_times());
    }
    
    // required uint32 dead_tm = 4;
    if (has_dead_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_tm());
    }
    
  }
  // repeated .rudb.activity_step_t steps = 2;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void activity_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const activity_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const activity_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void activity_info_t::MergeFrom(const activity_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_.MergeFrom(from.steps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_revc_reward_times()) {
      set_revc_reward_times(from.revc_reward_times());
    }
    if (from.has_dead_tm()) {
      set_dead_tm(from.dead_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void activity_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_info_t::CopyFrom(const activity_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  for (int i = 0; i < steps_size(); i++) {
    if (!this->steps(i).IsInitialized()) return false;
  }
  return true;
}

void activity_info_t::Swap(activity_info_t* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    steps_.Swap(&other->steps_);
    std::swap(revc_reward_times_, other->revc_reward_times_);
    std::swap(dead_tm_, other->dead_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata activity_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = activity_info_t_descriptor_;
  metadata.reflection = activity_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_activity_list_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_activity_list_in::db_query_activity_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_activity_list_in::InitAsDefaultInstance() {
}

db_query_activity_list_in::db_query_activity_list_in(const db_query_activity_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_activity_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_activity_list_in::~db_query_activity_list_in() {
  SharedDtor();
}

void db_query_activity_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_activity_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_activity_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_activity_list_in_descriptor_;
}

const db_query_activity_list_in& db_query_activity_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_activity_list_in* db_query_activity_list_in::default_instance_ = NULL;

db_query_activity_list_in* db_query_activity_list_in::New() const {
  return new db_query_activity_list_in;
}

void db_query_activity_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_activity_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_activity_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_activity_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_activity_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_activity_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_activity_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_activity_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_activity_list_in::MergeFrom(const db_query_activity_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_activity_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_activity_list_in::CopyFrom(const db_query_activity_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_activity_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_activity_list_in::Swap(db_query_activity_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_activity_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_activity_list_in_descriptor_;
  metadata.reflection = db_query_activity_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_activity_list_out::kInfosFieldNumber;
#endif  // !_MSC_VER

db_query_activity_list_out::db_query_activity_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_activity_list_out::InitAsDefaultInstance() {
}

db_query_activity_list_out::db_query_activity_list_out(const db_query_activity_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_activity_list_out::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_activity_list_out::~db_query_activity_list_out() {
  SharedDtor();
}

void db_query_activity_list_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_activity_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_activity_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_activity_list_out_descriptor_;
}

const db_query_activity_list_out& db_query_activity_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_activity_list_out* db_query_activity_list_out::default_instance_ = NULL;

db_query_activity_list_out* db_query_activity_list_out::New() const {
  return new db_query_activity_list_out;
}

void db_query_activity_list_out::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_activity_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.activity_info_t infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_activity_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.activity_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_activity_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.activity_info_t infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_activity_list_out::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.activity_info_t infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_activity_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_activity_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_activity_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_activity_list_out::MergeFrom(const db_query_activity_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_activity_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_activity_list_out::CopyFrom(const db_query_activity_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_activity_list_out::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_activity_list_out::Swap(db_query_activity_list_out* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_activity_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_activity_list_out_descriptor_;
  metadata.reflection = db_query_activity_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_replace_activity_info_in::kZoneIdFieldNumber;
const int db_replace_activity_info_in::kInfosFieldNumber;
#endif  // !_MSC_VER

db_replace_activity_info_in::db_replace_activity_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_replace_activity_info_in::InitAsDefaultInstance() {
}

db_replace_activity_info_in::db_replace_activity_info_in(const db_replace_activity_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_replace_activity_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_replace_activity_info_in::~db_replace_activity_info_in() {
  SharedDtor();
}

void db_replace_activity_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_replace_activity_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_replace_activity_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_replace_activity_info_in_descriptor_;
}

const db_replace_activity_info_in& db_replace_activity_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_replace_activity_info_in* db_replace_activity_info_in::default_instance_ = NULL;

db_replace_activity_info_in* db_replace_activity_info_in::New() const {
  return new db_replace_activity_info_in;
}

void db_replace_activity_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_replace_activity_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }
      
      // repeated .rudb.activity_info_t infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_replace_activity_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated .rudb.activity_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_replace_activity_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated .rudb.activity_info_t infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_replace_activity_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated .rudb.activity_info_t infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_replace_activity_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_replace_activity_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_replace_activity_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_replace_activity_info_in::MergeFrom(const db_replace_activity_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_replace_activity_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_replace_activity_info_in::CopyFrom(const db_replace_activity_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_replace_activity_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_replace_activity_info_in::Swap(db_replace_activity_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_replace_activity_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_replace_activity_info_in_descriptor_;
  metadata.reflection = db_replace_activity_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_delete_activity_info_in::kZoneIdFieldNumber;
const int db_delete_activity_info_in::kActivityIdsFieldNumber;
#endif  // !_MSC_VER

db_delete_activity_info_in::db_delete_activity_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_delete_activity_info_in::InitAsDefaultInstance() {
}

db_delete_activity_info_in::db_delete_activity_info_in(const db_delete_activity_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_delete_activity_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_delete_activity_info_in::~db_delete_activity_info_in() {
  SharedDtor();
}

void db_delete_activity_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_delete_activity_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_delete_activity_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_delete_activity_info_in_descriptor_;
}

const db_delete_activity_info_in& db_delete_activity_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_delete_activity_info_in* db_delete_activity_info_in::default_instance_ = NULL;

db_delete_activity_info_in* db_delete_activity_info_in::New() const {
  return new db_delete_activity_info_in;
}

void db_delete_activity_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  activity_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_delete_activity_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_ids;
        break;
      }
      
      // repeated uint32 activity_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_activity_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activity_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_delete_activity_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated uint32 activity_ids = 2;
  for (int i = 0; i < this->activity_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->activity_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_delete_activity_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated uint32 activity_ids = 2;
  for (int i = 0; i < this->activity_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->activity_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_delete_activity_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  // repeated uint32 activity_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->activity_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activity_ids(i));
    }
    total_size += 1 * this->activity_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_delete_activity_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_delete_activity_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_delete_activity_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_delete_activity_info_in::MergeFrom(const db_delete_activity_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_ids_.MergeFrom(from.activity_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_delete_activity_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_delete_activity_info_in::CopyFrom(const db_delete_activity_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_delete_activity_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_delete_activity_info_in::Swap(db_delete_activity_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    activity_ids_.Swap(&other->activity_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_delete_activity_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_delete_activity_info_in_descriptor_;
  metadata.reflection = db_delete_activity_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_item_attachment_t::kItemIdFieldNumber;
const int mail_item_attachment_t::kItemNumFieldNumber;
#endif  // !_MSC_VER

mail_item_attachment_t::mail_item_attachment_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_item_attachment_t::InitAsDefaultInstance() {
}

mail_item_attachment_t::mail_item_attachment_t(const mail_item_attachment_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_item_attachment_t::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_item_attachment_t::~mail_item_attachment_t() {
  SharedDtor();
}

void mail_item_attachment_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_item_attachment_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_item_attachment_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_item_attachment_t_descriptor_;
}

const mail_item_attachment_t& mail_item_attachment_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

mail_item_attachment_t* mail_item_attachment_t::default_instance_ = NULL;

mail_item_attachment_t* mail_item_attachment_t::New() const {
  return new mail_item_attachment_t;
}

void mail_item_attachment_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_item_attachment_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }
      
      // required uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_item_attachment_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }
  
  // required uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_item_attachment_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }
  
  // required uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_item_attachment_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_item_attachment_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_item_attachment_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_item_attachment_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_item_attachment_t::MergeFrom(const mail_item_attachment_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_item_attachment_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_item_attachment_t::CopyFrom(const mail_item_attachment_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_item_attachment_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mail_item_attachment_t::Swap(mail_item_attachment_t* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_item_attachment_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_item_attachment_t_descriptor_;
  metadata.reflection = mail_item_attachment_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_mail_info_t::kMailIdFieldNumber;
const int db_mail_info_t::kTitleFieldNumber;
const int db_mail_info_t::kComeFromFieldNumber;
const int db_mail_info_t::kContentFieldNumber;
const int db_mail_info_t::kItemsFieldNumber;
#endif  // !_MSC_VER

db_mail_info_t::db_mail_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_mail_info_t::InitAsDefaultInstance() {
}

db_mail_info_t::db_mail_info_t(const db_mail_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_mail_info_t::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  come_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_mail_info_t::~db_mail_info_t() {
  SharedDtor();
}

void db_mail_info_t::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (come_from_ != &::google::protobuf::internal::kEmptyString) {
    delete come_from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_mail_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_mail_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_mail_info_t_descriptor_;
}

const db_mail_info_t& db_mail_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_mail_info_t* db_mail_info_t::default_instance_ = NULL;

db_mail_info_t* db_mail_info_t::New() const {
  return new db_mail_info_t;
}

void db_mail_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_come_from()) {
      if (come_from_ != &::google::protobuf::internal::kEmptyString) {
        come_from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_mail_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_come_from;
        break;
      }
      
      // required bytes come_from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_come_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_come_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .rudb.mail_item_attachment_t items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_mail_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mail_id(), output);
  }
  
  // required bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // required bytes come_from = 3;
  if (has_come_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->come_from(), output);
  }
  
  // required bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }
  
  // repeated .rudb.mail_item_attachment_t items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_mail_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mail_id(), target);
  }
  
  // required bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // required bytes come_from = 3;
  if (has_come_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->come_from(), target);
  }
  
  // required bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }
  
  // repeated .rudb.mail_item_attachment_t items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_mail_info_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
    // required bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bytes come_from = 3;
    if (has_come_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->come_from());
    }
    
    // required bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  // repeated .rudb.mail_item_attachment_t items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_mail_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_mail_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_mail_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_mail_info_t::MergeFrom(const db_mail_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_come_from()) {
      set_come_from(from.come_from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_mail_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail_info_t::CopyFrom(const db_mail_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_mail_info_t::Swap(db_mail_info_t* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(title_, other->title_);
    std::swap(come_from_, other->come_from_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_mail_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_mail_info_t_descriptor_;
  metadata.reflection = db_mail_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_new_mail_in::kZoneIdFieldNumber;
const int db_add_new_mail_in::kMailInfoFieldNumber;
const int db_add_new_mail_in::kGmServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_new_mail_in::db_add_new_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_new_mail_in::InitAsDefaultInstance() {
  mail_info_ = const_cast< ::rudb::db_mail_info_t*>(&::rudb::db_mail_info_t::default_instance());
}

db_add_new_mail_in::db_add_new_mail_in(const db_add_new_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_new_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  mail_info_ = NULL;
  gm_server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_new_mail_in::~db_add_new_mail_in() {
  SharedDtor();
}

void db_add_new_mail_in::SharedDtor() {
  if (this != default_instance_) {
    delete mail_info_;
  }
}

void db_add_new_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_new_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_new_mail_in_descriptor_;
}

const db_add_new_mail_in& db_add_new_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_new_mail_in* db_add_new_mail_in::default_instance_ = NULL;

db_add_new_mail_in* db_add_new_mail_in::New() const {
  return new db_add_new_mail_in;
}

void db_add_new_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_mail_info()) {
      if (mail_info_ != NULL) mail_info_->::rudb::db_mail_info_t::Clear();
    }
    gm_server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_new_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_info;
        break;
      }
      
      // required .rudb.db_mail_info_t mail_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gm_server_id;
        break;
      }
      
      // optional uint32 gm_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_server_id_)));
          set_has_gm_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_new_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required .rudb.db_mail_info_t mail_info = 2;
  if (has_mail_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail_info(), output);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gm_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_new_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required .rudb.db_mail_info_t mail_info = 2;
  if (has_mail_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail_info(), target);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gm_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_new_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required .rudb.db_mail_info_t mail_info = 2;
    if (has_mail_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail_info());
    }
    
    // optional uint32 gm_server_id = 3;
    if (has_gm_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gm_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_new_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_new_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_new_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_new_mail_in::MergeFrom(const db_add_new_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_info()) {
      mutable_mail_info()->::rudb::db_mail_info_t::MergeFrom(from.mail_info());
    }
    if (from.has_gm_server_id()) {
      set_gm_server_id(from.gm_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_new_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_new_mail_in::CopyFrom(const db_add_new_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_new_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_mail_info()) {
    if (!this->mail_info().IsInitialized()) return false;
  }
  return true;
}

void db_add_new_mail_in::Swap(db_add_new_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_info_, other->mail_info_);
    std::swap(gm_server_id_, other->gm_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_new_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_new_mail_in_descriptor_;
  metadata.reflection = db_add_new_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_new_mail_out::kZoneIdFieldNumber;
const int db_add_new_mail_out::kMailIdFieldNumber;
const int db_add_new_mail_out::kGmServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_new_mail_out::db_add_new_mail_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_new_mail_out::InitAsDefaultInstance() {
}

db_add_new_mail_out::db_add_new_mail_out(const db_add_new_mail_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_new_mail_out::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  mail_id_ = GOOGLE_ULONGLONG(0);
  gm_server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_new_mail_out::~db_add_new_mail_out() {
  SharedDtor();
}

void db_add_new_mail_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_new_mail_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_new_mail_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_new_mail_out_descriptor_;
}

const db_add_new_mail_out& db_add_new_mail_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_new_mail_out* db_add_new_mail_out::default_instance_ = NULL;

db_add_new_mail_out* db_add_new_mail_out::New() const {
  return new db_add_new_mail_out;
}

void db_add_new_mail_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    mail_id_ = GOOGLE_ULONGLONG(0);
    gm_server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_new_mail_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }
      
      // required uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gm_server_id;
        break;
      }
      
      // optional uint32 gm_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_server_id_)));
          set_has_gm_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_new_mail_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gm_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_new_mail_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }
  
  // optional uint32 gm_server_id = 3;
  if (has_gm_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gm_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_new_mail_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }
    
    // optional uint32 gm_server_id = 3;
    if (has_gm_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gm_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_new_mail_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_new_mail_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_new_mail_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_new_mail_out::MergeFrom(const db_add_new_mail_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_gm_server_id()) {
      set_gm_server_id(from.gm_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_new_mail_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_new_mail_out::CopyFrom(const db_add_new_mail_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_new_mail_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_add_new_mail_out::Swap(db_add_new_mail_out* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(gm_server_id_, other->gm_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_new_mail_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_new_mail_out_descriptor_;
  metadata.reflection = db_add_new_mail_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_infos_in::kZoneIdFieldNumber;
const int db_query_mail_infos_in::kMailIdsFieldNumber;
const int db_query_mail_infos_in::kQueryCmdFieldNumber;
const int db_query_mail_infos_in::kPageNumFieldNumber;
#endif  // !_MSC_VER

db_query_mail_infos_in::db_query_mail_infos_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_infos_in::InitAsDefaultInstance() {
}

db_query_mail_infos_in::db_query_mail_infos_in(const db_query_mail_infos_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_infos_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  query_cmd_ = 0u;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_infos_in::~db_query_mail_infos_in() {
  SharedDtor();
}

void db_query_mail_infos_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_infos_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_infos_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_infos_in_descriptor_;
}

const db_query_mail_infos_in& db_query_mail_infos_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_infos_in* db_query_mail_infos_in::default_instance_ = NULL;

db_query_mail_infos_in* db_query_mail_infos_in::New() const {
  return new db_query_mail_infos_in;
}

void db_query_mail_infos_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    query_cmd_ = 0u;
    page_num_ = 0u;
  }
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_infos_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_ids;
        break;
      }
      
      // repeated uint64 mail_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_ids;
        if (input->ExpectTag(24)) goto parse_query_cmd;
        break;
      }
      
      // required uint32 query_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_cmd_)));
          set_has_query_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }
      
      // optional uint32 page_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_infos_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // repeated uint64 mail_ids = 2;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_ids(i), output);
  }
  
  // required uint32 query_cmd = 3;
  if (has_query_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->query_cmd(), output);
  }
  
  // optional uint32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_infos_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // repeated uint64 mail_ids = 2;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_ids(i), target);
  }
  
  // required uint32 query_cmd = 3;
  if (has_query_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->query_cmd(), target);
  }
  
  // optional uint32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_infos_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 query_cmd = 3;
    if (has_query_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_cmd());
    }
    
    // optional uint32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }
    
  }
  // repeated uint64 mail_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_infos_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_infos_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_infos_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_infos_in::MergeFrom(const db_query_mail_infos_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_query_cmd()) {
      set_query_cmd(from.query_cmd());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_infos_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_infos_in::CopyFrom(const db_query_mail_infos_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_infos_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void db_query_mail_infos_in::Swap(db_query_mail_infos_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(query_cmd_, other->query_cmd_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_infos_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_infos_in_descriptor_;
  metadata.reflection = db_query_mail_infos_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_infos_out::kMailInfosFieldNumber;
const int db_query_mail_infos_out::kQueryCmdFieldNumber;
const int db_query_mail_infos_out::kPageNumFieldNumber;
#endif  // !_MSC_VER

db_query_mail_infos_out::db_query_mail_infos_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_infos_out::InitAsDefaultInstance() {
}

db_query_mail_infos_out::db_query_mail_infos_out(const db_query_mail_infos_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_infos_out::SharedCtor() {
  _cached_size_ = 0;
  query_cmd_ = 0u;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_infos_out::~db_query_mail_infos_out() {
  SharedDtor();
}

void db_query_mail_infos_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_infos_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_infos_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_infos_out_descriptor_;
}

const db_query_mail_infos_out& db_query_mail_infos_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_infos_out* db_query_mail_infos_out::default_instance_ = NULL;

db_query_mail_infos_out* db_query_mail_infos_out::New() const {
  return new db_query_mail_infos_out;
}

void db_query_mail_infos_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    query_cmd_ = 0u;
    page_num_ = 0u;
  }
  mail_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_infos_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_mail_info_t mail_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail_infos;
        if (input->ExpectTag(16)) goto parse_query_cmd;
        break;
      }
      
      // required uint32 query_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_cmd_)));
          set_has_query_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page_num;
        break;
      }
      
      // optional uint32 page_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_infos_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  for (int i = 0; i < this->mail_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_infos(i), output);
  }
  
  // required uint32 query_cmd = 2;
  if (has_query_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->query_cmd(), output);
  }
  
  // optional uint32 page_num = 3;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_infos_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  for (int i = 0; i < this->mail_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_infos(i), target);
  }
  
  // required uint32 query_cmd = 2;
  if (has_query_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->query_cmd(), target);
  }
  
  // optional uint32 page_num = 3;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_infos_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 query_cmd = 2;
    if (has_query_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_cmd());
    }
    
    // optional uint32 page_num = 3;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }
    
  }
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  total_size += 1 * this->mail_infos_size();
  for (int i = 0; i < this->mail_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_infos_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_infos_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_infos_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_infos_out::MergeFrom(const db_query_mail_infos_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_infos_.MergeFrom(from.mail_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_query_cmd()) {
      set_query_cmd(from.query_cmd());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_infos_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_infos_out::CopyFrom(const db_query_mail_infos_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_infos_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < mail_infos_size(); i++) {
    if (!this->mail_infos(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_mail_infos_out::Swap(db_query_mail_infos_out* other) {
  if (other != this) {
    mail_infos_.Swap(&other->mail_infos_);
    std::swap(query_cmd_, other->query_cmd_);
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_infos_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_infos_out_descriptor_;
  metadata.reflection = db_query_mail_infos_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_players_info_in::kZoneIdFieldNumber;
const int db_query_players_info_in::kCmdFieldNumber;
const int db_query_players_info_in::kIsRefCntCmdFieldNumber;
const int db_query_players_info_in::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_query_players_info_in::db_query_players_info_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_players_info_in::InitAsDefaultInstance() {
}

db_query_players_info_in::db_query_players_info_in(const db_query_players_info_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_players_info_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  cmd_ = 0u;
  is_ref_cnt_cmd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_players_info_in::~db_query_players_info_in() {
  SharedDtor();
}

void db_query_players_info_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_players_info_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_players_info_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_players_info_in_descriptor_;
}

const db_query_players_info_in& db_query_players_info_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_players_info_in* db_query_players_info_in::default_instance_ = NULL;

db_query_players_info_in* db_query_players_info_in::New() const {
  return new db_query_players_info_in;
}

void db_query_players_info_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    cmd_ = 0u;
    is_ref_cnt_cmd_ = false;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_players_info_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }
      
      // required uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ref_cnt_cmd;
        break;
      }
      
      // required bool is_ref_cnt_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ref_cnt_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ref_cnt_cmd_)));
          set_has_is_ref_cnt_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_players_info_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }
  
  // required bool is_ref_cnt_cmd = 3;
  if (has_is_ref_cnt_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ref_cnt_cmd(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_players_info_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }
  
  // required bool is_ref_cnt_cmd = 3;
  if (has_is_ref_cnt_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ref_cnt_cmd(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_players_info_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
    // required bool is_ref_cnt_cmd = 3;
    if (has_is_ref_cnt_cmd()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rudb.db_player_info_t players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_players_info_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_players_info_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_players_info_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_players_info_in::MergeFrom(const db_query_players_info_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_is_ref_cnt_cmd()) {
      set_is_ref_cnt_cmd(from.is_ref_cnt_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_players_info_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_players_info_in::CopyFrom(const db_query_players_info_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_players_info_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_players_info_in::Swap(db_query_players_info_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(is_ref_cnt_cmd_, other->is_ref_cnt_cmd_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_players_info_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_players_info_in_descriptor_;
  metadata.reflection = db_query_players_info_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_players_info_out::kCmdFieldNumber;
const int db_query_players_info_out::kIsRefCntCmdFieldNumber;
const int db_query_players_info_out::kPlayersFieldNumber;
#endif  // !_MSC_VER

db_query_players_info_out::db_query_players_info_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_players_info_out::InitAsDefaultInstance() {
}

db_query_players_info_out::db_query_players_info_out(const db_query_players_info_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_players_info_out::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  is_ref_cnt_cmd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_players_info_out::~db_query_players_info_out() {
  SharedDtor();
}

void db_query_players_info_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_players_info_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_players_info_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_players_info_out_descriptor_;
}

const db_query_players_info_out& db_query_players_info_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_players_info_out* db_query_players_info_out::default_instance_ = NULL;

db_query_players_info_out* db_query_players_info_out::New() const {
  return new db_query_players_info_out;
}

void db_query_players_info_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    is_ref_cnt_cmd_ = false;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_players_info_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_ref_cnt_cmd;
        break;
      }
      
      // required bool is_ref_cnt_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ref_cnt_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ref_cnt_cmd_)));
          set_has_is_ref_cnt_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }
      
      // repeated .rudb.db_player_info_t players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_players_info_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }
  
  // required bool is_ref_cnt_cmd = 2;
  if (has_is_ref_cnt_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ref_cnt_cmd(), output);
  }
  
  // repeated .rudb.db_player_info_t players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_players_info_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }
  
  // required bool is_ref_cnt_cmd = 2;
  if (has_is_ref_cnt_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ref_cnt_cmd(), target);
  }
  
  // repeated .rudb.db_player_info_t players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_players_info_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
    // required bool is_ref_cnt_cmd = 2;
    if (has_is_ref_cnt_cmd()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rudb.db_player_info_t players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_players_info_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_players_info_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_players_info_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_players_info_out::MergeFrom(const db_query_players_info_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_is_ref_cnt_cmd()) {
      set_is_ref_cnt_cmd(from.is_ref_cnt_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_players_info_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_players_info_out::CopyFrom(const db_query_players_info_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_players_info_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void db_query_players_info_out::Swap(db_query_players_info_out* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(is_ref_cnt_cmd_, other->is_ref_cnt_cmd_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_players_info_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_players_info_out_descriptor_;
  metadata.reflection = db_query_players_info_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_userinfo_by_name_zone_in::kZoneIdFieldNumber;
const int db_query_userinfo_by_name_zone_in::kNameFieldNumber;
const int db_query_userinfo_by_name_zone_in::kChannelidFieldNumber;
#endif  // !_MSC_VER

db_query_userinfo_by_name_zone_in::db_query_userinfo_by_name_zone_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_userinfo_by_name_zone_in::InitAsDefaultInstance() {
}

db_query_userinfo_by_name_zone_in::db_query_userinfo_by_name_zone_in(const db_query_userinfo_by_name_zone_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_userinfo_by_name_zone_in::~db_query_userinfo_by_name_zone_in() {
  SharedDtor();
}

void db_query_userinfo_by_name_zone_in::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void db_query_userinfo_by_name_zone_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_userinfo_by_name_zone_in_descriptor_;
}

const db_query_userinfo_by_name_zone_in& db_query_userinfo_by_name_zone_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_userinfo_by_name_zone_in* db_query_userinfo_by_name_zone_in::default_instance_ = NULL;

db_query_userinfo_by_name_zone_in* db_query_userinfo_by_name_zone_in::New() const {
  return new db_query_userinfo_by_name_zone_in;
}

void db_query_userinfo_by_name_zone_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    channelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_userinfo_by_name_zone_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channelid;
        break;
      }
      
      // optional uint32 channelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_userinfo_by_name_zone_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // optional uint32 channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_userinfo_by_name_zone_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // optional uint32 channelid = 3;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_userinfo_by_name_zone_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 channelid = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_userinfo_by_name_zone_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_userinfo_by_name_zone_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_userinfo_by_name_zone_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_userinfo_by_name_zone_in::MergeFrom(const db_query_userinfo_by_name_zone_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_userinfo_by_name_zone_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_in::CopyFrom(const db_query_userinfo_by_name_zone_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_userinfo_by_name_zone_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_userinfo_by_name_zone_in::Swap(db_query_userinfo_by_name_zone_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(name_, other->name_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_userinfo_by_name_zone_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_userinfo_by_name_zone_in_descriptor_;
  metadata.reflection = db_query_userinfo_by_name_zone_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_userinfo_by_name_zone_out::kUseridFieldNumber;
const int db_query_userinfo_by_name_zone_out::kRegTmFieldNumber;
#endif  // !_MSC_VER

db_query_userinfo_by_name_zone_out::db_query_userinfo_by_name_zone_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_userinfo_by_name_zone_out::InitAsDefaultInstance() {
}

db_query_userinfo_by_name_zone_out::db_query_userinfo_by_name_zone_out(const db_query_userinfo_by_name_zone_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_out::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_userinfo_by_name_zone_out::~db_query_userinfo_by_name_zone_out() {
  SharedDtor();
}

void db_query_userinfo_by_name_zone_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_userinfo_by_name_zone_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_userinfo_by_name_zone_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_userinfo_by_name_zone_out_descriptor_;
}

const db_query_userinfo_by_name_zone_out& db_query_userinfo_by_name_zone_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_userinfo_by_name_zone_out* db_query_userinfo_by_name_zone_out::default_instance_ = NULL;

db_query_userinfo_by_name_zone_out* db_query_userinfo_by_name_zone_out::New() const {
  return new db_query_userinfo_by_name_zone_out;
}

void db_query_userinfo_by_name_zone_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_userinfo_by_name_zone_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_userinfo_by_name_zone_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_userinfo_by_name_zone_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_userinfo_by_name_zone_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_userinfo_by_name_zone_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_userinfo_by_name_zone_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_userinfo_by_name_zone_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_userinfo_by_name_zone_out::MergeFrom(const db_query_userinfo_by_name_zone_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_userinfo_by_name_zone_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_userinfo_by_name_zone_out::CopyFrom(const db_query_userinfo_by_name_zone_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_userinfo_by_name_zone_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_userinfo_by_name_zone_out::Swap(db_query_userinfo_by_name_zone_out* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_userinfo_by_name_zone_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_userinfo_by_name_zone_out_descriptor_;
  metadata.reflection = db_query_userinfo_by_name_zone_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_list_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_query_mail_list_in::db_query_mail_list_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_list_in::InitAsDefaultInstance() {
}

db_query_mail_list_in::db_query_mail_list_in(const db_query_mail_list_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_list_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_list_in::~db_query_mail_list_in() {
  SharedDtor();
}

void db_query_mail_list_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_list_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_list_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_list_in_descriptor_;
}

const db_query_mail_list_in& db_query_mail_list_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_list_in* db_query_mail_list_in::default_instance_ = NULL;

db_query_mail_list_in* db_query_mail_list_in::New() const {
  return new db_query_mail_list_in;
}

void db_query_mail_list_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_list_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_list_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_list_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_list_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_list_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_list_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_list_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_list_in::MergeFrom(const db_query_mail_list_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_list_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_list_in::CopyFrom(const db_query_mail_list_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_list_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_query_mail_list_in::Swap(db_query_mail_list_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_list_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_list_in_descriptor_;
  metadata.reflection = db_query_mail_list_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_mail_list::kMailidFieldNumber;
const int db_mail_list::kTitleFieldNumber;
const int db_mail_list::kHasreadFieldNumber;
const int db_mail_list::kHasattachFieldNumber;
#endif  // !_MSC_VER

db_mail_list::db_mail_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_mail_list::InitAsDefaultInstance() {
}

db_mail_list::db_mail_list(const db_mail_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_mail_list::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasread_ = false;
  hasattach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_mail_list::~db_mail_list() {
  SharedDtor();
}

void db_mail_list::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void db_mail_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_mail_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_mail_list_descriptor_;
}

const db_mail_list& db_mail_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_mail_list* db_mail_list::default_instance_ = NULL;

db_mail_list* db_mail_list::New() const {
  return new db_mail_list;
}

void db_mail_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    hasread_ = false;
    hasattach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_mail_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasread;
        break;
      }
      
      // required bool hasread = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasread_)));
          set_has_hasread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasattach;
        break;
      }
      
      // required bool hasattach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasattach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_mail_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // required bool hasread = 3;
  if (has_hasread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasread(), output);
  }
  
  // required bool hasattach = 4;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasattach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_mail_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // required bool hasread = 3;
  if (has_hasread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasread(), target);
  }
  
  // required bool hasattach = 4;
  if (has_hasattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasattach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_mail_list::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bool hasread = 3;
    if (has_hasread()) {
      total_size += 1 + 1;
    }
    
    // required bool hasattach = 4;
    if (has_hasattach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_mail_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_mail_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_mail_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_mail_list::MergeFrom(const db_mail_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_hasread()) {
      set_hasread(from.hasread());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_mail_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail_list::CopyFrom(const db_mail_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void db_mail_list::Swap(db_mail_list* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(title_, other->title_);
    std::swap(hasread_, other->hasread_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_mail_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_mail_list_descriptor_;
  metadata.reflection = db_mail_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_list_out::kMaillistFieldNumber;
const int db_query_mail_list_out::kMailFieldNumber;
#endif  // !_MSC_VER

db_query_mail_list_out::db_query_mail_list_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_list_out::InitAsDefaultInstance() {
  mail_ = const_cast< ::rudb::db_query_mail_out*>(&::rudb::db_query_mail_out::default_instance());
}

db_query_mail_list_out::db_query_mail_list_out(const db_query_mail_list_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_list_out::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_list_out::~db_query_mail_list_out() {
  SharedDtor();
}

void db_query_mail_list_out::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void db_query_mail_list_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_list_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_list_out_descriptor_;
}

const db_query_mail_list_out& db_query_mail_list_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_list_out* db_query_mail_list_out::default_instance_ = NULL;

db_query_mail_list_out* db_query_mail_list_out::New() const {
  return new db_query_mail_list_out;
}

void db_query_mail_list_out::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::rudb::db_query_mail_out::Clear();
    }
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_list_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.db_mail_list maillist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_maillist;
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }
      
      // optional .rudb.db_query_mail_out mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_list_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.db_mail_list maillist = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }
  
  // optional .rudb.db_query_mail_out mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_list_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.db_mail_list maillist = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }
  
  // optional .rudb.db_query_mail_out mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_list_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rudb.db_query_mail_out mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }
    
  }
  // repeated .rudb.db_mail_list maillist = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_list_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_list_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_list_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_list_out::MergeFrom(const db_query_mail_list_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::rudb::db_query_mail_out::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_list_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_list_out::CopyFrom(const db_query_mail_list_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_list_out::IsInitialized() const {
  
  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void db_query_mail_list_out::Swap(db_query_mail_list_out* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_list_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_list_out_descriptor_;
  metadata.reflection = db_query_mail_list_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_in::kZoneIdFieldNumber;
const int db_query_mail_in::kMailIdFieldNumber;
#endif  // !_MSC_VER

db_query_mail_in::db_query_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_in::InitAsDefaultInstance() {
}

db_query_mail_in::db_query_mail_in(const db_query_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  mail_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_in::~db_query_mail_in() {
  SharedDtor();
}

void db_query_mail_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_query_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_in_descriptor_;
}

const db_query_mail_in& db_query_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_in* db_query_mail_in::default_instance_ = NULL;

db_query_mail_in* db_query_mail_in::New() const {
  return new db_query_mail_in;
}

void db_query_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    mail_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }
      
      // required uint32 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required uint32 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mail_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required uint32 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mail_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_in::MergeFrom(const db_query_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_in::CopyFrom(const db_query_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_query_mail_in::Swap(db_query_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_in_descriptor_;
  metadata.reflection = db_query_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_query_mail_out::kMailidFieldNumber;
const int db_query_mail_out::kTitleFieldNumber;
const int db_query_mail_out::kFromFieldNumber;
const int db_query_mail_out::kContentFieldNumber;
const int db_query_mail_out::kItemsFieldNumber;
const int db_query_mail_out::kHasgetFieldNumber;
const int db_query_mail_out::kFromTmFieldNumber;
#endif  // !_MSC_VER

db_query_mail_out::db_query_mail_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_query_mail_out::InitAsDefaultInstance() {
}

db_query_mail_out::db_query_mail_out(const db_query_mail_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_query_mail_out::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasget_ = false;
  from_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_query_mail_out::~db_query_mail_out() {
  SharedDtor();
}

void db_query_mail_out::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (from_tm_ != &::google::protobuf::internal::kEmptyString) {
    delete from_tm_;
  }
  if (this != default_instance_) {
  }
}

void db_query_mail_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_query_mail_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_query_mail_out_descriptor_;
}

const db_query_mail_out& db_query_mail_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_query_mail_out* db_query_mail_out::default_instance_ = NULL;

db_query_mail_out* db_query_mail_out::New() const {
  return new db_query_mail_out;
}

void db_query_mail_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    hasget_ = false;
    if (has_from_tm()) {
      if (from_tm_ != &::google::protobuf::internal::kEmptyString) {
        from_tm_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_query_mail_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }
      
      // optional bytes from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // optional bytes items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasget;
        break;
      }
      
      // required bool hasget = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasget_)));
          set_has_hasget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_from_tm;
        break;
      }
      
      // required bytes from_tm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_tm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_tm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_query_mail_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // optional bytes from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->from(), output);
  }
  
  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }
  
  // optional bytes items = 5;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->items(), output);
  }
  
  // required bool hasget = 6;
  if (has_hasget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasget(), output);
  }
  
  // required bytes from_tm = 7;
  if (has_from_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->from_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_query_mail_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // optional bytes from = 3;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->from(), target);
  }
  
  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }
  
  // optional bytes items = 5;
  if (has_items()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->items(), target);
  }
  
  // required bool hasget = 6;
  if (has_hasget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasget(), target);
  }
  
  // required bytes from_tm = 7;
  if (has_from_tm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->from_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_query_mail_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // optional bytes from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }
    
    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // optional bytes items = 5;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items());
    }
    
    // required bool hasget = 6;
    if (has_hasget()) {
      total_size += 1 + 1;
    }
    
    // required bytes from_tm = 7;
    if (has_from_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_query_mail_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_query_mail_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_query_mail_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_query_mail_out::MergeFrom(const db_query_mail_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_hasget()) {
      set_hasget(from.hasget());
    }
    if (from.has_from_tm()) {
      set_from_tm(from.from_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_query_mail_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_query_mail_out::CopyFrom(const db_query_mail_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_query_mail_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  return true;
}

void db_query_mail_out::Swap(db_query_mail_out* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(title_, other->title_);
    std::swap(from_, other->from_);
    std::swap(content_, other->content_);
    std::swap(items_, other->items_);
    std::swap(hasget_, other->hasget_);
    std::swap(from_tm_, other->from_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_query_mail_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_query_mail_out_descriptor_;
  metadata.reflection = db_query_mail_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_attach_in::kMailidFieldNumber;
const int db_get_attach_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_attach_in::db_get_attach_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_attach_in::InitAsDefaultInstance() {
}

db_get_attach_in::db_get_attach_in(const db_get_attach_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_attach_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_attach_in::~db_get_attach_in() {
  SharedDtor();
}

void db_get_attach_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_attach_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_attach_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_attach_in_descriptor_;
}

const db_get_attach_in& db_get_attach_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_attach_in* db_get_attach_in::default_instance_ = NULL;

db_get_attach_in* db_get_attach_in::New() const {
  return new db_get_attach_in;
}

void db_get_attach_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_attach_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_attach_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_attach_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_attach_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_attach_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_attach_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_attach_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_attach_in::MergeFrom(const db_get_attach_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_attach_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_attach_in::CopyFrom(const db_get_attach_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_attach_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_attach_in::Swap(db_get_attach_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_attach_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_attach_in_descriptor_;
  metadata.reflection = db_get_attach_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_attach_out::kHasgetFieldNumber;
const int db_get_attach_out::kItemsFieldNumber;
const int db_get_attach_out::kMailidFieldNumber;
#endif  // !_MSC_VER

db_get_attach_out::db_get_attach_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_attach_out::InitAsDefaultInstance() {
}

db_get_attach_out::db_get_attach_out(const db_get_attach_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_attach_out::SharedCtor() {
  _cached_size_ = 0;
  hasget_ = false;
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_attach_out::~db_get_attach_out() {
  SharedDtor();
}

void db_get_attach_out::SharedDtor() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void db_get_attach_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_attach_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_attach_out_descriptor_;
}

const db_get_attach_out& db_get_attach_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_attach_out* db_get_attach_out::default_instance_ = NULL;

db_get_attach_out* db_get_attach_out::New() const {
  return new db_get_attach_out;
}

void db_get_attach_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasget_ = false;
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::kEmptyString) {
        items_->clear();
      }
    }
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_attach_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasget_)));
          set_has_hasget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // required bytes items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailid;
        break;
      }
      
      // required uint32 mailid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_attach_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasget = 1;
  if (has_hasget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasget(), output);
  }
  
  // required bytes items = 2;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->items(), output);
  }
  
  // required uint32 mailid = 3;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_attach_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasget = 1;
  if (has_hasget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasget(), target);
  }
  
  // required bytes items = 2;
  if (has_items()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->items(), target);
  }
  
  // required uint32 mailid = 3;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_attach_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasget = 1;
    if (has_hasget()) {
      total_size += 1 + 1;
    }
    
    // required bytes items = 2;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items());
    }
    
    // required uint32 mailid = 3;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_attach_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_attach_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_attach_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_attach_out::MergeFrom(const db_get_attach_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasget()) {
      set_hasget(from.hasget());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_attach_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_attach_out::CopyFrom(const db_get_attach_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_attach_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void db_get_attach_out::Swap(db_get_attach_out* other) {
  if (other != this) {
    std::swap(hasget_, other->hasget_);
    std::swap(items_, other->items_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_attach_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_attach_out_descriptor_;
  metadata.reflection = db_get_attach_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_get_attach_success_in::kMailidFieldNumber;
const int db_get_attach_success_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_get_attach_success_in::db_get_attach_success_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_get_attach_success_in::InitAsDefaultInstance() {
}

db_get_attach_success_in::db_get_attach_success_in(const db_get_attach_success_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_get_attach_success_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_get_attach_success_in::~db_get_attach_success_in() {
  SharedDtor();
}

void db_get_attach_success_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_get_attach_success_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_get_attach_success_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_get_attach_success_in_descriptor_;
}

const db_get_attach_success_in& db_get_attach_success_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_get_attach_success_in* db_get_attach_success_in::default_instance_ = NULL;

db_get_attach_success_in* db_get_attach_success_in::New() const {
  return new db_get_attach_success_in;
}

void db_get_attach_success_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_get_attach_success_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_get_attach_success_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_get_attach_success_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_get_attach_success_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_get_attach_success_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_get_attach_success_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_get_attach_success_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_get_attach_success_in::MergeFrom(const db_get_attach_success_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_get_attach_success_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_attach_success_in::CopyFrom(const db_get_attach_success_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_attach_success_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_get_attach_success_in::Swap(db_get_attach_success_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_get_attach_success_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_get_attach_success_in_descriptor_;
  metadata.reflection = db_get_attach_success_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_del_mail_in::kMailidFieldNumber;
const int db_del_mail_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_del_mail_in::db_del_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_del_mail_in::InitAsDefaultInstance() {
}

db_del_mail_in::db_del_mail_in(const db_del_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_del_mail_in::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_del_mail_in::~db_del_mail_in() {
  SharedDtor();
}

void db_del_mail_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_del_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_del_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_del_mail_in_descriptor_;
}

const db_del_mail_in& db_del_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_del_mail_in* db_del_mail_in::default_instance_ = NULL;

db_del_mail_in* db_del_mail_in::New() const {
  return new db_del_mail_in;
}

void db_del_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_del_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_del_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_del_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  // required uint32 zone_id = 2;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_del_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // required uint32 zone_id = 2;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_del_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_del_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_del_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_del_mail_in::MergeFrom(const db_del_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_del_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_del_mail_in::CopyFrom(const db_del_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_del_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_del_mail_in::Swap(db_del_mail_in* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_del_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_del_mail_in_descriptor_;
  metadata.reflection = db_del_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_new_mail_in::kZoneIdFieldNumber;
#endif  // !_MSC_VER

db_new_mail_in::db_new_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_new_mail_in::InitAsDefaultInstance() {
}

db_new_mail_in::db_new_mail_in(const db_new_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_new_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_new_mail_in::~db_new_mail_in() {
  SharedDtor();
}

void db_new_mail_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_new_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_new_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_new_mail_in_descriptor_;
}

const db_new_mail_in& db_new_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_new_mail_in* db_new_mail_in::default_instance_ = NULL;

db_new_mail_in* db_new_mail_in::New() const {
  return new db_new_mail_in;
}

void db_new_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_new_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_new_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_new_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_new_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_new_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_new_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_new_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_new_mail_in::MergeFrom(const db_new_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_new_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_new_mail_in::CopyFrom(const db_new_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_new_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_new_mail_in::Swap(db_new_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_new_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_new_mail_in_descriptor_;
  metadata.reflection = db_new_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_new_mail_out::kHasnewFieldNumber;
#endif  // !_MSC_VER

db_new_mail_out::db_new_mail_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_new_mail_out::InitAsDefaultInstance() {
}

db_new_mail_out::db_new_mail_out(const db_new_mail_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_new_mail_out::SharedCtor() {
  _cached_size_ = 0;
  hasnew_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_new_mail_out::~db_new_mail_out() {
  SharedDtor();
}

void db_new_mail_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_new_mail_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_new_mail_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_new_mail_out_descriptor_;
}

const db_new_mail_out& db_new_mail_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_new_mail_out* db_new_mail_out::default_instance_ = NULL;

db_new_mail_out* db_new_mail_out::New() const {
  return new db_new_mail_out;
}

void db_new_mail_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasnew_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_new_mail_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hasnew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasnew_)));
          set_has_hasnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_new_mail_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hasnew = 1;
  if (has_hasnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hasnew(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_new_mail_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hasnew = 1;
  if (has_hasnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hasnew(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_new_mail_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hasnew = 1;
    if (has_hasnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasnew());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_new_mail_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_new_mail_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_new_mail_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_new_mail_out::MergeFrom(const db_new_mail_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasnew()) {
      set_hasnew(from.hasnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_new_mail_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_new_mail_out::CopyFrom(const db_new_mail_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_new_mail_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_new_mail_out::Swap(db_new_mail_out* other) {
  if (other != this) {
    std::swap(hasnew_, other->hasnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_new_mail_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_new_mail_out_descriptor_;
  metadata.reflection = db_new_mail_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_attach::kIdFieldNumber;
const int db_attach::kNumFieldNumber;
#endif  // !_MSC_VER

db_attach::db_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_attach::InitAsDefaultInstance() {
}

db_attach::db_attach(const db_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_attach::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_attach::~db_attach() {
  SharedDtor();
}

void db_attach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_attach_descriptor_;
}

const db_attach& db_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_attach* db_attach::default_instance_ = NULL;

db_attach* db_attach::New() const {
  return new db_attach;
}

void db_attach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_attach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_attach::MergeFrom(const db_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_attach::CopyFrom(const db_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_attach::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_attach::Swap(db_attach* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_attach_descriptor_;
  metadata.reflection = db_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_in::kZoneIdFieldNumber;
const int db_add_mail_in::kTitleFieldNumber;
const int db_add_mail_in::kFromFieldNumber;
const int db_add_mail_in::kContentFieldNumber;
const int db_add_mail_in::kItemsFieldNumber;
#endif  // !_MSC_VER

db_add_mail_in::db_add_mail_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_in::InitAsDefaultInstance() {
}

db_add_mail_in::db_add_mail_in(const db_add_mail_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_in::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_in::~db_add_mail_in() {
  SharedDtor();
}

void db_add_mail_in::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_add_mail_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_in_descriptor_;
}

const db_add_mail_in& db_add_mail_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_in* db_add_mail_in::default_instance_ = NULL;

db_add_mail_in* db_add_mail_in::New() const {
  return new db_add_mail_in;
}

void db_add_mail_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }
      
      // required bytes from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_attach items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }
  
  // required bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }
  
  // required bytes from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->from(), output);
  }
  
  // required bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }
  
  // repeated .rudb.db_attach items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }
  
  // required bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }
  
  // required bytes from = 3;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->from(), target);
  }
  
  // required bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }
  
  // repeated .rudb.db_attach items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bytes from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }
    
    // required bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  // repeated .rudb.db_attach items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_in::MergeFrom(const db_add_mail_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_in::CopyFrom(const db_add_mail_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_add_mail_in::Swap(db_add_mail_in* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(title_, other->title_);
    std::swap(from_, other->from_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_in_descriptor_;
  metadata.reflection = db_add_mail_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_by_switch_in::kTitleFieldNumber;
const int db_add_mail_by_switch_in::kFromFieldNumber;
const int db_add_mail_by_switch_in::kContentFieldNumber;
const int db_add_mail_by_switch_in::kItemsFieldNumber;
const int db_add_mail_by_switch_in::kServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_mail_by_switch_in::db_add_mail_by_switch_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_by_switch_in::InitAsDefaultInstance() {
}

db_add_mail_by_switch_in::db_add_mail_by_switch_in(const db_add_mail_by_switch_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_by_switch_in::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_by_switch_in::~db_add_mail_by_switch_in() {
  SharedDtor();
}

void db_add_mail_by_switch_in::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_add_mail_by_switch_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_by_switch_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_by_switch_in_descriptor_;
}

const db_add_mail_by_switch_in& db_add_mail_by_switch_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_by_switch_in* db_add_mail_by_switch_in::default_instance_ = NULL;

db_add_mail_by_switch_in* db_add_mail_by_switch_in::New() const {
  return new db_add_mail_by_switch_in;
}

void db_add_mail_by_switch_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    server_id_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_by_switch_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }
      
      // required bytes from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }
      
      // repeated .rudb.db_attach items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_by_switch_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->title(), output);
  }
  
  // required bytes from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->from(), output);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }
  
  // repeated .rudb.db_attach items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }
  
  // required uint32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_by_switch_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes title = 1;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->title(), target);
  }
  
  // required bytes from = 2;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->from(), target);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }
  
  // repeated .rudb.db_attach items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }
  
  // required uint32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_by_switch_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // required bytes from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }
    
    // required bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // required uint32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  // repeated .rudb.db_attach items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_by_switch_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_by_switch_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_by_switch_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_by_switch_in::MergeFrom(const db_add_mail_by_switch_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_by_switch_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_by_switch_in::CopyFrom(const db_add_mail_by_switch_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_by_switch_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_add_mail_by_switch_in::Swap(db_add_mail_by_switch_in* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(from_, other->from_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_by_switch_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_by_switch_in_descriptor_;
  metadata.reflection = db_add_mail_by_switch_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_by_switch_out::kMailIdFieldNumber;
const int db_add_mail_by_switch_out::kServerIdFieldNumber;
#endif  // !_MSC_VER

db_add_mail_by_switch_out::db_add_mail_by_switch_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_by_switch_out::InitAsDefaultInstance() {
}

db_add_mail_by_switch_out::db_add_mail_by_switch_out(const db_add_mail_by_switch_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_by_switch_out::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_by_switch_out::~db_add_mail_by_switch_out() {
  SharedDtor();
}

void db_add_mail_by_switch_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_mail_by_switch_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_by_switch_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_by_switch_out_descriptor_;
}

const db_add_mail_by_switch_out& db_add_mail_by_switch_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_by_switch_out* db_add_mail_by_switch_out::default_instance_ = NULL;

db_add_mail_by_switch_out* db_add_mail_by_switch_out::New() const {
  return new db_add_mail_by_switch_out;
}

void db_add_mail_by_switch_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_by_switch_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // required uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_by_switch_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mail_id(), output);
  }
  
  // required uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_by_switch_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mail_id(), target);
  }
  
  // required uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_by_switch_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }
    
    // required uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_by_switch_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_by_switch_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_by_switch_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_by_switch_out::MergeFrom(const db_add_mail_by_switch_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_by_switch_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_by_switch_out::CopyFrom(const db_add_mail_by_switch_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_by_switch_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void db_add_mail_by_switch_out::Swap(db_add_mail_by_switch_out* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_by_switch_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_by_switch_out_descriptor_;
  metadata.reflection = db_add_mail_by_switch_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_rel::kUseridFieldNumber;
const int mail_rel::kRegTimeFieldNumber;
const int mail_rel::kZoneIdFieldNumber;
const int mail_rel::kMailIdFieldNumber;
const int mail_rel::kHasattachFieldNumber;
#endif  // !_MSC_VER

mail_rel::mail_rel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_rel::InitAsDefaultInstance() {
}

mail_rel::mail_rel(const mail_rel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_rel::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_time_ = 0u;
  zone_id_ = 0u;
  mail_id_ = 0u;
  hasattach_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_rel::~mail_rel() {
  SharedDtor();
}

void mail_rel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_rel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_rel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_rel_descriptor_;
}

const mail_rel& mail_rel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

mail_rel* mail_rel::default_instance_ = NULL;

mail_rel* mail_rel::New() const {
  return new mail_rel;
}

void mail_rel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_time_ = 0u;
    zone_id_ = 0u;
    mail_id_ = 0u;
    hasattach_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_rel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_time;
        break;
      }
      
      // required uint32 reg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_id;
        break;
      }
      
      // required uint32 mail_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasattach;
        break;
      }
      
      // required uint32 hasattach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasattach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_rel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_time(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 mail_id = 4;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_id(), output);
  }
  
  // required uint32 hasattach = 5;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hasattach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_rel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_time = 2;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_time(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 mail_id = 4;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mail_id(), target);
  }
  
  // required uint32 hasattach = 5;
  if (has_hasattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hasattach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_rel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_time = 2;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_time());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 mail_id = 4;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }
    
    // required uint32 hasattach = 5;
    if (has_hasattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasattach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_rel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_rel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_rel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_rel::MergeFrom(const mail_rel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_rel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_rel::CopyFrom(const mail_rel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_rel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void mail_rel::Swap(mail_rel* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_rel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_rel_descriptor_;
  metadata.reflection = mail_rel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_mail_rel_by_switch_in::kInfoFieldNumber;
#endif  // !_MSC_VER

db_add_mail_rel_by_switch_in::db_add_mail_rel_by_switch_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_rel_by_switch_in::InitAsDefaultInstance() {
}

db_add_mail_rel_by_switch_in::db_add_mail_rel_by_switch_in(const db_add_mail_rel_by_switch_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_rel_by_switch_in::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_rel_by_switch_in::~db_add_mail_rel_by_switch_in() {
  SharedDtor();
}

void db_add_mail_rel_by_switch_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_mail_rel_by_switch_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_rel_by_switch_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_rel_by_switch_in_descriptor_;
}

const db_add_mail_rel_by_switch_in& db_add_mail_rel_by_switch_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_rel_by_switch_in* db_add_mail_rel_by_switch_in::default_instance_ = NULL;

db_add_mail_rel_by_switch_in* db_add_mail_rel_by_switch_in::New() const {
  return new db_add_mail_rel_by_switch_in;
}

void db_add_mail_rel_by_switch_in::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_rel_by_switch_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rudb.mail_rel info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_mail_rel_by_switch_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rudb.mail_rel info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_rel_by_switch_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rudb.mail_rel info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_rel_by_switch_in::ByteSize() const {
  int total_size = 0;
  
  // repeated .rudb.mail_rel info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_rel_by_switch_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_rel_by_switch_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_rel_by_switch_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_rel_by_switch_in::MergeFrom(const db_add_mail_rel_by_switch_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_rel_by_switch_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_rel_by_switch_in::CopyFrom(const db_add_mail_rel_by_switch_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_rel_by_switch_in::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void db_add_mail_rel_by_switch_in::Swap(db_add_mail_rel_by_switch_in* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_rel_by_switch_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_rel_by_switch_in_descriptor_;
  metadata.reflection = db_add_mail_rel_by_switch_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

db_add_mail_rel_flush_in::db_add_mail_rel_flush_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_mail_rel_flush_in::InitAsDefaultInstance() {
}

db_add_mail_rel_flush_in::db_add_mail_rel_flush_in(const db_add_mail_rel_flush_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_mail_rel_flush_in::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_mail_rel_flush_in::~db_add_mail_rel_flush_in() {
  SharedDtor();
}

void db_add_mail_rel_flush_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_mail_rel_flush_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_mail_rel_flush_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_mail_rel_flush_in_descriptor_;
}

const db_add_mail_rel_flush_in& db_add_mail_rel_flush_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_mail_rel_flush_in* db_add_mail_rel_flush_in::default_instance_ = NULL;

db_add_mail_rel_flush_in* db_add_mail_rel_flush_in::New() const {
  return new db_add_mail_rel_flush_in;
}

void db_add_mail_rel_flush_in::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_mail_rel_flush_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void db_add_mail_rel_flush_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_mail_rel_flush_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_mail_rel_flush_in::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_mail_rel_flush_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_mail_rel_flush_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_mail_rel_flush_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_mail_rel_flush_in::MergeFrom(const db_add_mail_rel_flush_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_mail_rel_flush_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_mail_rel_flush_in::CopyFrom(const db_add_mail_rel_flush_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_mail_rel_flush_in::IsInitialized() const {
  
  return true;
}

void db_add_mail_rel_flush_in::Swap(db_add_mail_rel_flush_in* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_mail_rel_flush_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_mail_rel_flush_in_descriptor_;
  metadata.reflection = db_add_mail_rel_flush_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_diamond_by_switch_in::kUseridFieldNumber;
const int db_add_diamond_by_switch_in::kRegTmFieldNumber;
const int db_add_diamond_by_switch_in::kZoneIdFieldNumber;
const int db_add_diamond_by_switch_in::kAddDiamondNumFieldNumber;
const int db_add_diamond_by_switch_in::kOrderIndexFieldNumber;
#endif  // !_MSC_VER

db_add_diamond_by_switch_in::db_add_diamond_by_switch_in()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_diamond_by_switch_in::InitAsDefaultInstance() {
}

db_add_diamond_by_switch_in::db_add_diamond_by_switch_in(const db_add_diamond_by_switch_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_diamond_by_switch_in::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  reg_tm_ = 0u;
  zone_id_ = 0u;
  add_diamond_num_ = 0u;
  order_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_diamond_by_switch_in::~db_add_diamond_by_switch_in() {
  SharedDtor();
}

void db_add_diamond_by_switch_in::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_diamond_by_switch_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_diamond_by_switch_in_descriptor_;
}

const db_add_diamond_by_switch_in& db_add_diamond_by_switch_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_diamond_by_switch_in* db_add_diamond_by_switch_in::default_instance_ = NULL;

db_add_diamond_by_switch_in* db_add_diamond_by_switch_in::New() const {
  return new db_add_diamond_by_switch_in;
}

void db_add_diamond_by_switch_in::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    reg_tm_ = 0u;
    zone_id_ = 0u;
    add_diamond_num_ = 0u;
    order_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_diamond_by_switch_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reg_tm;
        break;
      }
      
      // required uint32 reg_tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reg_tm_)));
          set_has_reg_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }
      
      // required uint32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_diamond_num;
        break;
      }
      
      // required uint32 add_diamond_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_diamond_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_diamond_num_)));
          set_has_add_diamond_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_order_index;
        break;
      }
      
      // required uint64 order_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_index_)));
          set_has_order_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_diamond_by_switch_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reg_tm(), output);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }
  
  // required uint32 add_diamond_num = 4;
  if (has_add_diamond_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_diamond_num(), output);
  }
  
  // required uint64 order_index = 5;
  if (has_order_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->order_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_diamond_by_switch_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }
  
  // required uint32 reg_tm = 2;
  if (has_reg_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reg_tm(), target);
  }
  
  // required uint32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }
  
  // required uint32 add_diamond_num = 4;
  if (has_add_diamond_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_diamond_num(), target);
  }
  
  // required uint64 order_index = 5;
  if (has_order_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->order_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_diamond_by_switch_in::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint32 reg_tm = 2;
    if (has_reg_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reg_tm());
    }
    
    // required uint32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }
    
    // required uint32 add_diamond_num = 4;
    if (has_add_diamond_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_diamond_num());
    }
    
    // required uint64 order_index = 5;
    if (has_order_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_diamond_by_switch_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_diamond_by_switch_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_diamond_by_switch_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_diamond_by_switch_in::MergeFrom(const db_add_diamond_by_switch_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_reg_tm()) {
      set_reg_tm(from.reg_tm());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_add_diamond_num()) {
      set_add_diamond_num(from.add_diamond_num());
    }
    if (from.has_order_index()) {
      set_order_index(from.order_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_diamond_by_switch_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_diamond_by_switch_in::CopyFrom(const db_add_diamond_by_switch_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_diamond_by_switch_in::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void db_add_diamond_by_switch_in::Swap(db_add_diamond_by_switch_in* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(reg_tm_, other->reg_tm_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(add_diamond_num_, other->add_diamond_num_);
    std::swap(order_index_, other->order_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_diamond_by_switch_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_diamond_by_switch_in_descriptor_;
  metadata.reflection = db_add_diamond_by_switch_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_add_diamond_by_switch_out::kOrderIndexFieldNumber;
#endif  // !_MSC_VER

db_add_diamond_by_switch_out::db_add_diamond_by_switch_out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_add_diamond_by_switch_out::InitAsDefaultInstance() {
}

db_add_diamond_by_switch_out::db_add_diamond_by_switch_out(const db_add_diamond_by_switch_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_add_diamond_by_switch_out::SharedCtor() {
  _cached_size_ = 0;
  order_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_add_diamond_by_switch_out::~db_add_diamond_by_switch_out() {
  SharedDtor();
}

void db_add_diamond_by_switch_out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_add_diamond_by_switch_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_add_diamond_by_switch_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_add_diamond_by_switch_out_descriptor_;
}

const db_add_diamond_by_switch_out& db_add_diamond_by_switch_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();  return *default_instance_;
}

db_add_diamond_by_switch_out* db_add_diamond_by_switch_out::default_instance_ = NULL;

db_add_diamond_by_switch_out* db_add_diamond_by_switch_out::New() const {
  return new db_add_diamond_by_switch_out;
}

void db_add_diamond_by_switch_out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_add_diamond_by_switch_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 order_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_index_)));
          set_has_order_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_add_diamond_by_switch_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 order_index = 1;
  if (has_order_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_add_diamond_by_switch_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 order_index = 1;
  if (has_order_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_add_diamond_by_switch_out::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 order_index = 1;
    if (has_order_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_add_diamond_by_switch_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_add_diamond_by_switch_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_add_diamond_by_switch_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_add_diamond_by_switch_out::MergeFrom(const db_add_diamond_by_switch_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_index()) {
      set_order_index(from.order_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_add_diamond_by_switch_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_add_diamond_by_switch_out::CopyFrom(const db_add_diamond_by_switch_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_add_diamond_by_switch_out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void db_add_diamond_by_switch_out::Swap(db_add_diamond_by_switch_out* other) {
  if (other != this) {
    std::swap(order_index_, other->order_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_add_diamond_by_switch_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_add_diamond_by_switch_out_descriptor_;
  metadata.reflection = db_add_diamond_by_switch_out_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rudb

// @@protoc_insertion_point(global_scope)
