// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rudb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2eproto();
void protobuf_AssignDesc_db_2eproto();
void protobuf_ShutdownFile_db_2eproto();

class db_msgheader_t;
class db_player_pvai_info_t;
class db_player_info_t;
class db_crtrole_in;
class db_crtrole_out;
class db_get_role_list_in;
class db_get_role_list_out;
class db_get_role_list_by_gm_in;
class db_get_role_list_by_gm_out;
class db_login_in;
class db_login_out;
class db_del_role_in;
class db_levelup_in;
class db_backpack_query_in;
class db_equip_hole;
class db_packpos;
class db_backpack_query_out;
class db_backpack_add_in;
class db_backpack_update_in;
class db_backpack_del_in;
class db_backpack_move_in;
class db_instance_info;
class db_instance_query_in;
class db_instance_query_out;
class db_instance_modify_in;
class db_task_query_in;
class db_task_info;
class db_task_query_out;
class db_task_step_in;
class db_daily_task_info;
class db_query_daily_task_in;
class db_query_daily_task_out;
class db_replace_daily_task_in;
class db_del_daily_task_in;
class db_attribute_query_in;
class db_attribute_info;
class db_attribute_query_out;
class db_attribute_set_in;
class db_shared_attribute_query_in;
class db_shared_attribute_query_out;
class db_shared_attribute_set_in;
class db_skill_query_in;
class db_skill_query_out;
class db_skill_query_out_skill_info;
class db_skill_add_in;
class db_friend_query_in;
class db_query_id_by_name_in;
class db_query_id_by_name_out;
class show_info;
class db_nearby_query_in;
class db_nearby_query_out;
class db_list_partner_in;
class db_list_partner_out;
class db_friend_query_out;
class db_friend_add_in;
class db_friend_del_in;
class db_dnd_query_in;
class db_dnd_query_out;
class db_dnd_add_in;
class db_dnd_del_in;
class db_ai_rank_info;
class db_ai_rank_log;
class db_ai_rank_log_one_log;
class db_ai_rank_add_in;
class db_ai_rank_add_out;
class db_ai_rank_query_in;
class db_ai_rank_query_out;
class db_ai_rank_exchange_in;
class db_ai_rank_range_in;
class db_ai_rank_range_out;
class db_ai_rank_log_in;
class db_update_pvai_basic_info_in;
class activity_step_t;
class activity_info_t;
class db_query_activity_list_in;
class db_query_activity_list_out;
class db_replace_activity_info_in;
class db_delete_activity_info_in;
class mail_item_attachment_t;
class db_mail_info_t;
class db_add_new_mail_in;
class db_add_new_mail_out;
class db_query_mail_infos_in;
class db_query_mail_infos_out;
class db_query_players_info_in;
class db_query_players_info_out;
class db_query_userinfo_by_name_zone_in;
class db_query_userinfo_by_name_zone_out;
class db_query_mail_list_in;
class db_mail_list;
class db_query_mail_list_out;
class db_query_mail_in;
class db_query_mail_out;
class db_get_attach_in;
class db_get_attach_out;
class db_get_attach_success_in;
class db_del_mail_in;
class db_new_mail_in;
class db_new_mail_out;
class db_attach;
class db_add_mail_in;
class db_add_mail_by_switch_in;
class db_add_mail_by_switch_out;
class mail_rel;
class db_add_mail_rel_by_switch_in;
class db_add_mail_rel_flush_in;
class db_add_diamond_by_switch_in;
class db_add_diamond_by_switch_out;

// ===================================================================

class db_msgheader_t : public ::google::protobuf::Message {
 public:
  db_msgheader_t();
  virtual ~db_msgheader_t();
  
  db_msgheader_t(const db_msgheader_t& from);
  
  inline db_msgheader_t& operator=(const db_msgheader_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_msgheader_t& default_instance();
  
  void Swap(db_msgheader_t* other);
  
  // implements Message ----------------------------------------------
  
  db_msgheader_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_msgheader_t& from);
  void MergeFrom(const db_msgheader_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes msg_name = 1;
  inline bool has_msg_name() const;
  inline void clear_msg_name();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msg_name() const;
  inline void set_msg_name(const ::std::string& value);
  inline void set_msg_name(const char* value);
  inline void set_msg_name(const void* value, size_t size);
  inline ::std::string* mutable_msg_name();
  inline ::std::string* release_msg_name();
  
  // required uint32 target_uid = 2;
  inline bool has_target_uid() const;
  inline void clear_target_uid();
  static const int kTargetUidFieldNumber = 2;
  inline ::google::protobuf::uint32 target_uid() const;
  inline void set_target_uid(::google::protobuf::uint32 value);
  
  // required uint32 errcode = 3;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);
  
  // optional uint32 reg_time = 4;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // optional uint32 src_uid = 5;
  inline bool has_src_uid() const;
  inline void clear_src_uid();
  static const int kSrcUidFieldNumber = 5;
  inline ::google::protobuf::uint32 src_uid() const;
  inline void set_src_uid(::google::protobuf::uint32 value);
  
  // optional uint32 login_id = 6;
  inline bool has_login_id() const;
  inline void clear_login_id();
  static const int kLoginIdFieldNumber = 6;
  inline ::google::protobuf::uint32 login_id() const;
  inline void set_login_id(::google::protobuf::uint32 value);
  
  // optional bytes aux = 7;
  inline bool has_aux() const;
  inline void clear_aux();
  static const int kAuxFieldNumber = 7;
  inline const ::std::string& aux() const;
  inline void set_aux(const ::std::string& value);
  inline void set_aux(const char* value);
  inline void set_aux(const void* value, size_t size);
  inline ::std::string* mutable_aux();
  inline ::std::string* release_aux();
  
  // optional uint32 trans_id = 8;
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 8;
  inline ::google::protobuf::uint32 trans_id() const;
  inline void set_trans_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_msgheader_t)
 private:
  inline void set_has_msg_name();
  inline void clear_has_msg_name();
  inline void set_has_target_uid();
  inline void clear_has_target_uid();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_src_uid();
  inline void clear_has_src_uid();
  inline void set_has_login_id();
  inline void clear_has_login_id();
  inline void set_has_aux();
  inline void clear_has_aux();
  inline void set_has_trans_id();
  inline void clear_has_trans_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_name_;
  ::google::protobuf::uint32 target_uid_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 src_uid_;
  ::std::string* aux_;
  ::google::protobuf::uint32 login_id_;
  ::google::protobuf::uint32 trans_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_msgheader_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_pvai_info_t : public ::google::protobuf::Message {
 public:
  db_player_pvai_info_t();
  virtual ~db_player_pvai_info_t();
  
  db_player_pvai_info_t(const db_player_pvai_info_t& from);
  
  inline db_player_pvai_info_t& operator=(const db_player_pvai_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_pvai_info_t& default_instance();
  
  void Swap(db_player_pvai_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_pvai_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_pvai_info_t& from);
  void MergeFrom(const db_player_pvai_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // required uint32 accu_coin = 2;
  inline bool has_accu_coin() const;
  inline void clear_accu_coin();
  static const int kAccuCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 accu_coin() const;
  inline void set_accu_coin(::google::protobuf::uint32 value);
  
  // required uint32 accu_reputation = 3;
  inline bool has_accu_reputation() const;
  inline void clear_accu_reputation();
  static const int kAccuReputationFieldNumber = 3;
  inline ::google::protobuf::uint32 accu_reputation() const;
  inline void set_accu_reputation(::google::protobuf::uint32 value);
  
  // required uint32 accu_times = 4;
  inline bool has_accu_times() const;
  inline void clear_accu_times();
  static const int kAccuTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 accu_times() const;
  inline void set_accu_times(::google::protobuf::uint32 value);
  
  // required uint32 accu_end_time = 5;
  inline bool has_accu_end_time() const;
  inline void clear_accu_end_time();
  static const int kAccuEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 accu_end_time() const;
  inline void set_accu_end_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_pvai_info_t)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_accu_coin();
  inline void clear_has_accu_coin();
  inline void set_has_accu_reputation();
  inline void clear_has_accu_reputation();
  inline void set_has_accu_times();
  inline void clear_has_accu_times();
  inline void set_has_accu_end_time();
  inline void clear_has_accu_end_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 accu_coin_;
  ::google::protobuf::uint32 accu_reputation_;
  ::google::protobuf::uint32 accu_times_;
  ::google::protobuf::uint32 accu_end_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_pvai_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_player_info_t : public ::google::protobuf::Message {
 public:
  db_player_info_t();
  virtual ~db_player_info_t();
  
  db_player_info_t(const db_player_info_t& from);
  
  inline db_player_info_t& operator=(const db_player_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_player_info_t& default_instance();
  
  void Swap(db_player_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_player_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_player_info_t& from);
  void MergeFrom(const db_player_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 gender = 6;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 6;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // optional uint32 zone_id = 7;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 7;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // optional uint32 vip_lv = 8;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 8;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);
  
  // optional .rudb.db_player_pvai_info_t pvai_info = 9;
  inline bool has_pvai_info() const;
  inline void clear_pvai_info();
  static const int kPvaiInfoFieldNumber = 9;
  inline const ::rudb::db_player_pvai_info_t& pvai_info() const;
  inline ::rudb::db_player_pvai_info_t* mutable_pvai_info();
  inline ::rudb::db_player_pvai_info_t* release_pvai_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_player_info_t)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();
  inline void set_has_pvai_info();
  inline void clear_has_pvai_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 level_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 vip_lv_;
  ::rudb::db_player_pvai_info_t* pvai_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_player_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_crtrole_in : public ::google::protobuf::Message {
 public:
  db_crtrole_in();
  virtual ~db_crtrole_in();
  
  db_crtrole_in(const db_crtrole_in& from);
  
  inline db_crtrole_in& operator=(const db_crtrole_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_crtrole_in& default_instance();
  
  void Swap(db_crtrole_in* other);
  
  // implements Message ----------------------------------------------
  
  db_crtrole_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_crtrole_in& from);
  void MergeFrom(const db_crtrole_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_crtrole_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_crtrole_in* default_instance_;
};
// -------------------------------------------------------------------

class db_crtrole_out : public ::google::protobuf::Message {
 public:
  db_crtrole_out();
  virtual ~db_crtrole_out();
  
  db_crtrole_out(const db_crtrole_out& from);
  
  inline db_crtrole_out& operator=(const db_crtrole_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_crtrole_out& default_instance();
  
  void Swap(db_crtrole_out* other);
  
  // implements Message ----------------------------------------------
  
  db_crtrole_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_crtrole_out& from);
  void MergeFrom(const db_crtrole_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 regtime = 1;
  inline bool has_regtime() const;
  inline void clear_regtime();
  static const int kRegtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 regtime() const;
  inline void set_regtime(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_crtrole_out)
 private:
  inline void set_has_regtime();
  inline void clear_has_regtime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 regtime_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_crtrole_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_in : public ::google::protobuf::Message {
 public:
  db_get_role_list_in();
  virtual ~db_get_role_list_in();
  
  db_get_role_list_in(const db_get_role_list_in& from);
  
  inline db_get_role_list_in& operator=(const db_get_role_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_in& default_instance();
  
  void Swap(db_get_role_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_in& from);
  void MergeFrom(const db_get_role_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_out : public ::google::protobuf::Message {
 public:
  db_get_role_list_out();
  virtual ~db_get_role_list_out();
  
  db_get_role_list_out(const db_get_role_list_out& from);
  
  inline db_get_role_list_out& operator=(const db_get_role_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_out& default_instance();
  
  void Swap(db_get_role_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_out& from);
  void MergeFrom(const db_get_role_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::rudb::db_player_info_t& roles(int index) const;
  inline ::rudb::db_player_info_t* mutable_roles(int index);
  inline ::rudb::db_player_info_t* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > roles_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_gm_in : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_gm_in();
  virtual ~db_get_role_list_by_gm_in();
  
  db_get_role_list_by_gm_in(const db_get_role_list_by_gm_in& from);
  
  inline db_get_role_list_by_gm_in& operator=(const db_get_role_list_by_gm_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_gm_in& default_instance();
  
  void Swap(db_get_role_list_by_gm_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_gm_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_gm_in& from);
  void MergeFrom(const db_get_role_list_by_gm_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_gm_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_gm_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_role_list_by_gm_out : public ::google::protobuf::Message {
 public:
  db_get_role_list_by_gm_out();
  virtual ~db_get_role_list_by_gm_out();
  
  db_get_role_list_by_gm_out(const db_get_role_list_by_gm_out& from);
  
  inline db_get_role_list_by_gm_out& operator=(const db_get_role_list_by_gm_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_role_list_by_gm_out& default_instance();
  
  void Swap(db_get_role_list_by_gm_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_role_list_by_gm_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_role_list_by_gm_out& from);
  void MergeFrom(const db_get_role_list_by_gm_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::rudb::db_player_info_t& roles(int index) const;
  inline ::rudb::db_player_info_t* mutable_roles(int index);
  inline ::rudb::db_player_info_t* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_role_list_by_gm_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > roles_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_role_list_by_gm_out* default_instance_;
};
// -------------------------------------------------------------------

class db_login_in : public ::google::protobuf::Message {
 public:
  db_login_in();
  virtual ~db_login_in();
  
  db_login_in(const db_login_in& from);
  
  inline db_login_in& operator=(const db_login_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_login_in& default_instance();
  
  void Swap(db_login_in* other);
  
  // implements Message ----------------------------------------------
  
  db_login_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_login_in& from);
  void MergeFrom(const db_login_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_login_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_login_in* default_instance_;
};
// -------------------------------------------------------------------

class db_login_out : public ::google::protobuf::Message {
 public:
  db_login_out();
  virtual ~db_login_out();
  
  db_login_out(const db_login_out& from);
  
  inline db_login_out& operator=(const db_login_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_login_out& default_instance();
  
  void Swap(db_login_out* other);
  
  // implements Message ----------------------------------------------
  
  db_login_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_login_out& from);
  void MergeFrom(const db_login_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 regtime = 2;
  inline bool has_regtime() const;
  inline void clear_regtime();
  static const int kRegtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 regtime() const;
  inline void set_regtime(::google::protobuf::uint32 value);
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);
  
  // required uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // required uint32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // required uint32 last_login_time = 7;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_login_out)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_regtime();
  inline void clear_has_regtime();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 regtime_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 last_login_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_login_out* default_instance_;
};
// -------------------------------------------------------------------

class db_del_role_in : public ::google::protobuf::Message {
 public:
  db_del_role_in();
  virtual ~db_del_role_in();
  
  db_del_role_in(const db_del_role_in& from);
  
  inline db_del_role_in& operator=(const db_del_role_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_role_in& default_instance();
  
  void Swap(db_del_role_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_role_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_role_in& from);
  void MergeFrom(const db_del_role_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_role_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_role_in* default_instance_;
};
// -------------------------------------------------------------------

class db_levelup_in : public ::google::protobuf::Message {
 public:
  db_levelup_in();
  virtual ~db_levelup_in();
  
  db_levelup_in(const db_levelup_in& from);
  
  inline db_levelup_in& operator=(const db_levelup_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_levelup_in& default_instance();
  
  void Swap(db_levelup_in* other);
  
  // implements Message ----------------------------------------------
  
  db_levelup_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_levelup_in& from);
  void MergeFrom(const db_levelup_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_levelup_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_levelup_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_query_in : public ::google::protobuf::Message {
 public:
  db_backpack_query_in();
  virtual ~db_backpack_query_in();
  
  db_backpack_query_in(const db_backpack_query_in& from);
  
  inline db_backpack_query_in& operator=(const db_backpack_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_query_in& default_instance();
  
  void Swap(db_backpack_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_query_in& from);
  void MergeFrom(const db_backpack_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_hole : public ::google::protobuf::Message {
 public:
  db_equip_hole();
  virtual ~db_equip_hole();
  
  db_equip_hole(const db_equip_hole& from);
  
  inline db_equip_hole& operator=(const db_equip_hole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_hole& default_instance();
  
  void Swap(db_equip_hole* other);
  
  // implements Message ----------------------------------------------
  
  db_equip_hole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_hole& from);
  void MergeFrom(const db_equip_hole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hole_index = 1;
  inline bool has_hole_index() const;
  inline void clear_hole_index();
  static const int kHoleIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 hole_index() const;
  inline void set_hole_index(::google::protobuf::uint32 value);
  
  // required uint32 item_gem_id = 2;
  inline bool has_item_gem_id() const;
  inline void clear_item_gem_id();
  static const int kItemGemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_gem_id() const;
  inline void set_item_gem_id(::google::protobuf::uint32 value);
  
  // required uint32 attr_key = 3;
  inline bool has_attr_key() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 3;
  inline ::google::protobuf::uint32 attr_key() const;
  inline void set_attr_key(::google::protobuf::uint32 value);
  
  // required uint32 attr_value = 4;
  inline bool has_attr_value() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 4;
  inline ::google::protobuf::uint32 attr_value() const;
  inline void set_attr_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_equip_hole)
 private:
  inline void set_has_hole_index();
  inline void clear_has_hole_index();
  inline void set_has_item_gem_id();
  inline void clear_has_item_gem_id();
  inline void set_has_attr_key();
  inline void clear_has_attr_key();
  inline void set_has_attr_value();
  inline void clear_has_attr_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hole_index_;
  ::google::protobuf::uint32 item_gem_id_;
  ::google::protobuf::uint32 attr_key_;
  ::google::protobuf::uint32 attr_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_equip_hole* default_instance_;
};
// -------------------------------------------------------------------

class db_packpos : public ::google::protobuf::Message {
 public:
  db_packpos();
  virtual ~db_packpos();
  
  db_packpos(const db_packpos& from);
  
  inline db_packpos& operator=(const db_packpos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_packpos& default_instance();
  
  void Swap(db_packpos* other);
  
  // implements Message ----------------------------------------------
  
  db_packpos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_packpos& from);
  void MergeFrom(const db_packpos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);
  
  // required uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);
  
  // required uint32 item_level = 3;
  inline bool has_item_level() const;
  inline void clear_item_level();
  static const int kItemLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 item_level() const;
  inline void set_item_level(::google::protobuf::uint32 value);
  
  // required uint32 item_num = 4;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 4;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);
  
  // optional uint32 hole1 = 9;
  inline bool has_hole1() const;
  inline void clear_hole1();
  static const int kHole1FieldNumber = 9;
  inline ::google::protobuf::uint32 hole1() const;
  inline void set_hole1(::google::protobuf::uint32 value);
  
  // optional uint32 hole2 = 6;
  inline bool has_hole2() const;
  inline void clear_hole2();
  static const int kHole2FieldNumber = 6;
  inline ::google::protobuf::uint32 hole2() const;
  inline void set_hole2(::google::protobuf::uint32 value);
  
  // optional uint32 hole3 = 7;
  inline bool has_hole3() const;
  inline void clear_hole3();
  static const int kHole3FieldNumber = 7;
  inline ::google::protobuf::uint32 hole3() const;
  inline void set_hole3(::google::protobuf::uint32 value);
  
  // optional uint32 hole4 = 8;
  inline bool has_hole4() const;
  inline void clear_hole4();
  static const int kHole4FieldNumber = 8;
  inline ::google::protobuf::uint32 hole4() const;
  inline void set_hole4(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_equip_hole equip_holes = 5;
  inline int equip_holes_size() const;
  inline void clear_equip_holes();
  static const int kEquipHolesFieldNumber = 5;
  inline const ::rudb::db_equip_hole& equip_holes(int index) const;
  inline ::rudb::db_equip_hole* mutable_equip_holes(int index);
  inline ::rudb::db_equip_hole* add_equip_holes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >&
      equip_holes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >*
      mutable_equip_holes();
  
  // @@protoc_insertion_point(class_scope:rudb.db_packpos)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_level();
  inline void clear_has_item_level();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_hole1();
  inline void clear_has_hole1();
  inline void set_has_hole2();
  inline void clear_has_hole2();
  inline void set_has_hole3();
  inline void clear_has_hole3();
  inline void set_has_hole4();
  inline void clear_has_hole4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_level_;
  ::google::protobuf::uint32 item_num_;
  ::google::protobuf::uint32 hole1_;
  ::google::protobuf::uint32 hole2_;
  ::google::protobuf::uint32 hole3_;
  ::google::protobuf::uint32 hole4_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole > equip_holes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_packpos* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_query_out : public ::google::protobuf::Message {
 public:
  db_backpack_query_out();
  virtual ~db_backpack_query_out();
  
  db_backpack_query_out(const db_backpack_query_out& from);
  
  inline db_backpack_query_out& operator=(const db_backpack_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_query_out& default_instance();
  
  void Swap(db_backpack_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_query_out& from);
  void MergeFrom(const db_backpack_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_packpos items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_add_in : public ::google::protobuf::Message {
 public:
  db_backpack_add_in();
  virtual ~db_backpack_add_in();
  
  db_backpack_add_in(const db_backpack_add_in& from);
  
  inline db_backpack_add_in& operator=(const db_backpack_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_add_in& default_instance();
  
  void Swap(db_backpack_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_add_in& from);
  void MergeFrom(const db_backpack_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_packpos items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_update_in : public ::google::protobuf::Message {
 public:
  db_backpack_update_in();
  virtual ~db_backpack_update_in();
  
  db_backpack_update_in(const db_backpack_update_in& from);
  
  inline db_backpack_update_in& operator=(const db_backpack_update_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_update_in& default_instance();
  
  void Swap(db_backpack_update_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_update_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_update_in& from);
  void MergeFrom(const db_backpack_update_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_packpos items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_update_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_update_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_del_in : public ::google::protobuf::Message {
 public:
  db_backpack_del_in();
  virtual ~db_backpack_del_in();
  
  db_backpack_del_in(const db_backpack_del_in& from);
  
  inline db_backpack_del_in& operator=(const db_backpack_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_del_in& default_instance();
  
  void Swap(db_backpack_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_del_in& from);
  void MergeFrom(const db_backpack_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_packpos items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::rudb::db_packpos& items(int index) const;
  inline ::rudb::db_packpos* mutable_items(int index);
  inline ::rudb::db_packpos* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos > items_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_backpack_move_in : public ::google::protobuf::Message {
 public:
  db_backpack_move_in();
  virtual ~db_backpack_move_in();
  
  db_backpack_move_in(const db_backpack_move_in& from);
  
  inline db_backpack_move_in& operator=(const db_backpack_move_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_backpack_move_in& default_instance();
  
  void Swap(db_backpack_move_in* other);
  
  // implements Message ----------------------------------------------
  
  db_backpack_move_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_backpack_move_in& from);
  void MergeFrom(const db_backpack_move_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 pos_from = 2;
  inline bool has_pos_from() const;
  inline void clear_pos_from();
  static const int kPosFromFieldNumber = 2;
  inline ::google::protobuf::uint32 pos_from() const;
  inline void set_pos_from(::google::protobuf::uint32 value);
  
  // required uint32 pos_to = 3;
  inline bool has_pos_to() const;
  inline void clear_pos_to();
  static const int kPosToFieldNumber = 3;
  inline ::google::protobuf::uint32 pos_to() const;
  inline void set_pos_to(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_backpack_move_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_pos_from();
  inline void clear_has_pos_from();
  inline void set_has_pos_to();
  inline void clear_has_pos_to();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 pos_from_;
  ::google::protobuf::uint32 pos_to_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_backpack_move_in* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_info : public ::google::protobuf::Message {
 public:
  db_instance_info();
  virtual ~db_instance_info();
  
  db_instance_info(const db_instance_info& from);
  
  inline db_instance_info& operator=(const db_instance_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_info& default_instance();
  
  void Swap(db_instance_info* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_info& from);
  void MergeFrom(const db_instance_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_id() const;
  inline void set_instance_id(::google::protobuf::uint32 value);
  
  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);
  
  // required uint32 can_enter_flag = 3;
  inline bool has_can_enter_flag() const;
  inline void clear_can_enter_flag();
  static const int kCanEnterFlagFieldNumber = 3;
  inline ::google::protobuf::uint32 can_enter_flag() const;
  inline void set_can_enter_flag(::google::protobuf::uint32 value);
  
  // required uint32 refresh_times = 4;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 5;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 5;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_info)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_can_enter_flag();
  inline void clear_has_can_enter_flag();
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 instance_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 can_enter_flag_;
  ::google::protobuf::uint32 refresh_times_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_info* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_query_in : public ::google::protobuf::Message {
 public:
  db_instance_query_in();
  virtual ~db_instance_query_in();
  
  db_instance_query_in(const db_instance_query_in& from);
  
  inline db_instance_query_in& operator=(const db_instance_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_query_in& default_instance();
  
  void Swap(db_instance_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_query_in& from);
  void MergeFrom(const db_instance_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_query_out : public ::google::protobuf::Message {
 public:
  db_instance_query_out();
  virtual ~db_instance_query_out();
  
  db_instance_query_out(const db_instance_query_out& from);
  
  inline db_instance_query_out& operator=(const db_instance_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_query_out& default_instance();
  
  void Swap(db_instance_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_query_out& from);
  void MergeFrom(const db_instance_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_instance_info instances = 1;
  inline int instances_size() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 1;
  inline const ::rudb::db_instance_info& instances(int index) const;
  inline ::rudb::db_instance_info* mutable_instances(int index);
  inline ::rudb::db_instance_info* add_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
      instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
      mutable_instances();
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info > instances_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_instance_modify_in : public ::google::protobuf::Message {
 public:
  db_instance_modify_in();
  virtual ~db_instance_modify_in();
  
  db_instance_modify_in(const db_instance_modify_in& from);
  
  inline db_instance_modify_in& operator=(const db_instance_modify_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_instance_modify_in& default_instance();
  
  void Swap(db_instance_modify_in* other);
  
  // implements Message ----------------------------------------------
  
  db_instance_modify_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_instance_modify_in& from);
  void MergeFrom(const db_instance_modify_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_instance_info instances = 2;
  inline int instances_size() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 2;
  inline const ::rudb::db_instance_info& instances(int index) const;
  inline ::rudb::db_instance_info* mutable_instances(int index);
  inline ::rudb::db_instance_info* add_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
      instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
      mutable_instances();
  
  // @@protoc_insertion_point(class_scope:rudb.db_instance_modify_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info > instances_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_instance_modify_in* default_instance_;
};
// -------------------------------------------------------------------

class db_task_query_in : public ::google::protobuf::Message {
 public:
  db_task_query_in();
  virtual ~db_task_query_in();
  
  db_task_query_in(const db_task_query_in& from);
  
  inline db_task_query_in& operator=(const db_task_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_query_in& default_instance();
  
  void Swap(db_task_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_task_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_query_in& from);
  void MergeFrom(const db_task_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_task_info : public ::google::protobuf::Message {
 public:
  db_task_info();
  virtual ~db_task_info();
  
  db_task_info(const db_task_info& from);
  
  inline db_task_info& operator=(const db_task_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_info& default_instance();
  
  void Swap(db_task_info* other);
  
  // implements Message ----------------------------------------------
  
  db_task_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_info& from);
  void MergeFrom(const db_task_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);
  
  // required uint32 step_id = 2;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 2;
  inline ::google::protobuf::uint32 step_id() const;
  inline void set_step_id(::google::protobuf::uint32 value);
  
  // required uint32 step_rate = 3;
  inline bool has_step_rate() const;
  inline void clear_step_rate();
  static const int kStepRateFieldNumber = 3;
  inline ::google::protobuf::uint32 step_rate() const;
  inline void set_step_rate(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_info)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_step_rate();
  inline void clear_has_step_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 step_id_;
  ::google::protobuf::uint32 step_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_info* default_instance_;
};
// -------------------------------------------------------------------

class db_task_query_out : public ::google::protobuf::Message {
 public:
  db_task_query_out();
  virtual ~db_task_query_out();
  
  db_task_query_out(const db_task_query_out& from);
  
  inline db_task_query_out& operator=(const db_task_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_query_out& default_instance();
  
  void Swap(db_task_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_task_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_query_out& from);
  void MergeFrom(const db_task_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_task_info tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::rudb::db_task_info& tasks(int index) const;
  inline ::rudb::db_task_info* mutable_tasks(int index);
  inline ::rudb::db_task_info* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >*
      mutable_tasks();
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info > tasks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_task_step_in : public ::google::protobuf::Message {
 public:
  db_task_step_in();
  virtual ~db_task_step_in();
  
  db_task_step_in(const db_task_step_in& from);
  
  inline db_task_step_in& operator=(const db_task_step_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_task_step_in& default_instance();
  
  void Swap(db_task_step_in* other);
  
  // implements Message ----------------------------------------------
  
  db_task_step_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_task_step_in& from);
  void MergeFrom(const db_task_step_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);
  
  // required uint32 step_id = 3;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 3;
  inline ::google::protobuf::uint32 step_id() const;
  inline void set_step_id(::google::protobuf::uint32 value);
  
  // required uint32 step_rate = 4;
  inline bool has_step_rate() const;
  inline void clear_step_rate();
  static const int kStepRateFieldNumber = 4;
  inline ::google::protobuf::uint32 step_rate() const;
  inline void set_step_rate(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_task_step_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_step_rate();
  inline void clear_has_step_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 step_id_;
  ::google::protobuf::uint32 step_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_task_step_in* default_instance_;
};
// -------------------------------------------------------------------

class db_daily_task_info : public ::google::protobuf::Message {
 public:
  db_daily_task_info();
  virtual ~db_daily_task_info();
  
  db_daily_task_info(const db_daily_task_info& from);
  
  inline db_daily_task_info& operator=(const db_daily_task_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_daily_task_info& default_instance();
  
  void Swap(db_daily_task_info* other);
  
  // implements Message ----------------------------------------------
  
  db_daily_task_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_daily_task_info& from);
  void MergeFrom(const db_daily_task_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 daily_task_id = 1;
  inline bool has_daily_task_id() const;
  inline void clear_daily_task_id();
  static const int kDailyTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 daily_task_id() const;
  inline void set_daily_task_id(::google::protobuf::uint32 value);
  
  // required int32 daily_task_status = 2;
  inline bool has_daily_task_status() const;
  inline void clear_daily_task_status();
  static const int kDailyTaskStatusFieldNumber = 2;
  inline ::google::protobuf::int32 daily_task_status() const;
  inline void set_daily_task_status(::google::protobuf::int32 value);
  
  // required uint32 dead_tm = 3;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_daily_task_info)
 private:
  inline void set_has_daily_task_id();
  inline void clear_has_daily_task_id();
  inline void set_has_daily_task_status();
  inline void clear_has_daily_task_status();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 daily_task_id_;
  ::google::protobuf::int32 daily_task_status_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_daily_task_info* default_instance_;
};
// -------------------------------------------------------------------

class db_query_daily_task_in : public ::google::protobuf::Message {
 public:
  db_query_daily_task_in();
  virtual ~db_query_daily_task_in();
  
  db_query_daily_task_in(const db_query_daily_task_in& from);
  
  inline db_query_daily_task_in& operator=(const db_query_daily_task_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_daily_task_in& default_instance();
  
  void Swap(db_query_daily_task_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_daily_task_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_daily_task_in& from);
  void MergeFrom(const db_query_daily_task_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_daily_task_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_daily_task_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_daily_task_out : public ::google::protobuf::Message {
 public:
  db_query_daily_task_out();
  virtual ~db_query_daily_task_out();
  
  db_query_daily_task_out(const db_query_daily_task_out& from);
  
  inline db_query_daily_task_out& operator=(const db_query_daily_task_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_daily_task_out& default_instance();
  
  void Swap(db_query_daily_task_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_daily_task_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_daily_task_out& from);
  void MergeFrom(const db_query_daily_task_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_daily_task_info daily_tasks = 1;
  inline int daily_tasks_size() const;
  inline void clear_daily_tasks();
  static const int kDailyTasksFieldNumber = 1;
  inline const ::rudb::db_daily_task_info& daily_tasks(int index) const;
  inline ::rudb::db_daily_task_info* mutable_daily_tasks(int index);
  inline ::rudb::db_daily_task_info* add_daily_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
      daily_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
      mutable_daily_tasks();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_daily_task_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info > daily_tasks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_daily_task_out* default_instance_;
};
// -------------------------------------------------------------------

class db_replace_daily_task_in : public ::google::protobuf::Message {
 public:
  db_replace_daily_task_in();
  virtual ~db_replace_daily_task_in();
  
  db_replace_daily_task_in(const db_replace_daily_task_in& from);
  
  inline db_replace_daily_task_in& operator=(const db_replace_daily_task_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_replace_daily_task_in& default_instance();
  
  void Swap(db_replace_daily_task_in* other);
  
  // implements Message ----------------------------------------------
  
  db_replace_daily_task_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_replace_daily_task_in& from);
  void MergeFrom(const db_replace_daily_task_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_daily_task_info daily_tasks = 2;
  inline int daily_tasks_size() const;
  inline void clear_daily_tasks();
  static const int kDailyTasksFieldNumber = 2;
  inline const ::rudb::db_daily_task_info& daily_tasks(int index) const;
  inline ::rudb::db_daily_task_info* mutable_daily_tasks(int index);
  inline ::rudb::db_daily_task_info* add_daily_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
      daily_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
      mutable_daily_tasks();
  
  // @@protoc_insertion_point(class_scope:rudb.db_replace_daily_task_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info > daily_tasks_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_replace_daily_task_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_daily_task_in : public ::google::protobuf::Message {
 public:
  db_del_daily_task_in();
  virtual ~db_del_daily_task_in();
  
  db_del_daily_task_in(const db_del_daily_task_in& from);
  
  inline db_del_daily_task_in& operator=(const db_del_daily_task_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_daily_task_in& default_instance();
  
  void Swap(db_del_daily_task_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_daily_task_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_daily_task_in& from);
  void MergeFrom(const db_del_daily_task_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_daily_task_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_daily_task_in* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_query_in : public ::google::protobuf::Message {
 public:
  db_attribute_query_in();
  virtual ~db_attribute_query_in();
  
  db_attribute_query_in(const db_attribute_query_in& from);
  
  inline db_attribute_query_in& operator=(const db_attribute_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_query_in& default_instance();
  
  void Swap(db_attribute_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_query_in& from);
  void MergeFrom(const db_attribute_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_info : public ::google::protobuf::Message {
 public:
  db_attribute_info();
  virtual ~db_attribute_info();
  
  db_attribute_info(const db_attribute_info& from);
  
  inline db_attribute_info& operator=(const db_attribute_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_info& default_instance();
  
  void Swap(db_attribute_info* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_info& from);
  void MergeFrom(const db_attribute_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 attribute_id = 1;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 2;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 3;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_info)
 private:
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_info* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_query_out : public ::google::protobuf::Message {
 public:
  db_attribute_query_out();
  virtual ~db_attribute_query_out();
  
  db_attribute_query_out(const db_attribute_query_out& from);
  
  inline db_attribute_query_out& operator=(const db_attribute_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_query_out& default_instance();
  
  void Swap(db_attribute_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_query_out& from);
  void MergeFrom(const db_attribute_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_attribute_info attributes = 1;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  inline const ::rudb::db_attribute_info& attributes(int index) const;
  inline ::rudb::db_attribute_info* mutable_attributes(int index);
  inline ::rudb::db_attribute_info* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
      mutable_attributes();
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info > attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_attribute_set_in : public ::google::protobuf::Message {
 public:
  db_attribute_set_in();
  virtual ~db_attribute_set_in();
  
  db_attribute_set_in(const db_attribute_set_in& from);
  
  inline db_attribute_set_in& operator=(const db_attribute_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attribute_set_in& default_instance();
  
  void Swap(db_attribute_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_attribute_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attribute_set_in& from);
  void MergeFrom(const db_attribute_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 2;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 3;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 3;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attribute_set_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attribute_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_shared_attribute_query_in : public ::google::protobuf::Message {
 public:
  db_shared_attribute_query_in();
  virtual ~db_shared_attribute_query_in();
  
  db_shared_attribute_query_in(const db_shared_attribute_query_in& from);
  
  inline db_shared_attribute_query_in& operator=(const db_shared_attribute_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shared_attribute_query_in& default_instance();
  
  void Swap(db_shared_attribute_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_shared_attribute_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shared_attribute_query_in& from);
  void MergeFrom(const db_shared_attribute_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_shared_attribute_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shared_attribute_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_shared_attribute_query_out : public ::google::protobuf::Message {
 public:
  db_shared_attribute_query_out();
  virtual ~db_shared_attribute_query_out();
  
  db_shared_attribute_query_out(const db_shared_attribute_query_out& from);
  
  inline db_shared_attribute_query_out& operator=(const db_shared_attribute_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shared_attribute_query_out& default_instance();
  
  void Swap(db_shared_attribute_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_shared_attribute_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shared_attribute_query_out& from);
  void MergeFrom(const db_shared_attribute_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_attribute_info shared_attributes = 1;
  inline int shared_attributes_size() const;
  inline void clear_shared_attributes();
  static const int kSharedAttributesFieldNumber = 1;
  inline const ::rudb::db_attribute_info& shared_attributes(int index) const;
  inline ::rudb::db_attribute_info* mutable_shared_attributes(int index);
  inline ::rudb::db_attribute_info* add_shared_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
      shared_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
      mutable_shared_attributes();
  
  // @@protoc_insertion_point(class_scope:rudb.db_shared_attribute_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info > shared_attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shared_attribute_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_shared_attribute_set_in : public ::google::protobuf::Message {
 public:
  db_shared_attribute_set_in();
  virtual ~db_shared_attribute_set_in();
  
  db_shared_attribute_set_in(const db_shared_attribute_set_in& from);
  
  inline db_shared_attribute_set_in& operator=(const db_shared_attribute_set_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shared_attribute_set_in& default_instance();
  
  void Swap(db_shared_attribute_set_in* other);
  
  // implements Message ----------------------------------------------
  
  db_shared_attribute_set_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shared_attribute_set_in& from);
  void MergeFrom(const db_shared_attribute_set_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_id = 2;
  inline bool has_attribute_id() const;
  inline void clear_attribute_id();
  static const int kAttributeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute_id() const;
  inline void set_attribute_id(::google::protobuf::uint32 value);
  
  // required uint32 attribute_value = 3;
  inline bool has_attribute_value() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 3;
  inline ::google::protobuf::uint32 attribute_value() const;
  inline void set_attribute_value(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_shared_attribute_set_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_attribute_id();
  inline void clear_has_attribute_id();
  inline void set_has_attribute_value();
  inline void clear_has_attribute_value();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 attribute_id_;
  ::google::protobuf::uint32 attribute_value_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_shared_attribute_set_in* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_query_in : public ::google::protobuf::Message {
 public:
  db_skill_query_in();
  virtual ~db_skill_query_in();
  
  db_skill_query_in(const db_skill_query_in& from);
  
  inline db_skill_query_in& operator=(const db_skill_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_query_in& default_instance();
  
  void Swap(db_skill_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_query_in& from);
  void MergeFrom(const db_skill_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_query_out_skill_info : public ::google::protobuf::Message {
 public:
  db_skill_query_out_skill_info();
  virtual ~db_skill_query_out_skill_info();
  
  db_skill_query_out_skill_info(const db_skill_query_out_skill_info& from);
  
  inline db_skill_query_out_skill_info& operator=(const db_skill_query_out_skill_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_query_out_skill_info& default_instance();
  
  void Swap(db_skill_query_out_skill_info* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_query_out_skill_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_query_out_skill_info& from);
  void MergeFrom(const db_skill_query_out_skill_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_level = 2;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_query_out.skill_info)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 skill_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_query_out_skill_info* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_query_out : public ::google::protobuf::Message {
 public:
  db_skill_query_out();
  virtual ~db_skill_query_out();
  
  db_skill_query_out(const db_skill_query_out& from);
  
  inline db_skill_query_out& operator=(const db_skill_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_query_out& default_instance();
  
  void Swap(db_skill_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_query_out& from);
  void MergeFrom(const db_skill_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_skill_query_out_skill_info skill_info;
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_skill_query_out.skill_info skills = 1;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 1;
  inline const ::rudb::db_skill_query_out_skill_info& skills(int index) const;
  inline ::rudb::db_skill_query_out_skill_info* mutable_skills(int index);
  inline ::rudb::db_skill_query_out_skill_info* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >*
      mutable_skills();
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info > skills_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_skill_add_in : public ::google::protobuf::Message {
 public:
  db_skill_add_in();
  virtual ~db_skill_add_in();
  
  db_skill_add_in(const db_skill_add_in& from);
  
  inline db_skill_add_in& operator=(const db_skill_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skill_add_in& default_instance();
  
  void Swap(db_skill_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_skill_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skill_add_in& from);
  void MergeFrom(const db_skill_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);
  
  // required uint32 skill_level = 3;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_skill_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 skill_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_skill_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_query_in : public ::google::protobuf::Message {
 public:
  db_friend_query_in();
  virtual ~db_friend_query_in();
  
  db_friend_query_in(const db_friend_query_in& from);
  
  inline db_friend_query_in& operator=(const db_friend_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_query_in& default_instance();
  
  void Swap(db_friend_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_query_in& from);
  void MergeFrom(const db_friend_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_id_by_name_in : public ::google::protobuf::Message {
 public:
  db_query_id_by_name_in();
  virtual ~db_query_id_by_name_in();
  
  db_query_id_by_name_in(const db_query_id_by_name_in& from);
  
  inline db_query_id_by_name_in& operator=(const db_query_id_by_name_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_id_by_name_in& default_instance();
  
  void Swap(db_query_id_by_name_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_id_by_name_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_id_by_name_in& from);
  void MergeFrom(const db_query_id_by_name_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_id_by_name_in)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_id_by_name_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_id_by_name_out : public ::google::protobuf::Message {
 public:
  db_query_id_by_name_out();
  virtual ~db_query_id_by_name_out();
  
  db_query_id_by_name_out(const db_query_id_by_name_out& from);
  
  inline db_query_id_by_name_out& operator=(const db_query_id_by_name_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_id_by_name_out& default_instance();
  
  void Swap(db_query_id_by_name_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_id_by_name_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_id_by_name_out& from);
  void MergeFrom(const db_query_id_by_name_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // optional uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_id_by_name_out)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_id_by_name_out* default_instance_;
};
// -------------------------------------------------------------------

class show_info : public ::google::protobuf::Message {
 public:
  show_info();
  virtual ~show_info();
  
  show_info(const show_info& from);
  
  inline show_info& operator=(const show_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const show_info& default_instance();
  
  void Swap(show_info* other);
  
  // implements Message ----------------------------------------------
  
  show_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const show_info& from);
  void MergeFrom(const show_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);
  
  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 prestige = 6;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 6;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);
  
  // required uint32 pvai_rank = 7;
  inline bool has_pvai_rank() const;
  inline void clear_pvai_rank();
  static const int kPvaiRankFieldNumber = 7;
  inline ::google::protobuf::uint32 pvai_rank() const;
  inline void set_pvai_rank(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.show_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_pvai_rank();
  inline void clear_has_pvai_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 pvai_rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static show_info* default_instance_;
};
// -------------------------------------------------------------------

class db_nearby_query_in : public ::google::protobuf::Message {
 public:
  db_nearby_query_in();
  virtual ~db_nearby_query_in();
  
  db_nearby_query_in(const db_nearby_query_in& from);
  
  inline db_nearby_query_in& operator=(const db_nearby_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_nearby_query_in& default_instance();
  
  void Swap(db_nearby_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_nearby_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_nearby_query_in& from);
  void MergeFrom(const db_nearby_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::rudb::db_player_info_t& info(int index) const;
  inline ::rudb::db_player_info_t* mutable_info(int index);
  inline ::rudb::db_player_info_t* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_nearby_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > info_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_nearby_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_nearby_query_out : public ::google::protobuf::Message {
 public:
  db_nearby_query_out();
  virtual ~db_nearby_query_out();
  
  db_nearby_query_out(const db_nearby_query_out& from);
  
  inline db_nearby_query_out& operator=(const db_nearby_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_nearby_query_out& default_instance();
  
  void Swap(db_nearby_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_nearby_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_nearby_query_out& from);
  void MergeFrom(const db_nearby_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.show_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::show_info& info(int index) const;
  inline ::rudb::show_info* mutable_info(int index);
  inline ::rudb::show_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_nearby_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::show_info > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_nearby_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_list_partner_in : public ::google::protobuf::Message {
 public:
  db_list_partner_in();
  virtual ~db_list_partner_in();
  
  db_list_partner_in(const db_list_partner_in& from);
  
  inline db_list_partner_in& operator=(const db_list_partner_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_partner_in& default_instance();
  
  void Swap(db_list_partner_in* other);
  
  // implements Message ----------------------------------------------
  
  db_list_partner_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_partner_in& from);
  void MergeFrom(const db_list_partner_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t partner = 2;
  inline int partner_size() const;
  inline void clear_partner();
  static const int kPartnerFieldNumber = 2;
  inline const ::rudb::db_player_info_t& partner(int index) const;
  inline ::rudb::db_player_info_t* mutable_partner(int index);
  inline ::rudb::db_player_info_t* add_partner();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      partner() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_partner();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_partner_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > partner_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_partner_in* default_instance_;
};
// -------------------------------------------------------------------

class db_list_partner_out : public ::google::protobuf::Message {
 public:
  db_list_partner_out();
  virtual ~db_list_partner_out();
  
  db_list_partner_out(const db_list_partner_out& from);
  
  inline db_list_partner_out& operator=(const db_list_partner_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_list_partner_out& default_instance();
  
  void Swap(db_list_partner_out* other);
  
  // implements Message ----------------------------------------------
  
  db_list_partner_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_list_partner_out& from);
  void MergeFrom(const db_list_partner_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.show_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::show_info& info(int index) const;
  inline ::rudb::show_info* mutable_info(int index);
  inline ::rudb::show_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_list_partner_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::show_info > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_list_partner_out* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_query_out : public ::google::protobuf::Message {
 public:
  db_friend_query_out();
  virtual ~db_friend_query_out();
  
  db_friend_query_out(const db_friend_query_out& from);
  
  inline db_friend_query_out& operator=(const db_friend_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_query_out& default_instance();
  
  void Swap(db_friend_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_query_out& from);
  void MergeFrom(const db_friend_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::rudb::db_player_info_t& friends(int index) const;
  inline ::rudb::db_player_info_t* mutable_friends(int index);
  inline ::rudb::db_player_info_t* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_friends();
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > friends_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_add_in : public ::google::protobuf::Message {
 public:
  db_friend_add_in();
  virtual ~db_friend_add_in();
  
  db_friend_add_in(const db_friend_add_in& from);
  
  inline db_friend_add_in& operator=(const db_friend_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_add_in& default_instance();
  
  void Swap(db_friend_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_add_in& from);
  void MergeFrom(const db_friend_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 fuserid = 1;
  inline bool has_fuserid() const;
  inline void clear_fuserid();
  static const int kFuseridFieldNumber = 1;
  inline ::google::protobuf::uint64 fuserid() const;
  inline void set_fuserid(::google::protobuf::uint64 value);
  
  // required uint32 freg_tm = 2;
  inline bool has_freg_tm() const;
  inline void clear_freg_tm();
  static const int kFregTmFieldNumber = 2;
  inline ::google::protobuf::uint32 freg_tm() const;
  inline void set_freg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_add_in)
 private:
  inline void set_has_fuserid();
  inline void clear_has_fuserid();
  inline void set_has_freg_tm();
  inline void clear_has_freg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 fuserid_;
  ::google::protobuf::uint32 freg_tm_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_friend_del_in : public ::google::protobuf::Message {
 public:
  db_friend_del_in();
  virtual ~db_friend_del_in();
  
  db_friend_del_in(const db_friend_del_in& from);
  
  inline db_friend_del_in& operator=(const db_friend_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_friend_del_in& default_instance();
  
  void Swap(db_friend_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_friend_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_friend_del_in& from);
  void MergeFrom(const db_friend_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 fuserid = 2;
  inline bool has_fuserid() const;
  inline void clear_fuserid();
  static const int kFuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 fuserid() const;
  inline void set_fuserid(::google::protobuf::uint64 value);
  
  // required uint32 freg_tm = 3;
  inline bool has_freg_tm() const;
  inline void clear_freg_tm();
  static const int kFregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 freg_tm() const;
  inline void set_freg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_friend_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_fuserid();
  inline void clear_has_fuserid();
  inline void set_has_freg_tm();
  inline void clear_has_freg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 fuserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 freg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_friend_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_query_in : public ::google::protobuf::Message {
 public:
  db_dnd_query_in();
  virtual ~db_dnd_query_in();
  
  db_dnd_query_in(const db_dnd_query_in& from);
  
  inline db_dnd_query_in& operator=(const db_dnd_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_query_in& default_instance();
  
  void Swap(db_dnd_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_query_in& from);
  void MergeFrom(const db_dnd_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_query_out : public ::google::protobuf::Message {
 public:
  db_dnd_query_out();
  virtual ~db_dnd_query_out();
  
  db_dnd_query_out(const db_dnd_query_out& from);
  
  inline db_dnd_query_out& operator=(const db_dnd_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_query_out& default_instance();
  
  void Swap(db_dnd_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_query_out& from);
  void MergeFrom(const db_dnd_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_player_info_t dnds = 1;
  inline int dnds_size() const;
  inline void clear_dnds();
  static const int kDndsFieldNumber = 1;
  inline const ::rudb::db_player_info_t& dnds(int index) const;
  inline ::rudb::db_player_info_t* mutable_dnds(int index);
  inline ::rudb::db_player_info_t* add_dnds();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      dnds() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_dnds();
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_query_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > dnds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_add_in : public ::google::protobuf::Message {
 public:
  db_dnd_add_in();
  virtual ~db_dnd_add_in();
  
  db_dnd_add_in(const db_dnd_add_in& from);
  
  inline db_dnd_add_in& operator=(const db_dnd_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_add_in& default_instance();
  
  void Swap(db_dnd_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_add_in& from);
  void MergeFrom(const db_dnd_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 duserid = 2;
  inline bool has_duserid() const;
  inline void clear_duserid();
  static const int kDuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 duserid() const;
  inline void set_duserid(::google::protobuf::uint64 value);
  
  // required uint32 dreg_tm = 3;
  inline bool has_dreg_tm() const;
  inline void clear_dreg_tm();
  static const int kDregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dreg_tm() const;
  inline void set_dreg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_duserid();
  inline void clear_has_duserid();
  inline void set_has_dreg_tm();
  inline void clear_has_dreg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 duserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 dreg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_dnd_del_in : public ::google::protobuf::Message {
 public:
  db_dnd_del_in();
  virtual ~db_dnd_del_in();
  
  db_dnd_del_in(const db_dnd_del_in& from);
  
  inline db_dnd_del_in& operator=(const db_dnd_del_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_dnd_del_in& default_instance();
  
  void Swap(db_dnd_del_in* other);
  
  // implements Message ----------------------------------------------
  
  db_dnd_del_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_dnd_del_in& from);
  void MergeFrom(const db_dnd_del_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 duserid = 2;
  inline bool has_duserid() const;
  inline void clear_duserid();
  static const int kDuseridFieldNumber = 2;
  inline ::google::protobuf::uint64 duserid() const;
  inline void set_duserid(::google::protobuf::uint64 value);
  
  // required uint32 dreg_tm = 3;
  inline bool has_dreg_tm() const;
  inline void clear_dreg_tm();
  static const int kDregTmFieldNumber = 3;
  inline ::google::protobuf::uint32 dreg_tm() const;
  inline void set_dreg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_dnd_del_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_duserid();
  inline void clear_has_duserid();
  inline void set_has_dreg_tm();
  inline void clear_has_dreg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 duserid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 dreg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_dnd_del_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_info : public ::google::protobuf::Message {
 public:
  db_ai_rank_info();
  virtual ~db_ai_rank_info();
  
  db_ai_rank_info(const db_ai_rank_info& from);
  
  inline db_ai_rank_info& operator=(const db_ai_rank_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_info& default_instance();
  
  void Swap(db_ai_rank_info* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_info& from);
  void MergeFrom(const db_ai_rank_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_info)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_info* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_log_one_log : public ::google::protobuf::Message {
 public:
  db_ai_rank_log_one_log();
  virtual ~db_ai_rank_log_one_log();
  
  db_ai_rank_log_one_log(const db_ai_rank_log_one_log& from);
  
  inline db_ai_rank_log_one_log& operator=(const db_ai_rank_log_one_log& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_log_one_log& default_instance();
  
  void Swap(db_ai_rank_log_one_log* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_log_one_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_log_one_log& from);
  void MergeFrom(const db_ai_rank_log_one_log& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool direct = 2;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 2;
  inline bool direct() const;
  inline void set_direct(bool value);
  
  // required bool win = 3;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 3;
  inline bool win() const;
  inline void set_win(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_log.one_log)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_win();
  inline void clear_has_win();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  bool direct_;
  bool win_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_log_one_log* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_log : public ::google::protobuf::Message {
 public:
  db_ai_rank_log();
  virtual ~db_ai_rank_log();
  
  db_ai_rank_log(const db_ai_rank_log& from);
  
  inline db_ai_rank_log& operator=(const db_ai_rank_log& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_log& default_instance();
  
  void Swap(db_ai_rank_log* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_log& from);
  void MergeFrom(const db_ai_rank_log& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef db_ai_rank_log_one_log one_log;
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_ai_rank_log.one_log logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::rudb::db_ai_rank_log_one_log& logs(int index) const;
  inline ::rudb::db_ai_rank_log_one_log* mutable_logs(int index);
  inline ::rudb::db_ai_rank_log_one_log* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >*
      mutable_logs();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_log)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log > logs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_log* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_add_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_add_in();
  virtual ~db_ai_rank_add_in();
  
  db_ai_rank_add_in(const db_ai_rank_add_in& from);
  
  inline db_ai_rank_add_in& operator=(const db_ai_rank_add_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_add_in& default_instance();
  
  void Swap(db_ai_rank_add_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_add_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_add_in& from);
  void MergeFrom(const db_ai_rank_add_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 accu_coin = 2;
  inline bool has_accu_coin() const;
  inline void clear_accu_coin();
  static const int kAccuCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 accu_coin() const;
  inline void set_accu_coin(::google::protobuf::uint32 value);
  
  // required uint32 accu_reputation = 3;
  inline bool has_accu_reputation() const;
  inline void clear_accu_reputation();
  static const int kAccuReputationFieldNumber = 3;
  inline ::google::protobuf::uint32 accu_reputation() const;
  inline void set_accu_reputation(::google::protobuf::uint32 value);
  
  // required uint32 accu_end_time = 4;
  inline bool has_accu_end_time() const;
  inline void clear_accu_end_time();
  static const int kAccuEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 accu_end_time() const;
  inline void set_accu_end_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_add_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_accu_coin();
  inline void clear_has_accu_coin();
  inline void set_has_accu_reputation();
  inline void clear_has_accu_reputation();
  inline void set_has_accu_end_time();
  inline void clear_has_accu_end_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 accu_coin_;
  ::google::protobuf::uint32 accu_reputation_;
  ::google::protobuf::uint32 accu_end_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_add_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_add_out : public ::google::protobuf::Message {
 public:
  db_ai_rank_add_out();
  virtual ~db_ai_rank_add_out();
  
  db_ai_rank_add_out(const db_ai_rank_add_out& from);
  
  inline db_ai_rank_add_out& operator=(const db_ai_rank_add_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_add_out& default_instance();
  
  void Swap(db_ai_rank_add_out* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_add_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_add_out& from);
  void MergeFrom(const db_ai_rank_add_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .rudb.db_player_pvai_info_t pvai_info = 1;
  inline bool has_pvai_info() const;
  inline void clear_pvai_info();
  static const int kPvaiInfoFieldNumber = 1;
  inline const ::rudb::db_player_pvai_info_t& pvai_info() const;
  inline ::rudb::db_player_pvai_info_t* mutable_pvai_info();
  inline ::rudb::db_player_pvai_info_t* release_pvai_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_add_out)
 private:
  inline void set_has_pvai_info();
  inline void clear_has_pvai_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_player_pvai_info_t* pvai_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_add_out* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_query_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_query_in();
  virtual ~db_ai_rank_query_in();
  
  db_ai_rank_query_in(const db_ai_rank_query_in& from);
  
  inline db_ai_rank_query_in& operator=(const db_ai_rank_query_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_query_in& default_instance();
  
  void Swap(db_ai_rank_query_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_query_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_query_in& from);
  void MergeFrom(const db_ai_rank_query_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_query_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_length();
  inline void clear_has_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_query_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_query_out : public ::google::protobuf::Message {
 public:
  db_ai_rank_query_out();
  virtual ~db_ai_rank_query_out();
  
  db_ai_rank_query_out(const db_ai_rank_query_out& from);
  
  inline db_ai_rank_query_out& operator=(const db_ai_rank_query_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_query_out& default_instance();
  
  void Swap(db_ai_rank_query_out* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_query_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_query_out& from);
  void MergeFrom(const db_ai_rank_query_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_ai_rank_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::db_ai_rank_info& infos(int index) const;
  inline ::rudb::db_ai_rank_info* mutable_infos(int index);
  inline ::rudb::db_ai_rank_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
      mutable_infos();
  
  // required .rudb.db_ai_rank_log log = 3;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::rudb::db_ai_rank_log& log() const;
  inline ::rudb::db_ai_rank_log* mutable_log();
  inline ::rudb::db_ai_rank_log* release_log();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_query_out)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_log();
  inline void clear_has_log();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info > infos_;
  ::rudb::db_ai_rank_log* log_;
  ::google::protobuf::uint32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_query_out* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_exchange_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_exchange_in();
  virtual ~db_ai_rank_exchange_in();
  
  db_ai_rank_exchange_in(const db_ai_rank_exchange_in& from);
  
  inline db_ai_rank_exchange_in& operator=(const db_ai_rank_exchange_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_exchange_in& default_instance();
  
  void Swap(db_ai_rank_exchange_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_exchange_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_exchange_in& from);
  void MergeFrom(const db_ai_rank_exchange_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 target_userid = 2;
  inline bool has_target_userid() const;
  inline void clear_target_userid();
  static const int kTargetUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 target_userid() const;
  inline void set_target_userid(::google::protobuf::uint64 value);
  
  // required uint32 target_reg_time = 3;
  inline bool has_target_reg_time() const;
  inline void clear_target_reg_time();
  static const int kTargetRegTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 target_reg_time() const;
  inline void set_target_reg_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_exchange_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_target_userid();
  inline void clear_has_target_userid();
  inline void set_has_target_reg_time();
  inline void clear_has_target_reg_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 target_userid_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 target_reg_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_exchange_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_range_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_range_in();
  virtual ~db_ai_rank_range_in();
  
  db_ai_rank_range_in(const db_ai_rank_range_in& from);
  
  inline db_ai_rank_range_in& operator=(const db_ai_rank_range_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_range_in& default_instance();
  
  void Swap(db_ai_rank_range_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_range_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_range_in& from);
  void MergeFrom(const db_ai_rank_range_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);
  
  // required uint32 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_range_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_range_in* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_range_out : public ::google::protobuf::Message {
 public:
  db_ai_rank_range_out();
  virtual ~db_ai_rank_range_out();
  
  db_ai_rank_range_out(const db_ai_rank_range_out& from);
  
  inline db_ai_rank_range_out& operator=(const db_ai_rank_range_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_range_out& default_instance();
  
  void Swap(db_ai_rank_range_out* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_range_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_range_out& from);
  void MergeFrom(const db_ai_rank_range_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_ai_rank_info infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::db_ai_rank_info& infos(int index) const;
  inline ::rudb::db_ai_rank_info* mutable_infos(int index);
  inline ::rudb::db_ai_rank_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_range_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_range_out* default_instance_;
};
// -------------------------------------------------------------------

class db_ai_rank_log_in : public ::google::protobuf::Message {
 public:
  db_ai_rank_log_in();
  virtual ~db_ai_rank_log_in();
  
  db_ai_rank_log_in(const db_ai_rank_log_in& from);
  
  inline db_ai_rank_log_in& operator=(const db_ai_rank_log_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_ai_rank_log_in& default_instance();
  
  void Swap(db_ai_rank_log_in* other);
  
  // implements Message ----------------------------------------------
  
  db_ai_rank_log_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_ai_rank_log_in& from);
  void MergeFrom(const db_ai_rank_log_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint64 target_userid = 3;
  inline bool has_target_userid() const;
  inline void clear_target_userid();
  static const int kTargetUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 target_userid() const;
  inline void set_target_userid(::google::protobuf::uint64 value);
  
  // required uint32 target_reg_time = 4;
  inline bool has_target_reg_time() const;
  inline void clear_target_reg_time();
  static const int kTargetRegTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 target_reg_time() const;
  inline void set_target_reg_time(::google::protobuf::uint32 value);
  
  // required bytes target_name = 5;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 5;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const void* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  
  // required bool win = 6;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 6;
  inline bool win() const;
  inline void set_win(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_ai_rank_log_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_target_userid();
  inline void clear_has_target_userid();
  inline void set_has_target_reg_time();
  inline void clear_has_target_reg_time();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_win();
  inline void clear_has_win();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 target_reg_time_;
  ::google::protobuf::uint64 target_userid_;
  ::std::string* target_name_;
  bool win_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_ai_rank_log_in* default_instance_;
};
// -------------------------------------------------------------------

class db_update_pvai_basic_info_in : public ::google::protobuf::Message {
 public:
  db_update_pvai_basic_info_in();
  virtual ~db_update_pvai_basic_info_in();
  
  db_update_pvai_basic_info_in(const db_update_pvai_basic_info_in& from);
  
  inline db_update_pvai_basic_info_in& operator=(const db_update_pvai_basic_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_pvai_basic_info_in& default_instance();
  
  void Swap(db_update_pvai_basic_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_update_pvai_basic_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_pvai_basic_info_in& from);
  void MergeFrom(const db_update_pvai_basic_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.db_player_info_t infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::db_player_info_t& infos(int index) const;
  inline ::rudb::db_player_info_t* mutable_infos(int index);
  inline ::rudb::db_player_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_update_pvai_basic_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_update_pvai_basic_info_in* default_instance_;
};
// -------------------------------------------------------------------

class activity_step_t : public ::google::protobuf::Message {
 public:
  activity_step_t();
  virtual ~activity_step_t();
  
  activity_step_t(const activity_step_t& from);
  
  inline activity_step_t& operator=(const activity_step_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const activity_step_t& default_instance();
  
  void Swap(activity_step_t* other);
  
  // implements Message ----------------------------------------------
  
  activity_step_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const activity_step_t& from);
  void MergeFrom(const activity_step_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 step_type = 1;
  inline bool has_step_type() const;
  inline void clear_step_type();
  static const int kStepTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 step_type() const;
  inline void set_step_type(::google::protobuf::uint32 value);
  
  // required uint32 step_id = 2;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 2;
  inline ::google::protobuf::uint32 step_id() const;
  inline void set_step_id(::google::protobuf::uint32 value);
  
  // required uint32 step_value = 3;
  inline bool has_step_value() const;
  inline void clear_step_value();
  static const int kStepValueFieldNumber = 3;
  inline ::google::protobuf::uint32 step_value() const;
  inline void set_step_value(::google::protobuf::uint32 value);
  
  // required uint32 is_need_step = 4;
  inline bool has_is_need_step() const;
  inline void clear_is_need_step();
  static const int kIsNeedStepFieldNumber = 4;
  inline ::google::protobuf::uint32 is_need_step() const;
  inline void set_is_need_step(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.activity_step_t)
 private:
  inline void set_has_step_type();
  inline void clear_has_step_type();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_step_value();
  inline void clear_has_step_value();
  inline void set_has_is_need_step();
  inline void clear_has_is_need_step();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 step_type_;
  ::google::protobuf::uint32 step_id_;
  ::google::protobuf::uint32 step_value_;
  ::google::protobuf::uint32 is_need_step_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static activity_step_t* default_instance_;
};
// -------------------------------------------------------------------

class activity_info_t : public ::google::protobuf::Message {
 public:
  activity_info_t();
  virtual ~activity_info_t();
  
  activity_info_t(const activity_info_t& from);
  
  inline activity_info_t& operator=(const activity_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const activity_info_t& default_instance();
  
  void Swap(activity_info_t* other);
  
  // implements Message ----------------------------------------------
  
  activity_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const activity_info_t& from);
  void MergeFrom(const activity_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 activity_id() const;
  inline void set_activity_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.activity_step_t steps = 2;
  inline int steps_size() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 2;
  inline const ::rudb::activity_step_t& steps(int index) const;
  inline ::rudb::activity_step_t* mutable_steps(int index);
  inline ::rudb::activity_step_t* add_steps();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >&
      steps() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >*
      mutable_steps();
  
  // required uint32 revc_reward_times = 3;
  inline bool has_revc_reward_times() const;
  inline void clear_revc_reward_times();
  static const int kRevcRewardTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 revc_reward_times() const;
  inline void set_revc_reward_times(::google::protobuf::uint32 value);
  
  // required uint32 dead_tm = 4;
  inline bool has_dead_tm() const;
  inline void clear_dead_tm();
  static const int kDeadTmFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_tm() const;
  inline void set_dead_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.activity_info_t)
 private:
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_revc_reward_times();
  inline void clear_has_revc_reward_times();
  inline void set_has_dead_tm();
  inline void clear_has_dead_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t > steps_;
  ::google::protobuf::uint32 activity_id_;
  ::google::protobuf::uint32 revc_reward_times_;
  ::google::protobuf::uint32 dead_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static activity_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_query_activity_list_in : public ::google::protobuf::Message {
 public:
  db_query_activity_list_in();
  virtual ~db_query_activity_list_in();
  
  db_query_activity_list_in(const db_query_activity_list_in& from);
  
  inline db_query_activity_list_in& operator=(const db_query_activity_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_activity_list_in& default_instance();
  
  void Swap(db_query_activity_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_activity_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_activity_list_in& from);
  void MergeFrom(const db_query_activity_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_activity_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_activity_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_activity_list_out : public ::google::protobuf::Message {
 public:
  db_query_activity_list_out();
  virtual ~db_query_activity_list_out();
  
  db_query_activity_list_out(const db_query_activity_list_out& from);
  
  inline db_query_activity_list_out& operator=(const db_query_activity_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_activity_list_out& default_instance();
  
  void Swap(db_query_activity_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_activity_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_activity_list_out& from);
  void MergeFrom(const db_query_activity_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.activity_info_t infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::rudb::activity_info_t& infos(int index) const;
  inline ::rudb::activity_info_t* mutable_infos(int index);
  inline ::rudb::activity_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_activity_list_out)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_activity_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_replace_activity_info_in : public ::google::protobuf::Message {
 public:
  db_replace_activity_info_in();
  virtual ~db_replace_activity_info_in();
  
  db_replace_activity_info_in(const db_replace_activity_info_in& from);
  
  inline db_replace_activity_info_in& operator=(const db_replace_activity_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_replace_activity_info_in& default_instance();
  
  void Swap(db_replace_activity_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_replace_activity_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_replace_activity_info_in& from);
  void MergeFrom(const db_replace_activity_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated .rudb.activity_info_t infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::rudb::activity_info_t& infos(int index) const;
  inline ::rudb::activity_info_t* mutable_infos(int index);
  inline ::rudb::activity_info_t* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:rudb.db_replace_activity_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t > infos_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_replace_activity_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_delete_activity_info_in : public ::google::protobuf::Message {
 public:
  db_delete_activity_info_in();
  virtual ~db_delete_activity_info_in();
  
  db_delete_activity_info_in(const db_delete_activity_info_in& from);
  
  inline db_delete_activity_info_in& operator=(const db_delete_activity_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_delete_activity_info_in& default_instance();
  
  void Swap(db_delete_activity_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_delete_activity_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_delete_activity_info_in& from);
  void MergeFrom(const db_delete_activity_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated uint32 activity_ids = 2;
  inline int activity_ids_size() const;
  inline void clear_activity_ids();
  static const int kActivityIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 activity_ids(int index) const;
  inline void set_activity_ids(int index, ::google::protobuf::uint32 value);
  inline void add_activity_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activity_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activity_ids();
  
  // @@protoc_insertion_point(class_scope:rudb.db_delete_activity_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activity_ids_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_delete_activity_info_in* default_instance_;
};
// -------------------------------------------------------------------

class mail_item_attachment_t : public ::google::protobuf::Message {
 public:
  mail_item_attachment_t();
  virtual ~mail_item_attachment_t();
  
  mail_item_attachment_t(const mail_item_attachment_t& from);
  
  inline mail_item_attachment_t& operator=(const mail_item_attachment_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_item_attachment_t& default_instance();
  
  void Swap(mail_item_attachment_t* other);
  
  // implements Message ----------------------------------------------
  
  mail_item_attachment_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_item_attachment_t& from);
  void MergeFrom(const mail_item_attachment_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);
  
  // required uint32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.mail_item_attachment_t)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static mail_item_attachment_t* default_instance_;
};
// -------------------------------------------------------------------

class db_mail_info_t : public ::google::protobuf::Message {
 public:
  db_mail_info_t();
  virtual ~db_mail_info_t();
  
  db_mail_info_t(const db_mail_info_t& from);
  
  inline db_mail_info_t& operator=(const db_mail_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_mail_info_t& default_instance();
  
  void Swap(db_mail_info_t* other);
  
  // implements Message ----------------------------------------------
  
  db_mail_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_mail_info_t& from);
  void MergeFrom(const db_mail_info_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);
  
  // required bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bytes come_from = 3;
  inline bool has_come_from() const;
  inline void clear_come_from();
  static const int kComeFromFieldNumber = 3;
  inline const ::std::string& come_from() const;
  inline void set_come_from(const ::std::string& value);
  inline void set_come_from(const char* value);
  inline void set_come_from(const void* value, size_t size);
  inline ::std::string* mutable_come_from();
  inline ::std::string* release_come_from();
  
  // required bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated .rudb.mail_item_attachment_t items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::rudb::mail_item_attachment_t& items(int index) const;
  inline ::rudb::mail_item_attachment_t* mutable_items(int index);
  inline ::rudb::mail_item_attachment_t* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_mail_info_t)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_come_from();
  inline void clear_has_come_from();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 mail_id_;
  ::std::string* title_;
  ::std::string* come_from_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_mail_info_t* default_instance_;
};
// -------------------------------------------------------------------

class db_add_new_mail_in : public ::google::protobuf::Message {
 public:
  db_add_new_mail_in();
  virtual ~db_add_new_mail_in();
  
  db_add_new_mail_in(const db_add_new_mail_in& from);
  
  inline db_add_new_mail_in& operator=(const db_add_new_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_new_mail_in& default_instance();
  
  void Swap(db_add_new_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_new_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_new_mail_in& from);
  void MergeFrom(const db_add_new_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required .rudb.db_mail_info_t mail_info = 2;
  inline bool has_mail_info() const;
  inline void clear_mail_info();
  static const int kMailInfoFieldNumber = 2;
  inline const ::rudb::db_mail_info_t& mail_info() const;
  inline ::rudb::db_mail_info_t* mutable_mail_info();
  inline ::rudb::db_mail_info_t* release_mail_info();
  
  // optional uint32 gm_server_id = 3;
  inline bool has_gm_server_id() const;
  inline void clear_gm_server_id();
  static const int kGmServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gm_server_id() const;
  inline void set_gm_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_new_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_info();
  inline void clear_has_mail_info();
  inline void set_has_gm_server_id();
  inline void clear_has_gm_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rudb::db_mail_info_t* mail_info_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 gm_server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_new_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_new_mail_out : public ::google::protobuf::Message {
 public:
  db_add_new_mail_out();
  virtual ~db_add_new_mail_out();
  
  db_add_new_mail_out(const db_add_new_mail_out& from);
  
  inline db_add_new_mail_out& operator=(const db_add_new_mail_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_new_mail_out& default_instance();
  
  void Swap(db_add_new_mail_out* other);
  
  // implements Message ----------------------------------------------
  
  db_add_new_mail_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_new_mail_out& from);
  void MergeFrom(const db_add_new_mail_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint64 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint64 value);
  
  // optional uint32 gm_server_id = 3;
  inline bool has_gm_server_id() const;
  inline void clear_gm_server_id();
  static const int kGmServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gm_server_id() const;
  inline void set_gm_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_new_mail_out)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_gm_server_id();
  inline void clear_has_gm_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 mail_id_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 gm_server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_new_mail_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_infos_in : public ::google::protobuf::Message {
 public:
  db_query_mail_infos_in();
  virtual ~db_query_mail_infos_in();
  
  db_query_mail_infos_in(const db_query_mail_infos_in& from);
  
  inline db_query_mail_infos_in& operator=(const db_query_mail_infos_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_infos_in& default_instance();
  
  void Swap(db_query_mail_infos_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_infos_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_infos_in& from);
  void MergeFrom(const db_query_mail_infos_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // repeated uint64 mail_ids = 2;
  inline int mail_ids_size() const;
  inline void clear_mail_ids();
  static const int kMailIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_ids(int index) const;
  inline void set_mail_ids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_ids();
  
  // required uint32 query_cmd = 3;
  inline bool has_query_cmd() const;
  inline void clear_query_cmd();
  static const int kQueryCmdFieldNumber = 3;
  inline ::google::protobuf::uint32 query_cmd() const;
  inline void set_query_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_infos_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_query_cmd();
  inline void clear_has_query_cmd();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_ids_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 query_cmd_;
  ::google::protobuf::uint32 page_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_infos_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_infos_out : public ::google::protobuf::Message {
 public:
  db_query_mail_infos_out();
  virtual ~db_query_mail_infos_out();
  
  db_query_mail_infos_out(const db_query_mail_infos_out& from);
  
  inline db_query_mail_infos_out& operator=(const db_query_mail_infos_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_infos_out& default_instance();
  
  void Swap(db_query_mail_infos_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_infos_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_infos_out& from);
  void MergeFrom(const db_query_mail_infos_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_mail_info_t mail_infos = 1;
  inline int mail_infos_size() const;
  inline void clear_mail_infos();
  static const int kMailInfosFieldNumber = 1;
  inline const ::rudb::db_mail_info_t& mail_infos(int index) const;
  inline ::rudb::db_mail_info_t* mutable_mail_infos(int index);
  inline ::rudb::db_mail_info_t* add_mail_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >&
      mail_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >*
      mutable_mail_infos();
  
  // required uint32 query_cmd = 2;
  inline bool has_query_cmd() const;
  inline void clear_query_cmd();
  static const int kQueryCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 query_cmd() const;
  inline void set_query_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 page_num = 3;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 3;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_infos_out)
 private:
  inline void set_has_query_cmd();
  inline void clear_has_query_cmd();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t > mail_infos_;
  ::google::protobuf::uint32 query_cmd_;
  ::google::protobuf::uint32 page_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_infos_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_players_info_in : public ::google::protobuf::Message {
 public:
  db_query_players_info_in();
  virtual ~db_query_players_info_in();
  
  db_query_players_info_in(const db_query_players_info_in& from);
  
  inline db_query_players_info_in& operator=(const db_query_players_info_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_players_info_in& default_instance();
  
  void Swap(db_query_players_info_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_players_info_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_players_info_in& from);
  void MergeFrom(const db_query_players_info_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // required bool is_ref_cnt_cmd = 3;
  inline bool has_is_ref_cnt_cmd() const;
  inline void clear_is_ref_cnt_cmd();
  static const int kIsRefCntCmdFieldNumber = 3;
  inline bool is_ref_cnt_cmd() const;
  inline void set_is_ref_cnt_cmd(bool value);
  
  // repeated .rudb.db_player_info_t players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::rudb::db_player_info_t& players(int index) const;
  inline ::rudb::db_player_info_t* mutable_players(int index);
  inline ::rudb::db_player_info_t* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_players_info_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_is_ref_cnt_cmd();
  inline void clear_has_is_ref_cnt_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > players_;
  bool is_ref_cnt_cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_players_info_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_players_info_out : public ::google::protobuf::Message {
 public:
  db_query_players_info_out();
  virtual ~db_query_players_info_out();
  
  db_query_players_info_out(const db_query_players_info_out& from);
  
  inline db_query_players_info_out& operator=(const db_query_players_info_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_players_info_out& default_instance();
  
  void Swap(db_query_players_info_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_players_info_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_players_info_out& from);
  void MergeFrom(const db_query_players_info_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // required bool is_ref_cnt_cmd = 2;
  inline bool has_is_ref_cnt_cmd() const;
  inline void clear_is_ref_cnt_cmd();
  static const int kIsRefCntCmdFieldNumber = 2;
  inline bool is_ref_cnt_cmd() const;
  inline void set_is_ref_cnt_cmd(bool value);
  
  // repeated .rudb.db_player_info_t players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::rudb::db_player_info_t& players(int index) const;
  inline ::rudb::db_player_info_t* mutable_players(int index);
  inline ::rudb::db_player_info_t* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_players_info_out)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_is_ref_cnt_cmd();
  inline void clear_has_is_ref_cnt_cmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cmd_;
  bool is_ref_cnt_cmd_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_players_info_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_userinfo_by_name_zone_in : public ::google::protobuf::Message {
 public:
  db_query_userinfo_by_name_zone_in();
  virtual ~db_query_userinfo_by_name_zone_in();
  
  db_query_userinfo_by_name_zone_in(const db_query_userinfo_by_name_zone_in& from);
  
  inline db_query_userinfo_by_name_zone_in& operator=(const db_query_userinfo_by_name_zone_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_userinfo_by_name_zone_in& default_instance();
  
  void Swap(db_query_userinfo_by_name_zone_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_userinfo_by_name_zone_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_userinfo_by_name_zone_in& from);
  void MergeFrom(const db_query_userinfo_by_name_zone_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 channelid = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_userinfo_by_name_zone_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 channelid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_userinfo_by_name_zone_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_userinfo_by_name_zone_out : public ::google::protobuf::Message {
 public:
  db_query_userinfo_by_name_zone_out();
  virtual ~db_query_userinfo_by_name_zone_out();
  
  db_query_userinfo_by_name_zone_out(const db_query_userinfo_by_name_zone_out& from);
  
  inline db_query_userinfo_by_name_zone_out& operator=(const db_query_userinfo_by_name_zone_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_userinfo_by_name_zone_out& default_instance();
  
  void Swap(db_query_userinfo_by_name_zone_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_userinfo_by_name_zone_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_userinfo_by_name_zone_out& from);
  void MergeFrom(const db_query_userinfo_by_name_zone_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_userinfo_by_name_zone_out)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_userinfo_by_name_zone_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_list_in : public ::google::protobuf::Message {
 public:
  db_query_mail_list_in();
  virtual ~db_query_mail_list_in();
  
  db_query_mail_list_in(const db_query_mail_list_in& from);
  
  inline db_query_mail_list_in& operator=(const db_query_mail_list_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_list_in& default_instance();
  
  void Swap(db_query_mail_list_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_list_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_list_in& from);
  void MergeFrom(const db_query_mail_list_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_list_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_list_in* default_instance_;
};
// -------------------------------------------------------------------

class db_mail_list : public ::google::protobuf::Message {
 public:
  db_mail_list();
  virtual ~db_mail_list();
  
  db_mail_list(const db_mail_list& from);
  
  inline db_mail_list& operator=(const db_mail_list& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_mail_list& default_instance();
  
  void Swap(db_mail_list* other);
  
  // implements Message ----------------------------------------------
  
  db_mail_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_mail_list& from);
  void MergeFrom(const db_mail_list& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // optional bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bool hasread = 3;
  inline bool has_hasread() const;
  inline void clear_hasread();
  static const int kHasreadFieldNumber = 3;
  inline bool hasread() const;
  inline void set_hasread(bool value);
  
  // required bool hasattach = 4;
  inline bool has_hasattach() const;
  inline void clear_hasattach();
  static const int kHasattachFieldNumber = 4;
  inline bool hasattach() const;
  inline void set_hasattach(bool value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_mail_list)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_hasread();
  inline void clear_has_hasread();
  inline void set_has_hasattach();
  inline void clear_has_hasattach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::google::protobuf::uint32 mailid_;
  bool hasread_;
  bool hasattach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_mail_list* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_list_out : public ::google::protobuf::Message {
 public:
  db_query_mail_list_out();
  virtual ~db_query_mail_list_out();
  
  db_query_mail_list_out(const db_query_mail_list_out& from);
  
  inline db_query_mail_list_out& operator=(const db_query_mail_list_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_list_out& default_instance();
  
  void Swap(db_query_mail_list_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_list_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_list_out& from);
  void MergeFrom(const db_query_mail_list_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.db_mail_list maillist = 1;
  inline int maillist_size() const;
  inline void clear_maillist();
  static const int kMaillistFieldNumber = 1;
  inline const ::rudb::db_mail_list& maillist(int index) const;
  inline ::rudb::db_mail_list* mutable_maillist(int index);
  inline ::rudb::db_mail_list* add_maillist();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >&
      maillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >*
      mutable_maillist();
  
  // optional .rudb.db_query_mail_out mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::rudb::db_query_mail_out& mail() const;
  inline ::rudb::db_query_mail_out* mutable_mail();
  inline ::rudb::db_query_mail_out* release_mail();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_list_out)
 private:
  inline void set_has_mail();
  inline void clear_has_mail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list > maillist_;
  ::rudb::db_query_mail_out* mail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_list_out* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_in : public ::google::protobuf::Message {
 public:
  db_query_mail_in();
  virtual ~db_query_mail_in();
  
  db_query_mail_in(const db_query_mail_in& from);
  
  inline db_query_mail_in& operator=(const db_query_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_in& default_instance();
  
  void Swap(db_query_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_in& from);
  void MergeFrom(const db_query_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 mail_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_query_mail_out : public ::google::protobuf::Message {
 public:
  db_query_mail_out();
  virtual ~db_query_mail_out();
  
  db_query_mail_out(const db_query_mail_out& from);
  
  inline db_query_mail_out& operator=(const db_query_mail_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_query_mail_out& default_instance();
  
  void Swap(db_query_mail_out* other);
  
  // implements Message ----------------------------------------------
  
  db_query_mail_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_query_mail_out& from);
  void MergeFrom(const db_query_mail_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // optional bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional bytes from = 3;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 3;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional bytes items = 5;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const void* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  
  // required bool hasget = 6;
  inline bool has_hasget() const;
  inline void clear_hasget();
  static const int kHasgetFieldNumber = 6;
  inline bool hasget() const;
  inline void set_hasget(bool value);
  
  // required bytes from_tm = 7;
  inline bool has_from_tm() const;
  inline void clear_from_tm();
  static const int kFromTmFieldNumber = 7;
  inline const ::std::string& from_tm() const;
  inline void set_from_tm(const ::std::string& value);
  inline void set_from_tm(const char* value);
  inline void set_from_tm(const void* value, size_t size);
  inline ::std::string* mutable_from_tm();
  inline ::std::string* release_from_tm();
  
  // @@protoc_insertion_point(class_scope:rudb.db_query_mail_out)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_hasget();
  inline void clear_has_hasget();
  inline void set_has_from_tm();
  inline void clear_has_from_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* from_;
  ::google::protobuf::uint32 mailid_;
  bool hasget_;
  ::std::string* content_;
  ::std::string* items_;
  ::std::string* from_tm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_query_mail_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_attach_in : public ::google::protobuf::Message {
 public:
  db_get_attach_in();
  virtual ~db_get_attach_in();
  
  db_get_attach_in(const db_get_attach_in& from);
  
  inline db_get_attach_in& operator=(const db_get_attach_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_attach_in& default_instance();
  
  void Swap(db_get_attach_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_attach_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_attach_in& from);
  void MergeFrom(const db_get_attach_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_attach_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_attach_in* default_instance_;
};
// -------------------------------------------------------------------

class db_get_attach_out : public ::google::protobuf::Message {
 public:
  db_get_attach_out();
  virtual ~db_get_attach_out();
  
  db_get_attach_out(const db_get_attach_out& from);
  
  inline db_get_attach_out& operator=(const db_get_attach_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_attach_out& default_instance();
  
  void Swap(db_get_attach_out* other);
  
  // implements Message ----------------------------------------------
  
  db_get_attach_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_attach_out& from);
  void MergeFrom(const db_get_attach_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool hasget = 1;
  inline bool has_hasget() const;
  inline void clear_hasget();
  static const int kHasgetFieldNumber = 1;
  inline bool hasget() const;
  inline void set_hasget(bool value);
  
  // required bytes items = 2;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const void* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  
  // required uint32 mailid = 3;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 3;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_attach_out)
 private:
  inline void set_has_hasget();
  inline void clear_has_hasget();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* items_;
  bool hasget_;
  ::google::protobuf::uint32 mailid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_attach_out* default_instance_;
};
// -------------------------------------------------------------------

class db_get_attach_success_in : public ::google::protobuf::Message {
 public:
  db_get_attach_success_in();
  virtual ~db_get_attach_success_in();
  
  db_get_attach_success_in(const db_get_attach_success_in& from);
  
  inline db_get_attach_success_in& operator=(const db_get_attach_success_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_attach_success_in& default_instance();
  
  void Swap(db_get_attach_success_in* other);
  
  // implements Message ----------------------------------------------
  
  db_get_attach_success_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_attach_success_in& from);
  void MergeFrom(const db_get_attach_success_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_get_attach_success_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_get_attach_success_in* default_instance_;
};
// -------------------------------------------------------------------

class db_del_mail_in : public ::google::protobuf::Message {
 public:
  db_del_mail_in();
  virtual ~db_del_mail_in();
  
  db_del_mail_in(const db_del_mail_in& from);
  
  inline db_del_mail_in& operator=(const db_del_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_del_mail_in& default_instance();
  
  void Swap(db_del_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_del_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_del_mail_in& from);
  void MergeFrom(const db_del_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_del_mail_in)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_del_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_new_mail_in : public ::google::protobuf::Message {
 public:
  db_new_mail_in();
  virtual ~db_new_mail_in();
  
  db_new_mail_in(const db_new_mail_in& from);
  
  inline db_new_mail_in& operator=(const db_new_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_new_mail_in& default_instance();
  
  void Swap(db_new_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_new_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_new_mail_in& from);
  void MergeFrom(const db_new_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_new_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_new_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_new_mail_out : public ::google::protobuf::Message {
 public:
  db_new_mail_out();
  virtual ~db_new_mail_out();
  
  db_new_mail_out(const db_new_mail_out& from);
  
  inline db_new_mail_out& operator=(const db_new_mail_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_new_mail_out& default_instance();
  
  void Swap(db_new_mail_out* other);
  
  // implements Message ----------------------------------------------
  
  db_new_mail_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_new_mail_out& from);
  void MergeFrom(const db_new_mail_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 hasnew = 1;
  inline bool has_hasnew() const;
  inline void clear_hasnew();
  static const int kHasnewFieldNumber = 1;
  inline ::google::protobuf::uint32 hasnew() const;
  inline void set_hasnew(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_new_mail_out)
 private:
  inline void set_has_hasnew();
  inline void clear_has_hasnew();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hasnew_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_new_mail_out* default_instance_;
};
// -------------------------------------------------------------------

class db_attach : public ::google::protobuf::Message {
 public:
  db_attach();
  virtual ~db_attach();
  
  db_attach(const db_attach& from);
  
  inline db_attach& operator=(const db_attach& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_attach& default_instance();
  
  void Swap(db_attach* other);
  
  // implements Message ----------------------------------------------
  
  db_attach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_attach& from);
  void MergeFrom(const db_attach& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_attach)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_attach* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_in : public ::google::protobuf::Message {
 public:
  db_add_mail_in();
  virtual ~db_add_mail_in();
  
  db_add_mail_in(const db_add_mail_in& from);
  
  inline db_add_mail_in& operator=(const db_add_mail_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_in& default_instance();
  
  void Swap(db_add_mail_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_in& from);
  void MergeFrom(const db_add_mail_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bytes from = 3;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 3;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // required bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated .rudb.db_attach items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::rudb::db_attach& items(int index) const;
  inline ::rudb::db_attach* mutable_items(int index);
  inline ::rudb::db_attach* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_in)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* from_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attach > items_;
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_by_switch_in : public ::google::protobuf::Message {
 public:
  db_add_mail_by_switch_in();
  virtual ~db_add_mail_by_switch_in();
  
  db_add_mail_by_switch_in(const db_add_mail_by_switch_in& from);
  
  inline db_add_mail_by_switch_in& operator=(const db_add_mail_by_switch_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_by_switch_in& default_instance();
  
  void Swap(db_add_mail_by_switch_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_by_switch_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_by_switch_in& from);
  void MergeFrom(const db_add_mail_by_switch_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // required bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated .rudb.db_attach items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::rudb::db_attach& items(int index) const;
  inline ::rudb::db_attach* mutable_items(int index);
  inline ::rudb::db_attach* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
      mutable_items();
  
  // required uint32 server_id = 5;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 5;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_by_switch_in)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* from_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::rudb::db_attach > items_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_by_switch_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_by_switch_out : public ::google::protobuf::Message {
 public:
  db_add_mail_by_switch_out();
  virtual ~db_add_mail_by_switch_out();
  
  db_add_mail_by_switch_out(const db_add_mail_by_switch_out& from);
  
  inline db_add_mail_by_switch_out& operator=(const db_add_mail_by_switch_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_by_switch_out& default_instance();
  
  void Swap(db_add_mail_by_switch_out* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_by_switch_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_by_switch_out& from);
  void MergeFrom(const db_add_mail_by_switch_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);
  
  // required uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_by_switch_out)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mail_id_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_by_switch_out* default_instance_;
};
// -------------------------------------------------------------------

class mail_rel : public ::google::protobuf::Message {
 public:
  mail_rel();
  virtual ~mail_rel();
  
  mail_rel(const mail_rel& from);
  
  inline mail_rel& operator=(const mail_rel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_rel& default_instance();
  
  void Swap(mail_rel* other);
  
  // implements Message ----------------------------------------------
  
  mail_rel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_rel& from);
  void MergeFrom(const mail_rel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_time = 2;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_time() const;
  inline void set_reg_time(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 mail_id = 4;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 4;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);
  
  // required uint32 hasattach = 5;
  inline bool has_hasattach() const;
  inline void clear_hasattach();
  static const int kHasattachFieldNumber = 5;
  inline ::google::protobuf::uint32 hasattach() const;
  inline void set_hasattach(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rudb.mail_rel)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_hasattach();
  inline void clear_has_hasattach();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_time_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 mail_id_;
  ::google::protobuf::uint32 hasattach_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static mail_rel* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_rel_by_switch_in : public ::google::protobuf::Message {
 public:
  db_add_mail_rel_by_switch_in();
  virtual ~db_add_mail_rel_by_switch_in();
  
  db_add_mail_rel_by_switch_in(const db_add_mail_rel_by_switch_in& from);
  
  inline db_add_mail_rel_by_switch_in& operator=(const db_add_mail_rel_by_switch_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_rel_by_switch_in& default_instance();
  
  void Swap(db_add_mail_rel_by_switch_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_rel_by_switch_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_rel_by_switch_in& from);
  void MergeFrom(const db_add_mail_rel_by_switch_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rudb.mail_rel info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::rudb::mail_rel& info(int index) const;
  inline ::rudb::mail_rel* mutable_info(int index);
  inline ::rudb::mail_rel* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_rel_by_switch_in)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_rel_by_switch_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_mail_rel_flush_in : public ::google::protobuf::Message {
 public:
  db_add_mail_rel_flush_in();
  virtual ~db_add_mail_rel_flush_in();
  
  db_add_mail_rel_flush_in(const db_add_mail_rel_flush_in& from);
  
  inline db_add_mail_rel_flush_in& operator=(const db_add_mail_rel_flush_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_mail_rel_flush_in& default_instance();
  
  void Swap(db_add_mail_rel_flush_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_mail_rel_flush_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_mail_rel_flush_in& from);
  void MergeFrom(const db_add_mail_rel_flush_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_mail_rel_flush_in)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_mail_rel_flush_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_diamond_by_switch_in : public ::google::protobuf::Message {
 public:
  db_add_diamond_by_switch_in();
  virtual ~db_add_diamond_by_switch_in();
  
  db_add_diamond_by_switch_in(const db_add_diamond_by_switch_in& from);
  
  inline db_add_diamond_by_switch_in& operator=(const db_add_diamond_by_switch_in& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_diamond_by_switch_in& default_instance();
  
  void Swap(db_add_diamond_by_switch_in* other);
  
  // implements Message ----------------------------------------------
  
  db_add_diamond_by_switch_in* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_diamond_by_switch_in& from);
  void MergeFrom(const db_add_diamond_by_switch_in& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint32 reg_tm = 2;
  inline bool has_reg_tm() const;
  inline void clear_reg_tm();
  static const int kRegTmFieldNumber = 2;
  inline ::google::protobuf::uint32 reg_tm() const;
  inline void set_reg_tm(::google::protobuf::uint32 value);
  
  // required uint32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // required uint32 add_diamond_num = 4;
  inline bool has_add_diamond_num() const;
  inline void clear_add_diamond_num();
  static const int kAddDiamondNumFieldNumber = 4;
  inline ::google::protobuf::uint32 add_diamond_num() const;
  inline void set_add_diamond_num(::google::protobuf::uint32 value);
  
  // required uint64 order_index = 5;
  inline bool has_order_index() const;
  inline void clear_order_index();
  static const int kOrderIndexFieldNumber = 5;
  inline ::google::protobuf::uint64 order_index() const;
  inline void set_order_index(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_diamond_by_switch_in)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_reg_tm();
  inline void clear_has_reg_tm();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_add_diamond_num();
  inline void clear_has_add_diamond_num();
  inline void set_has_order_index();
  inline void clear_has_order_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 reg_tm_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint64 order_index_;
  ::google::protobuf::uint32 add_diamond_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_diamond_by_switch_in* default_instance_;
};
// -------------------------------------------------------------------

class db_add_diamond_by_switch_out : public ::google::protobuf::Message {
 public:
  db_add_diamond_by_switch_out();
  virtual ~db_add_diamond_by_switch_out();
  
  db_add_diamond_by_switch_out(const db_add_diamond_by_switch_out& from);
  
  inline db_add_diamond_by_switch_out& operator=(const db_add_diamond_by_switch_out& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_diamond_by_switch_out& default_instance();
  
  void Swap(db_add_diamond_by_switch_out* other);
  
  // implements Message ----------------------------------------------
  
  db_add_diamond_by_switch_out* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_diamond_by_switch_out& from);
  void MergeFrom(const db_add_diamond_by_switch_out& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 order_index = 1;
  inline bool has_order_index() const;
  inline void clear_order_index();
  static const int kOrderIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 order_index() const;
  inline void set_order_index(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rudb.db_add_diamond_by_switch_out)
 private:
  inline void set_has_order_index();
  inline void clear_has_order_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 order_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();
  
  void InitAsDefaultInstance();
  static db_add_diamond_by_switch_out* default_instance_;
};
// ===================================================================


// ===================================================================

// db_msgheader_t

// required bytes msg_name = 1;
inline bool db_msgheader_t::has_msg_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_msgheader_t::set_has_msg_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_msgheader_t::clear_has_msg_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_msgheader_t::clear_msg_name() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    msg_name_->clear();
  }
  clear_has_msg_name();
}
inline const ::std::string& db_msgheader_t::msg_name() const {
  return *msg_name_;
}
inline void db_msgheader_t::set_msg_name(const ::std::string& value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
}
inline void db_msgheader_t::set_msg_name(const char* value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
}
inline void db_msgheader_t::set_msg_name(const void* value, size_t size) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_msgheader_t::mutable_msg_name() {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_name_ = new ::std::string;
  }
  return msg_name_;
}
inline ::std::string* db_msgheader_t::release_msg_name() {
  clear_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_name_;
    msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 target_uid = 2;
inline bool db_msgheader_t::has_target_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_msgheader_t::set_has_target_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_msgheader_t::clear_has_target_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_msgheader_t::clear_target_uid() {
  target_uid_ = 0u;
  clear_has_target_uid();
}
inline ::google::protobuf::uint32 db_msgheader_t::target_uid() const {
  return target_uid_;
}
inline void db_msgheader_t::set_target_uid(::google::protobuf::uint32 value) {
  set_has_target_uid();
  target_uid_ = value;
}

// required uint32 errcode = 3;
inline bool db_msgheader_t::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_msgheader_t::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_msgheader_t::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_msgheader_t::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 db_msgheader_t::errcode() const {
  return errcode_;
}
inline void db_msgheader_t::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional uint32 reg_time = 4;
inline bool db_msgheader_t::has_reg_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_msgheader_t::set_has_reg_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_msgheader_t::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_msgheader_t::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_msgheader_t::reg_time() const {
  return reg_time_;
}
inline void db_msgheader_t::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// optional uint32 src_uid = 5;
inline bool db_msgheader_t::has_src_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_msgheader_t::set_has_src_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_msgheader_t::clear_has_src_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_msgheader_t::clear_src_uid() {
  src_uid_ = 0u;
  clear_has_src_uid();
}
inline ::google::protobuf::uint32 db_msgheader_t::src_uid() const {
  return src_uid_;
}
inline void db_msgheader_t::set_src_uid(::google::protobuf::uint32 value) {
  set_has_src_uid();
  src_uid_ = value;
}

// optional uint32 login_id = 6;
inline bool db_msgheader_t::has_login_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_msgheader_t::set_has_login_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_msgheader_t::clear_has_login_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_msgheader_t::clear_login_id() {
  login_id_ = 0u;
  clear_has_login_id();
}
inline ::google::protobuf::uint32 db_msgheader_t::login_id() const {
  return login_id_;
}
inline void db_msgheader_t::set_login_id(::google::protobuf::uint32 value) {
  set_has_login_id();
  login_id_ = value;
}

// optional bytes aux = 7;
inline bool db_msgheader_t::has_aux() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_msgheader_t::set_has_aux() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_msgheader_t::clear_has_aux() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_msgheader_t::clear_aux() {
  if (aux_ != &::google::protobuf::internal::kEmptyString) {
    aux_->clear();
  }
  clear_has_aux();
}
inline const ::std::string& db_msgheader_t::aux() const {
  return *aux_;
}
inline void db_msgheader_t::set_aux(const ::std::string& value) {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  aux_->assign(value);
}
inline void db_msgheader_t::set_aux(const char* value) {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  aux_->assign(value);
}
inline void db_msgheader_t::set_aux(const void* value, size_t size) {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  aux_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_msgheader_t::mutable_aux() {
  set_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    aux_ = new ::std::string;
  }
  return aux_;
}
inline ::std::string* db_msgheader_t::release_aux() {
  clear_has_aux();
  if (aux_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aux_;
    aux_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 trans_id = 8;
inline bool db_msgheader_t::has_trans_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_msgheader_t::set_has_trans_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_msgheader_t::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_msgheader_t::clear_trans_id() {
  trans_id_ = 0u;
  clear_has_trans_id();
}
inline ::google::protobuf::uint32 db_msgheader_t::trans_id() const {
  return trans_id_;
}
inline void db_msgheader_t::set_trans_id(::google::protobuf::uint32 value) {
  set_has_trans_id();
  trans_id_ = value;
}

// -------------------------------------------------------------------

// db_player_pvai_info_t

// required uint32 rank = 1;
inline bool db_player_pvai_info_t::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_pvai_info_t::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_pvai_info_t::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_pvai_info_t::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::rank() const {
  return rank_;
}
inline void db_player_pvai_info_t::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 accu_coin = 2;
inline bool db_player_pvai_info_t::has_accu_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_pvai_info_t::clear_has_accu_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_pvai_info_t::clear_accu_coin() {
  accu_coin_ = 0u;
  clear_has_accu_coin();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_coin() const {
  return accu_coin_;
}
inline void db_player_pvai_info_t::set_accu_coin(::google::protobuf::uint32 value) {
  set_has_accu_coin();
  accu_coin_ = value;
}

// required uint32 accu_reputation = 3;
inline bool db_player_pvai_info_t::has_accu_reputation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_reputation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_pvai_info_t::clear_has_accu_reputation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_pvai_info_t::clear_accu_reputation() {
  accu_reputation_ = 0u;
  clear_has_accu_reputation();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_reputation() const {
  return accu_reputation_;
}
inline void db_player_pvai_info_t::set_accu_reputation(::google::protobuf::uint32 value) {
  set_has_accu_reputation();
  accu_reputation_ = value;
}

// required uint32 accu_times = 4;
inline bool db_player_pvai_info_t::has_accu_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_pvai_info_t::clear_has_accu_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_pvai_info_t::clear_accu_times() {
  accu_times_ = 0u;
  clear_has_accu_times();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_times() const {
  return accu_times_;
}
inline void db_player_pvai_info_t::set_accu_times(::google::protobuf::uint32 value) {
  set_has_accu_times();
  accu_times_ = value;
}

// required uint32 accu_end_time = 5;
inline bool db_player_pvai_info_t::has_accu_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_pvai_info_t::set_has_accu_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_pvai_info_t::clear_has_accu_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_pvai_info_t::clear_accu_end_time() {
  accu_end_time_ = 0u;
  clear_has_accu_end_time();
}
inline ::google::protobuf::uint32 db_player_pvai_info_t::accu_end_time() const {
  return accu_end_time_;
}
inline void db_player_pvai_info_t::set_accu_end_time(::google::protobuf::uint32 value) {
  set_has_accu_end_time();
  accu_end_time_ = value;
}

// -------------------------------------------------------------------

// db_player_info_t

// required uint64 userid = 1;
inline bool db_player_info_t::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_player_info_t::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_player_info_t::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_player_info_t::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_player_info_t::userid() const {
  return userid_;
}
inline void db_player_info_t::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool db_player_info_t::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_player_info_t::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_player_info_t::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_player_info_t::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_player_info_t::reg_time() const {
  return reg_time_;
}
inline void db_player_info_t::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// optional uint32 level = 3;
inline bool db_player_info_t::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_player_info_t::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_player_info_t::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_player_info_t::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 db_player_info_t::level() const {
  return level_;
}
inline void db_player_info_t::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional bytes name = 4;
inline bool db_player_info_t::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_player_info_t::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_player_info_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_player_info_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_player_info_t::name() const {
  return *name_;
}
inline void db_player_info_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_player_info_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_player_info_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_player_info_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_player_info_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 type = 5;
inline bool db_player_info_t::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_player_info_t::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_player_info_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_player_info_t::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_player_info_t::type() const {
  return type_;
}
inline void db_player_info_t::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 gender = 6;
inline bool db_player_info_t::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_player_info_t::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_player_info_t::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_player_info_t::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_player_info_t::gender() const {
  return gender_;
}
inline void db_player_info_t::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 zone_id = 7;
inline bool db_player_info_t::has_zone_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_player_info_t::set_has_zone_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_player_info_t::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_player_info_t::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_player_info_t::zone_id() const {
  return zone_id_;
}
inline void db_player_info_t::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional uint32 vip_lv = 8;
inline bool db_player_info_t::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_player_info_t::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_player_info_t::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_player_info_t::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 db_player_info_t::vip_lv() const {
  return vip_lv_;
}
inline void db_player_info_t::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// optional .rudb.db_player_pvai_info_t pvai_info = 9;
inline bool db_player_info_t::has_pvai_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_player_info_t::set_has_pvai_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_player_info_t::clear_has_pvai_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_player_info_t::clear_pvai_info() {
  if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
  clear_has_pvai_info();
}
inline const ::rudb::db_player_pvai_info_t& db_player_info_t::pvai_info() const {
  return pvai_info_ != NULL ? *pvai_info_ : *default_instance_->pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_player_info_t::mutable_pvai_info() {
  set_has_pvai_info();
  if (pvai_info_ == NULL) pvai_info_ = new ::rudb::db_player_pvai_info_t;
  return pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_player_info_t::release_pvai_info() {
  clear_has_pvai_info();
  ::rudb::db_player_pvai_info_t* temp = pvai_info_;
  pvai_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_crtrole_in

// required uint32 zone_id = 1;
inline bool db_crtrole_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_crtrole_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_crtrole_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_crtrole_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_crtrole_in::zone_id() const {
  return zone_id_;
}
inline void db_crtrole_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_crtrole_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_crtrole_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_crtrole_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_crtrole_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_crtrole_in::name() const {
  return *name_;
}
inline void db_crtrole_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_crtrole_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_crtrole_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 type = 3;
inline bool db_crtrole_in::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_crtrole_in::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_crtrole_in::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_crtrole_in::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_crtrole_in::type() const {
  return type_;
}
inline void db_crtrole_in::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 gender = 4;
inline bool db_crtrole_in::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_crtrole_in::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_crtrole_in::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_crtrole_in::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_crtrole_in::gender() const {
  return gender_;
}
inline void db_crtrole_in::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// -------------------------------------------------------------------

// db_crtrole_out

// required uint32 regtime = 1;
inline bool db_crtrole_out::has_regtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_crtrole_out::set_has_regtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_crtrole_out::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_crtrole_out::clear_regtime() {
  regtime_ = 0u;
  clear_has_regtime();
}
inline ::google::protobuf::uint32 db_crtrole_out::regtime() const {
  return regtime_;
}
inline void db_crtrole_out::set_regtime(::google::protobuf::uint32 value) {
  set_has_regtime();
  regtime_ = value;
}

// required bytes name = 2;
inline bool db_crtrole_out::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_crtrole_out::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_crtrole_out::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_crtrole_out::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_crtrole_out::name() const {
  return *name_;
}
inline void db_crtrole_out::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_out::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_crtrole_out::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_crtrole_out::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_crtrole_out::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 type = 3;
inline bool db_crtrole_out::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_crtrole_out::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_crtrole_out::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_crtrole_out::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_crtrole_out::type() const {
  return type_;
}
inline void db_crtrole_out::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 gender = 4;
inline bool db_crtrole_out::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_crtrole_out::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_crtrole_out::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_crtrole_out::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_crtrole_out::gender() const {
  return gender_;
}
inline void db_crtrole_out::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_in

// required uint32 zone_id = 1;
inline bool db_get_role_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 userid = 2;
inline bool db_get_role_list_in::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_role_list_in::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_role_list_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_role_list_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_get_role_list_in::userid() const {
  return userid_;
}
inline void db_get_role_list_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_out

// required uint32 zone_id = 1;
inline bool db_get_role_list_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_out::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t roles = 2;
inline int db_get_role_list_out::roles_size() const {
  return roles_.size();
}
inline void db_get_role_list_out::clear_roles() {
  roles_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_role_list_out::roles(int index) const {
  return roles_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_out::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_out::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_role_list_out::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_role_list_out::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// db_get_role_list_by_gm_in

// required uint32 zone_id = 1;
inline bool db_get_role_list_by_gm_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_by_gm_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_by_gm_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_by_gm_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_gm_in::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_by_gm_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_role_list_by_gm_out

// required uint32 zone_id = 1;
inline bool db_get_role_list_by_gm_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_role_list_by_gm_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_role_list_by_gm_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_role_list_by_gm_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_role_list_by_gm_out::zone_id() const {
  return zone_id_;
}
inline void db_get_role_list_by_gm_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t roles = 2;
inline int db_get_role_list_by_gm_out::roles_size() const {
  return roles_.size();
}
inline void db_get_role_list_by_gm_out::clear_roles() {
  roles_.Clear();
}
inline const ::rudb::db_player_info_t& db_get_role_list_by_gm_out::roles(int index) const {
  return roles_.Get(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_by_gm_out::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_get_role_list_by_gm_out::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_get_role_list_by_gm_out::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_get_role_list_by_gm_out::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// db_login_in

// required uint32 zone_id = 1;
inline bool db_login_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_login_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_login_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_login_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_login_in::zone_id() const {
  return zone_id_;
}
inline void db_login_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_login_out

// required bytes name = 1;
inline bool db_login_out::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_login_out::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_login_out::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_login_out::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_login_out::name() const {
  return *name_;
}
inline void db_login_out::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_login_out::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_login_out::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_login_out::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_login_out::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 regtime = 2;
inline bool db_login_out::has_regtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_login_out::set_has_regtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_login_out::clear_has_regtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_login_out::clear_regtime() {
  regtime_ = 0u;
  clear_has_regtime();
}
inline ::google::protobuf::uint32 db_login_out::regtime() const {
  return regtime_;
}
inline void db_login_out::set_regtime(::google::protobuf::uint32 value) {
  set_has_regtime();
  regtime_ = value;
}

// required uint32 type = 3;
inline bool db_login_out::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_login_out::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_login_out::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_login_out::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_login_out::type() const {
  return type_;
}
inline void db_login_out::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 gender = 4;
inline bool db_login_out::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_login_out::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_login_out::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_login_out::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 db_login_out::gender() const {
  return gender_;
}
inline void db_login_out::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// required uint32 lv = 5;
inline bool db_login_out::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_login_out::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_login_out::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_login_out::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_login_out::lv() const {
  return lv_;
}
inline void db_login_out::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 exp = 6;
inline bool db_login_out::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_login_out::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_login_out::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_login_out::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 db_login_out::exp() const {
  return exp_;
}
inline void db_login_out::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 last_login_time = 7;
inline bool db_login_out::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_login_out::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_login_out::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_login_out::clear_last_login_time() {
  last_login_time_ = 0u;
  clear_has_last_login_time();
}
inline ::google::protobuf::uint32 db_login_out::last_login_time() const {
  return last_login_time_;
}
inline void db_login_out::set_last_login_time(::google::protobuf::uint32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// -------------------------------------------------------------------

// db_del_role_in

// required uint32 zone_id = 1;
inline bool db_del_role_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_role_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_role_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_role_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_role_in::zone_id() const {
  return zone_id_;
}
inline void db_del_role_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_levelup_in

// required uint32 zone_id = 1;
inline bool db_levelup_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_levelup_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_levelup_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_levelup_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_levelup_in::zone_id() const {
  return zone_id_;
}
inline void db_levelup_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 level = 2;
inline bool db_levelup_in::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_levelup_in::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_levelup_in::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_levelup_in::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 db_levelup_in::level() const {
  return level_;
}
inline void db_levelup_in::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// db_backpack_query_in

// required uint32 zone_id = 1;
inline bool db_backpack_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_query_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_equip_hole

// required uint32 hole_index = 1;
inline bool db_equip_hole::has_hole_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_hole::set_has_hole_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_hole::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_hole::clear_hole_index() {
  hole_index_ = 0u;
  clear_has_hole_index();
}
inline ::google::protobuf::uint32 db_equip_hole::hole_index() const {
  return hole_index_;
}
inline void db_equip_hole::set_hole_index(::google::protobuf::uint32 value) {
  set_has_hole_index();
  hole_index_ = value;
}

// required uint32 item_gem_id = 2;
inline bool db_equip_hole::has_item_gem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_equip_hole::set_has_item_gem_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_equip_hole::clear_has_item_gem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_equip_hole::clear_item_gem_id() {
  item_gem_id_ = 0u;
  clear_has_item_gem_id();
}
inline ::google::protobuf::uint32 db_equip_hole::item_gem_id() const {
  return item_gem_id_;
}
inline void db_equip_hole::set_item_gem_id(::google::protobuf::uint32 value) {
  set_has_item_gem_id();
  item_gem_id_ = value;
}

// required uint32 attr_key = 3;
inline bool db_equip_hole::has_attr_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_equip_hole::set_has_attr_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_equip_hole::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_equip_hole::clear_attr_key() {
  attr_key_ = 0u;
  clear_has_attr_key();
}
inline ::google::protobuf::uint32 db_equip_hole::attr_key() const {
  return attr_key_;
}
inline void db_equip_hole::set_attr_key(::google::protobuf::uint32 value) {
  set_has_attr_key();
  attr_key_ = value;
}

// required uint32 attr_value = 4;
inline bool db_equip_hole::has_attr_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_equip_hole::set_has_attr_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_equip_hole::clear_has_attr_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_equip_hole::clear_attr_value() {
  attr_value_ = 0u;
  clear_has_attr_value();
}
inline ::google::protobuf::uint32 db_equip_hole::attr_value() const {
  return attr_value_;
}
inline void db_equip_hole::set_attr_value(::google::protobuf::uint32 value) {
  set_has_attr_value();
  attr_value_ = value;
}

// -------------------------------------------------------------------

// db_packpos

// required uint32 pos = 1;
inline bool db_packpos::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_packpos::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_packpos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_packpos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 db_packpos::pos() const {
  return pos_;
}
inline void db_packpos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required uint32 item_id = 2;
inline bool db_packpos::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_packpos::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_packpos::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_packpos::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 db_packpos::item_id() const {
  return item_id_;
}
inline void db_packpos::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 item_level = 3;
inline bool db_packpos::has_item_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_packpos::set_has_item_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_packpos::clear_has_item_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_packpos::clear_item_level() {
  item_level_ = 0u;
  clear_has_item_level();
}
inline ::google::protobuf::uint32 db_packpos::item_level() const {
  return item_level_;
}
inline void db_packpos::set_item_level(::google::protobuf::uint32 value) {
  set_has_item_level();
  item_level_ = value;
}

// required uint32 item_num = 4;
inline bool db_packpos::has_item_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_packpos::set_has_item_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_packpos::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_packpos::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 db_packpos::item_num() const {
  return item_num_;
}
inline void db_packpos::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional uint32 hole1 = 9;
inline bool db_packpos::has_hole1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_packpos::set_has_hole1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_packpos::clear_has_hole1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_packpos::clear_hole1() {
  hole1_ = 0u;
  clear_has_hole1();
}
inline ::google::protobuf::uint32 db_packpos::hole1() const {
  return hole1_;
}
inline void db_packpos::set_hole1(::google::protobuf::uint32 value) {
  set_has_hole1();
  hole1_ = value;
}

// optional uint32 hole2 = 6;
inline bool db_packpos::has_hole2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_packpos::set_has_hole2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_packpos::clear_has_hole2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_packpos::clear_hole2() {
  hole2_ = 0u;
  clear_has_hole2();
}
inline ::google::protobuf::uint32 db_packpos::hole2() const {
  return hole2_;
}
inline void db_packpos::set_hole2(::google::protobuf::uint32 value) {
  set_has_hole2();
  hole2_ = value;
}

// optional uint32 hole3 = 7;
inline bool db_packpos::has_hole3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_packpos::set_has_hole3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_packpos::clear_has_hole3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_packpos::clear_hole3() {
  hole3_ = 0u;
  clear_has_hole3();
}
inline ::google::protobuf::uint32 db_packpos::hole3() const {
  return hole3_;
}
inline void db_packpos::set_hole3(::google::protobuf::uint32 value) {
  set_has_hole3();
  hole3_ = value;
}

// optional uint32 hole4 = 8;
inline bool db_packpos::has_hole4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_packpos::set_has_hole4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_packpos::clear_has_hole4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_packpos::clear_hole4() {
  hole4_ = 0u;
  clear_has_hole4();
}
inline ::google::protobuf::uint32 db_packpos::hole4() const {
  return hole4_;
}
inline void db_packpos::set_hole4(::google::protobuf::uint32 value) {
  set_has_hole4();
  hole4_ = value;
}

// repeated .rudb.db_equip_hole equip_holes = 5;
inline int db_packpos::equip_holes_size() const {
  return equip_holes_.size();
}
inline void db_packpos::clear_equip_holes() {
  equip_holes_.Clear();
}
inline const ::rudb::db_equip_hole& db_packpos::equip_holes(int index) const {
  return equip_holes_.Get(index);
}
inline ::rudb::db_equip_hole* db_packpos::mutable_equip_holes(int index) {
  return equip_holes_.Mutable(index);
}
inline ::rudb::db_equip_hole* db_packpos::add_equip_holes() {
  return equip_holes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >&
db_packpos::equip_holes() const {
  return equip_holes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_equip_hole >*
db_packpos::mutable_equip_holes() {
  return &equip_holes_;
}

// -------------------------------------------------------------------

// db_backpack_query_out

// repeated .rudb.db_packpos items = 1;
inline int db_backpack_query_out::items_size() const {
  return items_.size();
}
inline void db_backpack_query_out::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_query_out::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_query_out::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_query_out::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_query_out::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_query_out::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_backpack_add_in

// required uint32 zone_id = 1;
inline bool db_backpack_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_add_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_packpos items = 2;
inline int db_backpack_add_in::items_size() const {
  return items_.size();
}
inline void db_backpack_add_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_add_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_add_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_add_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_add_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_add_in::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_backpack_update_in

// required uint32 zone_id = 1;
inline bool db_backpack_update_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_update_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_update_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_update_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_update_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_update_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_packpos items = 2;
inline int db_backpack_update_in::items_size() const {
  return items_.size();
}
inline void db_backpack_update_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_update_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_update_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_update_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_update_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_update_in::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_backpack_del_in

// required uint32 zone_id = 1;
inline bool db_backpack_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_del_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_packpos items = 2;
inline int db_backpack_del_in::items_size() const {
  return items_.size();
}
inline void db_backpack_del_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_packpos& db_backpack_del_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_packpos* db_backpack_del_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_packpos* db_backpack_del_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >&
db_backpack_del_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_packpos >*
db_backpack_del_in::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_backpack_move_in

// required uint32 zone_id = 1;
inline bool db_backpack_move_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_backpack_move_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_backpack_move_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_backpack_move_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_backpack_move_in::zone_id() const {
  return zone_id_;
}
inline void db_backpack_move_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 pos_from = 2;
inline bool db_backpack_move_in::has_pos_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_backpack_move_in::set_has_pos_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_backpack_move_in::clear_has_pos_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_backpack_move_in::clear_pos_from() {
  pos_from_ = 0u;
  clear_has_pos_from();
}
inline ::google::protobuf::uint32 db_backpack_move_in::pos_from() const {
  return pos_from_;
}
inline void db_backpack_move_in::set_pos_from(::google::protobuf::uint32 value) {
  set_has_pos_from();
  pos_from_ = value;
}

// required uint32 pos_to = 3;
inline bool db_backpack_move_in::has_pos_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_backpack_move_in::set_has_pos_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_backpack_move_in::clear_has_pos_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_backpack_move_in::clear_pos_to() {
  pos_to_ = 0u;
  clear_has_pos_to();
}
inline ::google::protobuf::uint32 db_backpack_move_in::pos_to() const {
  return pos_to_;
}
inline void db_backpack_move_in::set_pos_to(::google::protobuf::uint32 value) {
  set_has_pos_to();
  pos_to_ = value;
}

// -------------------------------------------------------------------

// db_instance_info

// required uint32 instance_id = 1;
inline bool db_instance_info::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_instance_info::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_instance_info::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_instance_info::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 db_instance_info::instance_id() const {
  return instance_id_;
}
inline void db_instance_info::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// required uint32 star = 2;
inline bool db_instance_info::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_instance_info::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_instance_info::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_instance_info::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 db_instance_info::star() const {
  return star_;
}
inline void db_instance_info::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 can_enter_flag = 3;
inline bool db_instance_info::has_can_enter_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_instance_info::set_has_can_enter_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_instance_info::clear_has_can_enter_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_instance_info::clear_can_enter_flag() {
  can_enter_flag_ = 0u;
  clear_has_can_enter_flag();
}
inline ::google::protobuf::uint32 db_instance_info::can_enter_flag() const {
  return can_enter_flag_;
}
inline void db_instance_info::set_can_enter_flag(::google::protobuf::uint32 value) {
  set_has_can_enter_flag();
  can_enter_flag_ = value;
}

// required uint32 refresh_times = 4;
inline bool db_instance_info::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_instance_info::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_instance_info::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_instance_info::clear_refresh_times() {
  refresh_times_ = 0u;
  clear_has_refresh_times();
}
inline ::google::protobuf::uint32 db_instance_info::refresh_times() const {
  return refresh_times_;
}
inline void db_instance_info::set_refresh_times(::google::protobuf::uint32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// required uint32 dead_tm = 5;
inline bool db_instance_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_instance_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_instance_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_instance_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_instance_info::dead_tm() const {
  return dead_tm_;
}
inline void db_instance_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_instance_query_in

// required uint32 zone_id = 1;
inline bool db_instance_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_instance_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_instance_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_instance_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_instance_query_in::zone_id() const {
  return zone_id_;
}
inline void db_instance_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_instance_query_out

// repeated .rudb.db_instance_info instances = 1;
inline int db_instance_query_out::instances_size() const {
  return instances_.size();
}
inline void db_instance_query_out::clear_instances() {
  instances_.Clear();
}
inline const ::rudb::db_instance_info& db_instance_query_out::instances(int index) const {
  return instances_.Get(index);
}
inline ::rudb::db_instance_info* db_instance_query_out::mutable_instances(int index) {
  return instances_.Mutable(index);
}
inline ::rudb::db_instance_info* db_instance_query_out::add_instances() {
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
db_instance_query_out::instances() const {
  return instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
db_instance_query_out::mutable_instances() {
  return &instances_;
}

// -------------------------------------------------------------------

// db_instance_modify_in

// required uint32 zone_id = 1;
inline bool db_instance_modify_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_instance_modify_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_instance_modify_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_instance_modify_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_instance_modify_in::zone_id() const {
  return zone_id_;
}
inline void db_instance_modify_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_instance_info instances = 2;
inline int db_instance_modify_in::instances_size() const {
  return instances_.size();
}
inline void db_instance_modify_in::clear_instances() {
  instances_.Clear();
}
inline const ::rudb::db_instance_info& db_instance_modify_in::instances(int index) const {
  return instances_.Get(index);
}
inline ::rudb::db_instance_info* db_instance_modify_in::mutable_instances(int index) {
  return instances_.Mutable(index);
}
inline ::rudb::db_instance_info* db_instance_modify_in::add_instances() {
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >&
db_instance_modify_in::instances() const {
  return instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_instance_info >*
db_instance_modify_in::mutable_instances() {
  return &instances_;
}

// -------------------------------------------------------------------

// db_task_query_in

// required uint32 zone_id = 1;
inline bool db_task_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_task_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_task_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_task_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_task_query_in::zone_id() const {
  return zone_id_;
}
inline void db_task_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_task_info

// required uint32 task_id = 1;
inline bool db_task_info::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_task_info::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_task_info::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_task_info::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 db_task_info::task_id() const {
  return task_id_;
}
inline void db_task_info::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required uint32 step_id = 2;
inline bool db_task_info::has_step_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_task_info::set_has_step_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_task_info::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_task_info::clear_step_id() {
  step_id_ = 0u;
  clear_has_step_id();
}
inline ::google::protobuf::uint32 db_task_info::step_id() const {
  return step_id_;
}
inline void db_task_info::set_step_id(::google::protobuf::uint32 value) {
  set_has_step_id();
  step_id_ = value;
}

// required uint32 step_rate = 3;
inline bool db_task_info::has_step_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_task_info::set_has_step_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_task_info::clear_has_step_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_task_info::clear_step_rate() {
  step_rate_ = 0u;
  clear_has_step_rate();
}
inline ::google::protobuf::uint32 db_task_info::step_rate() const {
  return step_rate_;
}
inline void db_task_info::set_step_rate(::google::protobuf::uint32 value) {
  set_has_step_rate();
  step_rate_ = value;
}

// -------------------------------------------------------------------

// db_task_query_out

// repeated .rudb.db_task_info tasks = 1;
inline int db_task_query_out::tasks_size() const {
  return tasks_.size();
}
inline void db_task_query_out::clear_tasks() {
  tasks_.Clear();
}
inline const ::rudb::db_task_info& db_task_query_out::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::rudb::db_task_info* db_task_query_out::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::rudb::db_task_info* db_task_query_out::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >&
db_task_query_out::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_task_info >*
db_task_query_out::mutable_tasks() {
  return &tasks_;
}

// -------------------------------------------------------------------

// db_task_step_in

// required uint32 zone_id = 1;
inline bool db_task_step_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_task_step_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_task_step_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_task_step_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_task_step_in::zone_id() const {
  return zone_id_;
}
inline void db_task_step_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 task_id = 2;
inline bool db_task_step_in::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_task_step_in::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_task_step_in::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_task_step_in::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 db_task_step_in::task_id() const {
  return task_id_;
}
inline void db_task_step_in::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required uint32 step_id = 3;
inline bool db_task_step_in::has_step_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_task_step_in::set_has_step_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_task_step_in::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_task_step_in::clear_step_id() {
  step_id_ = 0u;
  clear_has_step_id();
}
inline ::google::protobuf::uint32 db_task_step_in::step_id() const {
  return step_id_;
}
inline void db_task_step_in::set_step_id(::google::protobuf::uint32 value) {
  set_has_step_id();
  step_id_ = value;
}

// required uint32 step_rate = 4;
inline bool db_task_step_in::has_step_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_task_step_in::set_has_step_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_task_step_in::clear_has_step_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_task_step_in::clear_step_rate() {
  step_rate_ = 0u;
  clear_has_step_rate();
}
inline ::google::protobuf::uint32 db_task_step_in::step_rate() const {
  return step_rate_;
}
inline void db_task_step_in::set_step_rate(::google::protobuf::uint32 value) {
  set_has_step_rate();
  step_rate_ = value;
}

// -------------------------------------------------------------------

// db_daily_task_info

// required uint32 daily_task_id = 1;
inline bool db_daily_task_info::has_daily_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_daily_task_info::set_has_daily_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_daily_task_info::clear_has_daily_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_daily_task_info::clear_daily_task_id() {
  daily_task_id_ = 0u;
  clear_has_daily_task_id();
}
inline ::google::protobuf::uint32 db_daily_task_info::daily_task_id() const {
  return daily_task_id_;
}
inline void db_daily_task_info::set_daily_task_id(::google::protobuf::uint32 value) {
  set_has_daily_task_id();
  daily_task_id_ = value;
}

// required int32 daily_task_status = 2;
inline bool db_daily_task_info::has_daily_task_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_daily_task_info::set_has_daily_task_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_daily_task_info::clear_has_daily_task_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_daily_task_info::clear_daily_task_status() {
  daily_task_status_ = 0;
  clear_has_daily_task_status();
}
inline ::google::protobuf::int32 db_daily_task_info::daily_task_status() const {
  return daily_task_status_;
}
inline void db_daily_task_info::set_daily_task_status(::google::protobuf::int32 value) {
  set_has_daily_task_status();
  daily_task_status_ = value;
}

// required uint32 dead_tm = 3;
inline bool db_daily_task_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_daily_task_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_daily_task_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_daily_task_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_daily_task_info::dead_tm() const {
  return dead_tm_;
}
inline void db_daily_task_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_daily_task_in

// required uint32 zone_id = 1;
inline bool db_query_daily_task_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_daily_task_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_daily_task_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_daily_task_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_daily_task_in::zone_id() const {
  return zone_id_;
}
inline void db_query_daily_task_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_daily_task_out

// repeated .rudb.db_daily_task_info daily_tasks = 1;
inline int db_query_daily_task_out::daily_tasks_size() const {
  return daily_tasks_.size();
}
inline void db_query_daily_task_out::clear_daily_tasks() {
  daily_tasks_.Clear();
}
inline const ::rudb::db_daily_task_info& db_query_daily_task_out::daily_tasks(int index) const {
  return daily_tasks_.Get(index);
}
inline ::rudb::db_daily_task_info* db_query_daily_task_out::mutable_daily_tasks(int index) {
  return daily_tasks_.Mutable(index);
}
inline ::rudb::db_daily_task_info* db_query_daily_task_out::add_daily_tasks() {
  return daily_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
db_query_daily_task_out::daily_tasks() const {
  return daily_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
db_query_daily_task_out::mutable_daily_tasks() {
  return &daily_tasks_;
}

// -------------------------------------------------------------------

// db_replace_daily_task_in

// required uint32 zone_id = 1;
inline bool db_replace_daily_task_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_replace_daily_task_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_replace_daily_task_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_replace_daily_task_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_replace_daily_task_in::zone_id() const {
  return zone_id_;
}
inline void db_replace_daily_task_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_daily_task_info daily_tasks = 2;
inline int db_replace_daily_task_in::daily_tasks_size() const {
  return daily_tasks_.size();
}
inline void db_replace_daily_task_in::clear_daily_tasks() {
  daily_tasks_.Clear();
}
inline const ::rudb::db_daily_task_info& db_replace_daily_task_in::daily_tasks(int index) const {
  return daily_tasks_.Get(index);
}
inline ::rudb::db_daily_task_info* db_replace_daily_task_in::mutable_daily_tasks(int index) {
  return daily_tasks_.Mutable(index);
}
inline ::rudb::db_daily_task_info* db_replace_daily_task_in::add_daily_tasks() {
  return daily_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >&
db_replace_daily_task_in::daily_tasks() const {
  return daily_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_daily_task_info >*
db_replace_daily_task_in::mutable_daily_tasks() {
  return &daily_tasks_;
}

// -------------------------------------------------------------------

// db_del_daily_task_in

// required uint32 zone_id = 1;
inline bool db_del_daily_task_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_daily_task_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_daily_task_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_daily_task_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_daily_task_in::zone_id() const {
  return zone_id_;
}
inline void db_del_daily_task_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_attribute_query_in

// required uint32 zone_id = 1;
inline bool db_attribute_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attribute_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attribute_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attribute_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_attribute_query_in::zone_id() const {
  return zone_id_;
}
inline void db_attribute_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_attribute_info

// required uint32 attribute_id = 1;
inline bool db_attribute_info::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attribute_info::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attribute_info::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attribute_info::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_attribute_info::attribute_id() const {
  return attribute_id_;
}
inline void db_attribute_info::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 2;
inline bool db_attribute_info::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_attribute_info::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_attribute_info::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_attribute_info::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_attribute_info::attribute_value() const {
  return attribute_value_;
}
inline void db_attribute_info::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 3;
inline bool db_attribute_info::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_attribute_info::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_attribute_info::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_attribute_info::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_attribute_info::dead_tm() const {
  return dead_tm_;
}
inline void db_attribute_info::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_attribute_query_out

// repeated .rudb.db_attribute_info attributes = 1;
inline int db_attribute_query_out::attributes_size() const {
  return attributes_.size();
}
inline void db_attribute_query_out::clear_attributes() {
  attributes_.Clear();
}
inline const ::rudb::db_attribute_info& db_attribute_query_out::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::rudb::db_attribute_info* db_attribute_query_out::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::rudb::db_attribute_info* db_attribute_query_out::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
db_attribute_query_out::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
db_attribute_query_out::mutable_attributes() {
  return &attributes_;
}

// -------------------------------------------------------------------

// db_attribute_set_in

// required uint32 zone_id = 1;
inline bool db_attribute_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attribute_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attribute_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attribute_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_attribute_set_in::zone_id() const {
  return zone_id_;
}
inline void db_attribute_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 2;
inline bool db_attribute_set_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_attribute_set_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_attribute_set_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_attribute_set_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_attribute_set_in::attribute_id() const {
  return attribute_id_;
}
inline void db_attribute_set_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 3;
inline bool db_attribute_set_in::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_attribute_set_in::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_attribute_set_in::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_attribute_set_in::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_attribute_set_in::attribute_value() const {
  return attribute_value_;
}
inline void db_attribute_set_in::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 4;
inline bool db_attribute_set_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_attribute_set_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_attribute_set_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_attribute_set_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_attribute_set_in::dead_tm() const {
  return dead_tm_;
}
inline void db_attribute_set_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_shared_attribute_query_in

// required uint32 zone_id = 1;
inline bool db_shared_attribute_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shared_attribute_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shared_attribute_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shared_attribute_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_shared_attribute_query_in::zone_id() const {
  return zone_id_;
}
inline void db_shared_attribute_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_shared_attribute_query_out

// repeated .rudb.db_attribute_info shared_attributes = 1;
inline int db_shared_attribute_query_out::shared_attributes_size() const {
  return shared_attributes_.size();
}
inline void db_shared_attribute_query_out::clear_shared_attributes() {
  shared_attributes_.Clear();
}
inline const ::rudb::db_attribute_info& db_shared_attribute_query_out::shared_attributes(int index) const {
  return shared_attributes_.Get(index);
}
inline ::rudb::db_attribute_info* db_shared_attribute_query_out::mutable_shared_attributes(int index) {
  return shared_attributes_.Mutable(index);
}
inline ::rudb::db_attribute_info* db_shared_attribute_query_out::add_shared_attributes() {
  return shared_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >&
db_shared_attribute_query_out::shared_attributes() const {
  return shared_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attribute_info >*
db_shared_attribute_query_out::mutable_shared_attributes() {
  return &shared_attributes_;
}

// -------------------------------------------------------------------

// db_shared_attribute_set_in

// required uint32 zone_id = 1;
inline bool db_shared_attribute_set_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shared_attribute_set_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shared_attribute_set_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shared_attribute_set_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::zone_id() const {
  return zone_id_;
}
inline void db_shared_attribute_set_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 attribute_id = 2;
inline bool db_shared_attribute_set_in::has_attribute_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_shared_attribute_set_in::set_has_attribute_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_shared_attribute_set_in::clear_has_attribute_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_shared_attribute_set_in::clear_attribute_id() {
  attribute_id_ = 0u;
  clear_has_attribute_id();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::attribute_id() const {
  return attribute_id_;
}
inline void db_shared_attribute_set_in::set_attribute_id(::google::protobuf::uint32 value) {
  set_has_attribute_id();
  attribute_id_ = value;
}

// required uint32 attribute_value = 3;
inline bool db_shared_attribute_set_in::has_attribute_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_shared_attribute_set_in::set_has_attribute_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_shared_attribute_set_in::clear_has_attribute_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_shared_attribute_set_in::clear_attribute_value() {
  attribute_value_ = 0u;
  clear_has_attribute_value();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::attribute_value() const {
  return attribute_value_;
}
inline void db_shared_attribute_set_in::set_attribute_value(::google::protobuf::uint32 value) {
  set_has_attribute_value();
  attribute_value_ = value;
}

// required uint32 dead_tm = 4;
inline bool db_shared_attribute_set_in::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_shared_attribute_set_in::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_shared_attribute_set_in::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_shared_attribute_set_in::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 db_shared_attribute_set_in::dead_tm() const {
  return dead_tm_;
}
inline void db_shared_attribute_set_in::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_skill_query_in

// required uint32 zone_id = 1;
inline bool db_skill_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skill_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skill_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skill_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_skill_query_in::zone_id() const {
  return zone_id_;
}
inline void db_skill_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_skill_query_out_skill_info

// required uint32 skill_id = 1;
inline bool db_skill_query_out_skill_info::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skill_query_out_skill_info::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skill_query_out_skill_info::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skill_query_out_skill_info::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 db_skill_query_out_skill_info::skill_id() const {
  return skill_id_;
}
inline void db_skill_query_out_skill_info::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 skill_level = 2;
inline bool db_skill_query_out_skill_info::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_skill_query_out_skill_info::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_skill_query_out_skill_info::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_skill_query_out_skill_info::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 db_skill_query_out_skill_info::skill_level() const {
  return skill_level_;
}
inline void db_skill_query_out_skill_info::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// -------------------------------------------------------------------

// db_skill_query_out

// repeated .rudb.db_skill_query_out.skill_info skills = 1;
inline int db_skill_query_out::skills_size() const {
  return skills_.size();
}
inline void db_skill_query_out::clear_skills() {
  skills_.Clear();
}
inline const ::rudb::db_skill_query_out_skill_info& db_skill_query_out::skills(int index) const {
  return skills_.Get(index);
}
inline ::rudb::db_skill_query_out_skill_info* db_skill_query_out::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::rudb::db_skill_query_out_skill_info* db_skill_query_out::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >&
db_skill_query_out::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_skill_query_out_skill_info >*
db_skill_query_out::mutable_skills() {
  return &skills_;
}

// -------------------------------------------------------------------

// db_skill_add_in

// required uint32 zone_id = 1;
inline bool db_skill_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skill_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skill_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skill_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_skill_add_in::zone_id() const {
  return zone_id_;
}
inline void db_skill_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 skill_id = 2;
inline bool db_skill_add_in::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_skill_add_in::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_skill_add_in::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_skill_add_in::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 db_skill_add_in::skill_id() const {
  return skill_id_;
}
inline void db_skill_add_in::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 skill_level = 3;
inline bool db_skill_add_in::has_skill_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_skill_add_in::set_has_skill_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_skill_add_in::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_skill_add_in::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 db_skill_add_in::skill_level() const {
  return skill_level_;
}
inline void db_skill_add_in::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// -------------------------------------------------------------------

// db_friend_query_in

// required uint32 zone_id = 1;
inline bool db_friend_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_friend_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_friend_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_friend_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_friend_query_in::zone_id() const {
  return zone_id_;
}
inline void db_friend_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_id_by_name_in

// required bytes name = 1;
inline bool db_query_id_by_name_in::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_id_by_name_in::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_id_by_name_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_id_by_name_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_query_id_by_name_in::name() const {
  return *name_;
}
inline void db_query_id_by_name_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_id_by_name_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_id_by_name_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_id_by_name_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_query_id_by_name_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 zone_id = 2;
inline bool db_query_id_by_name_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_id_by_name_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_id_by_name_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_id_by_name_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_id_by_name_in::zone_id() const {
  return zone_id_;
}
inline void db_query_id_by_name_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_id_by_name_out

// optional uint64 userid = 1;
inline bool db_query_id_by_name_out::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_id_by_name_out::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_id_by_name_out::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_id_by_name_out::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_query_id_by_name_out::userid() const {
  return userid_;
}
inline void db_query_id_by_name_out::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional uint32 reg_tm = 2;
inline bool db_query_id_by_name_out::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_id_by_name_out::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_id_by_name_out::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_id_by_name_out::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_query_id_by_name_out::reg_tm() const {
  return reg_tm_;
}
inline void db_query_id_by_name_out::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// -------------------------------------------------------------------

// show_info

// required uint64 userid = 1;
inline bool show_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void show_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void show_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void show_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 show_info::userid() const {
  return userid_;
}
inline void show_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool show_info::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void show_info::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void show_info::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void show_info::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 show_info::reg_tm() const {
  return reg_tm_;
}
inline void show_info::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required bytes name = 3;
inline bool show_info::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void show_info::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void show_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void show_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& show_info::name() const {
  return *name_;
}
inline void show_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void show_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void show_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* show_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* show_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 lv = 4;
inline bool show_info::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void show_info::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void show_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void show_info::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 show_info::lv() const {
  return lv_;
}
inline void show_info::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// required uint32 type = 5;
inline bool show_info::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void show_info::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void show_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void show_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 show_info::type() const {
  return type_;
}
inline void show_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 prestige = 6;
inline bool show_info::has_prestige() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void show_info::set_has_prestige() {
  _has_bits_[0] |= 0x00000020u;
}
inline void show_info::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void show_info::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 show_info::prestige() const {
  return prestige_;
}
inline void show_info::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// required uint32 pvai_rank = 7;
inline bool show_info::has_pvai_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void show_info::set_has_pvai_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void show_info::clear_has_pvai_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void show_info::clear_pvai_rank() {
  pvai_rank_ = 0u;
  clear_has_pvai_rank();
}
inline ::google::protobuf::uint32 show_info::pvai_rank() const {
  return pvai_rank_;
}
inline void show_info::set_pvai_rank(::google::protobuf::uint32 value) {
  set_has_pvai_rank();
  pvai_rank_ = value;
}

// -------------------------------------------------------------------

// db_nearby_query_in

// required uint32 zone_id = 1;
inline bool db_nearby_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_nearby_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_nearby_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_nearby_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_nearby_query_in::zone_id() const {
  return zone_id_;
}
inline void db_nearby_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t info = 2;
inline int db_nearby_query_in::info_size() const {
  return info_.size();
}
inline void db_nearby_query_in::clear_info() {
  info_.Clear();
}
inline const ::rudb::db_player_info_t& db_nearby_query_in::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::db_player_info_t* db_nearby_query_in::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_nearby_query_in::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_nearby_query_in::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_nearby_query_in::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_nearby_query_out

// repeated .rudb.show_info info = 1;
inline int db_nearby_query_out::info_size() const {
  return info_.size();
}
inline void db_nearby_query_out::clear_info() {
  info_.Clear();
}
inline const ::rudb::show_info& db_nearby_query_out::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::show_info* db_nearby_query_out::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::show_info* db_nearby_query_out::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
db_nearby_query_out::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
db_nearby_query_out::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_list_partner_in

// required uint32 zone_id = 1;
inline bool db_list_partner_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_list_partner_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_list_partner_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_list_partner_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_list_partner_in::zone_id() const {
  return zone_id_;
}
inline void db_list_partner_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t partner = 2;
inline int db_list_partner_in::partner_size() const {
  return partner_.size();
}
inline void db_list_partner_in::clear_partner() {
  partner_.Clear();
}
inline const ::rudb::db_player_info_t& db_list_partner_in::partner(int index) const {
  return partner_.Get(index);
}
inline ::rudb::db_player_info_t* db_list_partner_in::mutable_partner(int index) {
  return partner_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_list_partner_in::add_partner() {
  return partner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_list_partner_in::partner() const {
  return partner_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_list_partner_in::mutable_partner() {
  return &partner_;
}

// -------------------------------------------------------------------

// db_list_partner_out

// repeated .rudb.show_info info = 1;
inline int db_list_partner_out::info_size() const {
  return info_.size();
}
inline void db_list_partner_out::clear_info() {
  info_.Clear();
}
inline const ::rudb::show_info& db_list_partner_out::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::show_info* db_list_partner_out::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::show_info* db_list_partner_out::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::show_info >&
db_list_partner_out::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::show_info >*
db_list_partner_out::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_friend_query_out

// repeated .rudb.db_player_info_t friends = 1;
inline int db_friend_query_out::friends_size() const {
  return friends_.size();
}
inline void db_friend_query_out::clear_friends() {
  friends_.Clear();
}
inline const ::rudb::db_player_info_t& db_friend_query_out::friends(int index) const {
  return friends_.Get(index);
}
inline ::rudb::db_player_info_t* db_friend_query_out::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_friend_query_out::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_friend_query_out::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_friend_query_out::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// db_friend_add_in

// required uint64 fuserid = 1;
inline bool db_friend_add_in::has_fuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_friend_add_in::set_has_fuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_friend_add_in::clear_has_fuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_friend_add_in::clear_fuserid() {
  fuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuserid();
}
inline ::google::protobuf::uint64 db_friend_add_in::fuserid() const {
  return fuserid_;
}
inline void db_friend_add_in::set_fuserid(::google::protobuf::uint64 value) {
  set_has_fuserid();
  fuserid_ = value;
}

// required uint32 freg_tm = 2;
inline bool db_friend_add_in::has_freg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_friend_add_in::set_has_freg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_friend_add_in::clear_has_freg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_friend_add_in::clear_freg_tm() {
  freg_tm_ = 0u;
  clear_has_freg_tm();
}
inline ::google::protobuf::uint32 db_friend_add_in::freg_tm() const {
  return freg_tm_;
}
inline void db_friend_add_in::set_freg_tm(::google::protobuf::uint32 value) {
  set_has_freg_tm();
  freg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_friend_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_friend_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_friend_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_friend_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_friend_add_in::zone_id() const {
  return zone_id_;
}
inline void db_friend_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_friend_del_in

// required uint32 zone_id = 1;
inline bool db_friend_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_friend_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_friend_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_friend_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_friend_del_in::zone_id() const {
  return zone_id_;
}
inline void db_friend_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 fuserid = 2;
inline bool db_friend_del_in::has_fuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_friend_del_in::set_has_fuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_friend_del_in::clear_has_fuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_friend_del_in::clear_fuserid() {
  fuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuserid();
}
inline ::google::protobuf::uint64 db_friend_del_in::fuserid() const {
  return fuserid_;
}
inline void db_friend_del_in::set_fuserid(::google::protobuf::uint64 value) {
  set_has_fuserid();
  fuserid_ = value;
}

// required uint32 freg_tm = 3;
inline bool db_friend_del_in::has_freg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_friend_del_in::set_has_freg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_friend_del_in::clear_has_freg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_friend_del_in::clear_freg_tm() {
  freg_tm_ = 0u;
  clear_has_freg_tm();
}
inline ::google::protobuf::uint32 db_friend_del_in::freg_tm() const {
  return freg_tm_;
}
inline void db_friend_del_in::set_freg_tm(::google::protobuf::uint32 value) {
  set_has_freg_tm();
  freg_tm_ = value;
}

// -------------------------------------------------------------------

// db_dnd_query_in

// required uint32 zone_id = 1;
inline bool db_dnd_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_dnd_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_dnd_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_dnd_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_dnd_query_in::zone_id() const {
  return zone_id_;
}
inline void db_dnd_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_dnd_query_out

// repeated .rudb.db_player_info_t dnds = 1;
inline int db_dnd_query_out::dnds_size() const {
  return dnds_.size();
}
inline void db_dnd_query_out::clear_dnds() {
  dnds_.Clear();
}
inline const ::rudb::db_player_info_t& db_dnd_query_out::dnds(int index) const {
  return dnds_.Get(index);
}
inline ::rudb::db_player_info_t* db_dnd_query_out::mutable_dnds(int index) {
  return dnds_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_dnd_query_out::add_dnds() {
  return dnds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_dnd_query_out::dnds() const {
  return dnds_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_dnd_query_out::mutable_dnds() {
  return &dnds_;
}

// -------------------------------------------------------------------

// db_dnd_add_in

// required uint32 zone_id = 1;
inline bool db_dnd_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_dnd_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_dnd_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_dnd_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_dnd_add_in::zone_id() const {
  return zone_id_;
}
inline void db_dnd_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 duserid = 2;
inline bool db_dnd_add_in::has_duserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_dnd_add_in::set_has_duserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_dnd_add_in::clear_has_duserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_dnd_add_in::clear_duserid() {
  duserid_ = GOOGLE_ULONGLONG(0);
  clear_has_duserid();
}
inline ::google::protobuf::uint64 db_dnd_add_in::duserid() const {
  return duserid_;
}
inline void db_dnd_add_in::set_duserid(::google::protobuf::uint64 value) {
  set_has_duserid();
  duserid_ = value;
}

// required uint32 dreg_tm = 3;
inline bool db_dnd_add_in::has_dreg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_dnd_add_in::set_has_dreg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_dnd_add_in::clear_has_dreg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_dnd_add_in::clear_dreg_tm() {
  dreg_tm_ = 0u;
  clear_has_dreg_tm();
}
inline ::google::protobuf::uint32 db_dnd_add_in::dreg_tm() const {
  return dreg_tm_;
}
inline void db_dnd_add_in::set_dreg_tm(::google::protobuf::uint32 value) {
  set_has_dreg_tm();
  dreg_tm_ = value;
}

// -------------------------------------------------------------------

// db_dnd_del_in

// required uint32 zone_id = 1;
inline bool db_dnd_del_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_dnd_del_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_dnd_del_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_dnd_del_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_dnd_del_in::zone_id() const {
  return zone_id_;
}
inline void db_dnd_del_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 duserid = 2;
inline bool db_dnd_del_in::has_duserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_dnd_del_in::set_has_duserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_dnd_del_in::clear_has_duserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_dnd_del_in::clear_duserid() {
  duserid_ = GOOGLE_ULONGLONG(0);
  clear_has_duserid();
}
inline ::google::protobuf::uint64 db_dnd_del_in::duserid() const {
  return duserid_;
}
inline void db_dnd_del_in::set_duserid(::google::protobuf::uint64 value) {
  set_has_duserid();
  duserid_ = value;
}

// required uint32 dreg_tm = 3;
inline bool db_dnd_del_in::has_dreg_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_dnd_del_in::set_has_dreg_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_dnd_del_in::clear_has_dreg_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_dnd_del_in::clear_dreg_tm() {
  dreg_tm_ = 0u;
  clear_has_dreg_tm();
}
inline ::google::protobuf::uint32 db_dnd_del_in::dreg_tm() const {
  return dreg_tm_;
}
inline void db_dnd_del_in::set_dreg_tm(::google::protobuf::uint32 value) {
  set_has_dreg_tm();
  dreg_tm_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_info

// required uint64 userid = 1;
inline bool db_ai_rank_info::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_info::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_ai_rank_info::userid() const {
  return userid_;
}
inline void db_ai_rank_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool db_ai_rank_info::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_info::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_info::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_info::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 db_ai_rank_info::reg_time() const {
  return reg_time_;
}
inline void db_ai_rank_info::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 rank = 3;
inline bool db_ai_rank_info::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_info::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_info::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_info::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_ai_rank_info::rank() const {
  return rank_;
}
inline void db_ai_rank_info::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_log_one_log

// required bytes name = 1;
inline bool db_ai_rank_log_one_log::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_log_one_log::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_log_one_log::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_log_one_log::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_ai_rank_log_one_log::name() const {
  return *name_;
}
inline void db_ai_rank_log_one_log::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_one_log::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_one_log::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_ai_rank_log_one_log::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_ai_rank_log_one_log::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool direct = 2;
inline bool db_ai_rank_log_one_log::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_log_one_log::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_log_one_log::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_log_one_log::clear_direct() {
  direct_ = false;
  clear_has_direct();
}
inline bool db_ai_rank_log_one_log::direct() const {
  return direct_;
}
inline void db_ai_rank_log_one_log::set_direct(bool value) {
  set_has_direct();
  direct_ = value;
}

// required bool win = 3;
inline bool db_ai_rank_log_one_log::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_log_one_log::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_log_one_log::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_log_one_log::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool db_ai_rank_log_one_log::win() const {
  return win_;
}
inline void db_ai_rank_log_one_log::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_log

// repeated .rudb.db_ai_rank_log.one_log logs = 1;
inline int db_ai_rank_log::logs_size() const {
  return logs_.size();
}
inline void db_ai_rank_log::clear_logs() {
  logs_.Clear();
}
inline const ::rudb::db_ai_rank_log_one_log& db_ai_rank_log::logs(int index) const {
  return logs_.Get(index);
}
inline ::rudb::db_ai_rank_log_one_log* db_ai_rank_log::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::rudb::db_ai_rank_log_one_log* db_ai_rank_log::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >&
db_ai_rank_log::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_log_one_log >*
db_ai_rank_log::mutable_logs() {
  return &logs_;
}

// -------------------------------------------------------------------

// db_ai_rank_add_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_add_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_add_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_add_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_add_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_add_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 accu_coin = 2;
inline bool db_ai_rank_add_in::has_accu_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_add_in::set_has_accu_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_add_in::clear_has_accu_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_add_in::clear_accu_coin() {
  accu_coin_ = 0u;
  clear_has_accu_coin();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::accu_coin() const {
  return accu_coin_;
}
inline void db_ai_rank_add_in::set_accu_coin(::google::protobuf::uint32 value) {
  set_has_accu_coin();
  accu_coin_ = value;
}

// required uint32 accu_reputation = 3;
inline bool db_ai_rank_add_in::has_accu_reputation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_add_in::set_has_accu_reputation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_add_in::clear_has_accu_reputation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_add_in::clear_accu_reputation() {
  accu_reputation_ = 0u;
  clear_has_accu_reputation();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::accu_reputation() const {
  return accu_reputation_;
}
inline void db_ai_rank_add_in::set_accu_reputation(::google::protobuf::uint32 value) {
  set_has_accu_reputation();
  accu_reputation_ = value;
}

// required uint32 accu_end_time = 4;
inline bool db_ai_rank_add_in::has_accu_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_ai_rank_add_in::set_has_accu_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_ai_rank_add_in::clear_has_accu_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_ai_rank_add_in::clear_accu_end_time() {
  accu_end_time_ = 0u;
  clear_has_accu_end_time();
}
inline ::google::protobuf::uint32 db_ai_rank_add_in::accu_end_time() const {
  return accu_end_time_;
}
inline void db_ai_rank_add_in::set_accu_end_time(::google::protobuf::uint32 value) {
  set_has_accu_end_time();
  accu_end_time_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_add_out

// required .rudb.db_player_pvai_info_t pvai_info = 1;
inline bool db_ai_rank_add_out::has_pvai_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_add_out::set_has_pvai_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_add_out::clear_has_pvai_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_add_out::clear_pvai_info() {
  if (pvai_info_ != NULL) pvai_info_->::rudb::db_player_pvai_info_t::Clear();
  clear_has_pvai_info();
}
inline const ::rudb::db_player_pvai_info_t& db_ai_rank_add_out::pvai_info() const {
  return pvai_info_ != NULL ? *pvai_info_ : *default_instance_->pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_ai_rank_add_out::mutable_pvai_info() {
  set_has_pvai_info();
  if (pvai_info_ == NULL) pvai_info_ = new ::rudb::db_player_pvai_info_t;
  return pvai_info_;
}
inline ::rudb::db_player_pvai_info_t* db_ai_rank_add_out::release_pvai_info() {
  clear_has_pvai_info();
  ::rudb::db_player_pvai_info_t* temp = pvai_info_;
  pvai_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_ai_rank_query_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_query_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_query_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_query_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_query_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_query_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_query_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 length = 2;
inline bool db_ai_rank_query_in::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_query_in::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_query_in::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_query_in::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 db_ai_rank_query_in::length() const {
  return length_;
}
inline void db_ai_rank_query_in::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_query_out

// required uint32 rank = 1;
inline bool db_ai_rank_query_out::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_query_out::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_query_out::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_query_out::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 db_ai_rank_query_out::rank() const {
  return rank_;
}
inline void db_ai_rank_query_out::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .rudb.db_ai_rank_info infos = 2;
inline int db_ai_rank_query_out::infos_size() const {
  return infos_.size();
}
inline void db_ai_rank_query_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_ai_rank_info& db_ai_rank_query_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_query_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_query_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
db_ai_rank_query_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
db_ai_rank_query_out::mutable_infos() {
  return &infos_;
}

// required .rudb.db_ai_rank_log log = 3;
inline bool db_ai_rank_query_out::has_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_query_out::set_has_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_query_out::clear_has_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_query_out::clear_log() {
  if (log_ != NULL) log_->::rudb::db_ai_rank_log::Clear();
  clear_has_log();
}
inline const ::rudb::db_ai_rank_log& db_ai_rank_query_out::log() const {
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::rudb::db_ai_rank_log* db_ai_rank_query_out::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::rudb::db_ai_rank_log;
  return log_;
}
inline ::rudb::db_ai_rank_log* db_ai_rank_query_out::release_log() {
  clear_has_log();
  ::rudb::db_ai_rank_log* temp = log_;
  log_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_ai_rank_exchange_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_exchange_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_exchange_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_exchange_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_exchange_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_exchange_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_exchange_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 target_userid = 2;
inline bool db_ai_rank_exchange_in::has_target_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_exchange_in::set_has_target_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_exchange_in::clear_has_target_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_exchange_in::clear_target_userid() {
  target_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_userid();
}
inline ::google::protobuf::uint64 db_ai_rank_exchange_in::target_userid() const {
  return target_userid_;
}
inline void db_ai_rank_exchange_in::set_target_userid(::google::protobuf::uint64 value) {
  set_has_target_userid();
  target_userid_ = value;
}

// required uint32 target_reg_time = 3;
inline bool db_ai_rank_exchange_in::has_target_reg_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_exchange_in::set_has_target_reg_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_exchange_in::clear_has_target_reg_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_exchange_in::clear_target_reg_time() {
  target_reg_time_ = 0u;
  clear_has_target_reg_time();
}
inline ::google::protobuf::uint32 db_ai_rank_exchange_in::target_reg_time() const {
  return target_reg_time_;
}
inline void db_ai_rank_exchange_in::set_target_reg_time(::google::protobuf::uint32 value) {
  set_has_target_reg_time();
  target_reg_time_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_range_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_range_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_range_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_range_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_range_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_range_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_range_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 start = 2;
inline bool db_ai_rank_range_in::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_range_in::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_range_in::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_range_in::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 db_ai_rank_range_in::start() const {
  return start_;
}
inline void db_ai_rank_range_in::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// required uint32 end = 3;
inline bool db_ai_rank_range_in::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_range_in::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_range_in::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_range_in::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 db_ai_rank_range_in::end() const {
  return end_;
}
inline void db_ai_rank_range_in::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// db_ai_rank_range_out

// repeated .rudb.db_ai_rank_info infos = 1;
inline int db_ai_rank_range_out::infos_size() const {
  return infos_.size();
}
inline void db_ai_rank_range_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_ai_rank_info& db_ai_rank_range_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_range_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_ai_rank_info* db_ai_rank_range_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >&
db_ai_rank_range_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_ai_rank_info >*
db_ai_rank_range_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_ai_rank_log_in

// required uint32 zone_id = 1;
inline bool db_ai_rank_log_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_ai_rank_log_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_ai_rank_log_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_ai_rank_log_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_ai_rank_log_in::zone_id() const {
  return zone_id_;
}
inline void db_ai_rank_log_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_ai_rank_log_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_ai_rank_log_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_ai_rank_log_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_ai_rank_log_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_ai_rank_log_in::name() const {
  return *name_;
}
inline void db_ai_rank_log_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_ai_rank_log_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_ai_rank_log_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_ai_rank_log_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 target_userid = 3;
inline bool db_ai_rank_log_in::has_target_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_ai_rank_log_in::set_has_target_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_ai_rank_log_in::clear_has_target_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_ai_rank_log_in::clear_target_userid() {
  target_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_userid();
}
inline ::google::protobuf::uint64 db_ai_rank_log_in::target_userid() const {
  return target_userid_;
}
inline void db_ai_rank_log_in::set_target_userid(::google::protobuf::uint64 value) {
  set_has_target_userid();
  target_userid_ = value;
}

// required uint32 target_reg_time = 4;
inline bool db_ai_rank_log_in::has_target_reg_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_ai_rank_log_in::set_has_target_reg_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_ai_rank_log_in::clear_has_target_reg_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_ai_rank_log_in::clear_target_reg_time() {
  target_reg_time_ = 0u;
  clear_has_target_reg_time();
}
inline ::google::protobuf::uint32 db_ai_rank_log_in::target_reg_time() const {
  return target_reg_time_;
}
inline void db_ai_rank_log_in::set_target_reg_time(::google::protobuf::uint32 value) {
  set_has_target_reg_time();
  target_reg_time_ = value;
}

// required bytes target_name = 5;
inline bool db_ai_rank_log_in::has_target_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_ai_rank_log_in::set_has_target_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_ai_rank_log_in::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_ai_rank_log_in::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& db_ai_rank_log_in::target_name() const {
  return *target_name_;
}
inline void db_ai_rank_log_in::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void db_ai_rank_log_in::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void db_ai_rank_log_in::set_target_name(const void* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_ai_rank_log_in::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* db_ai_rank_log_in::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool win = 6;
inline bool db_ai_rank_log_in::has_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_ai_rank_log_in::set_has_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_ai_rank_log_in::clear_has_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_ai_rank_log_in::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool db_ai_rank_log_in::win() const {
  return win_;
}
inline void db_ai_rank_log_in::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// db_update_pvai_basic_info_in

// required uint32 zone_id = 1;
inline bool db_update_pvai_basic_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_pvai_basic_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_pvai_basic_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_pvai_basic_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_update_pvai_basic_info_in::zone_id() const {
  return zone_id_;
}
inline void db_update_pvai_basic_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.db_player_info_t infos = 2;
inline int db_update_pvai_basic_info_in::infos_size() const {
  return infos_.size();
}
inline void db_update_pvai_basic_info_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::db_player_info_t& db_update_pvai_basic_info_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::db_player_info_t* db_update_pvai_basic_info_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_update_pvai_basic_info_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_update_pvai_basic_info_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_update_pvai_basic_info_in::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// activity_step_t

// required uint32 step_type = 1;
inline bool activity_step_t::has_step_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void activity_step_t::set_has_step_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void activity_step_t::clear_has_step_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void activity_step_t::clear_step_type() {
  step_type_ = 0u;
  clear_has_step_type();
}
inline ::google::protobuf::uint32 activity_step_t::step_type() const {
  return step_type_;
}
inline void activity_step_t::set_step_type(::google::protobuf::uint32 value) {
  set_has_step_type();
  step_type_ = value;
}

// required uint32 step_id = 2;
inline bool activity_step_t::has_step_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void activity_step_t::set_has_step_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void activity_step_t::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void activity_step_t::clear_step_id() {
  step_id_ = 0u;
  clear_has_step_id();
}
inline ::google::protobuf::uint32 activity_step_t::step_id() const {
  return step_id_;
}
inline void activity_step_t::set_step_id(::google::protobuf::uint32 value) {
  set_has_step_id();
  step_id_ = value;
}

// required uint32 step_value = 3;
inline bool activity_step_t::has_step_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void activity_step_t::set_has_step_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void activity_step_t::clear_has_step_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void activity_step_t::clear_step_value() {
  step_value_ = 0u;
  clear_has_step_value();
}
inline ::google::protobuf::uint32 activity_step_t::step_value() const {
  return step_value_;
}
inline void activity_step_t::set_step_value(::google::protobuf::uint32 value) {
  set_has_step_value();
  step_value_ = value;
}

// required uint32 is_need_step = 4;
inline bool activity_step_t::has_is_need_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void activity_step_t::set_has_is_need_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void activity_step_t::clear_has_is_need_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void activity_step_t::clear_is_need_step() {
  is_need_step_ = 0u;
  clear_has_is_need_step();
}
inline ::google::protobuf::uint32 activity_step_t::is_need_step() const {
  return is_need_step_;
}
inline void activity_step_t::set_is_need_step(::google::protobuf::uint32 value) {
  set_has_is_need_step();
  is_need_step_ = value;
}

// -------------------------------------------------------------------

// activity_info_t

// required uint32 activity_id = 1;
inline bool activity_info_t::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void activity_info_t::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void activity_info_t::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void activity_info_t::clear_activity_id() {
  activity_id_ = 0u;
  clear_has_activity_id();
}
inline ::google::protobuf::uint32 activity_info_t::activity_id() const {
  return activity_id_;
}
inline void activity_info_t::set_activity_id(::google::protobuf::uint32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// repeated .rudb.activity_step_t steps = 2;
inline int activity_info_t::steps_size() const {
  return steps_.size();
}
inline void activity_info_t::clear_steps() {
  steps_.Clear();
}
inline const ::rudb::activity_step_t& activity_info_t::steps(int index) const {
  return steps_.Get(index);
}
inline ::rudb::activity_step_t* activity_info_t::mutable_steps(int index) {
  return steps_.Mutable(index);
}
inline ::rudb::activity_step_t* activity_info_t::add_steps() {
  return steps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >&
activity_info_t::steps() const {
  return steps_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_step_t >*
activity_info_t::mutable_steps() {
  return &steps_;
}

// required uint32 revc_reward_times = 3;
inline bool activity_info_t::has_revc_reward_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void activity_info_t::set_has_revc_reward_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void activity_info_t::clear_has_revc_reward_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void activity_info_t::clear_revc_reward_times() {
  revc_reward_times_ = 0u;
  clear_has_revc_reward_times();
}
inline ::google::protobuf::uint32 activity_info_t::revc_reward_times() const {
  return revc_reward_times_;
}
inline void activity_info_t::set_revc_reward_times(::google::protobuf::uint32 value) {
  set_has_revc_reward_times();
  revc_reward_times_ = value;
}

// required uint32 dead_tm = 4;
inline bool activity_info_t::has_dead_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void activity_info_t::set_has_dead_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void activity_info_t::clear_has_dead_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void activity_info_t::clear_dead_tm() {
  dead_tm_ = 0u;
  clear_has_dead_tm();
}
inline ::google::protobuf::uint32 activity_info_t::dead_tm() const {
  return dead_tm_;
}
inline void activity_info_t::set_dead_tm(::google::protobuf::uint32 value) {
  set_has_dead_tm();
  dead_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_activity_list_in

// required uint32 zone_id = 1;
inline bool db_query_activity_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_activity_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_activity_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_activity_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_activity_list_in::zone_id() const {
  return zone_id_;
}
inline void db_query_activity_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_query_activity_list_out

// repeated .rudb.activity_info_t infos = 1;
inline int db_query_activity_list_out::infos_size() const {
  return infos_.size();
}
inline void db_query_activity_list_out::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::activity_info_t& db_query_activity_list_out::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::activity_info_t* db_query_activity_list_out::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::activity_info_t* db_query_activity_list_out::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
db_query_activity_list_out::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
db_query_activity_list_out::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_replace_activity_info_in

// required uint32 zone_id = 1;
inline bool db_replace_activity_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_replace_activity_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_replace_activity_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_replace_activity_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_replace_activity_info_in::zone_id() const {
  return zone_id_;
}
inline void db_replace_activity_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated .rudb.activity_info_t infos = 2;
inline int db_replace_activity_info_in::infos_size() const {
  return infos_.size();
}
inline void db_replace_activity_info_in::clear_infos() {
  infos_.Clear();
}
inline const ::rudb::activity_info_t& db_replace_activity_info_in::infos(int index) const {
  return infos_.Get(index);
}
inline ::rudb::activity_info_t* db_replace_activity_info_in::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::rudb::activity_info_t* db_replace_activity_info_in::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >&
db_replace_activity_info_in::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::activity_info_t >*
db_replace_activity_info_in::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_delete_activity_info_in

// required uint32 zone_id = 1;
inline bool db_delete_activity_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_delete_activity_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_delete_activity_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_delete_activity_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_delete_activity_info_in::zone_id() const {
  return zone_id_;
}
inline void db_delete_activity_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated uint32 activity_ids = 2;
inline int db_delete_activity_info_in::activity_ids_size() const {
  return activity_ids_.size();
}
inline void db_delete_activity_info_in::clear_activity_ids() {
  activity_ids_.Clear();
}
inline ::google::protobuf::uint32 db_delete_activity_info_in::activity_ids(int index) const {
  return activity_ids_.Get(index);
}
inline void db_delete_activity_info_in::set_activity_ids(int index, ::google::protobuf::uint32 value) {
  activity_ids_.Set(index, value);
}
inline void db_delete_activity_info_in::add_activity_ids(::google::protobuf::uint32 value) {
  activity_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
db_delete_activity_info_in::activity_ids() const {
  return activity_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
db_delete_activity_info_in::mutable_activity_ids() {
  return &activity_ids_;
}

// -------------------------------------------------------------------

// mail_item_attachment_t

// required uint32 item_id = 1;
inline bool mail_item_attachment_t::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_item_attachment_t::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_item_attachment_t::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_item_attachment_t::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 mail_item_attachment_t::item_id() const {
  return item_id_;
}
inline void mail_item_attachment_t::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 item_num = 2;
inline bool mail_item_attachment_t::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_item_attachment_t::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_item_attachment_t::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_item_attachment_t::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 mail_item_attachment_t::item_num() const {
  return item_num_;
}
inline void mail_item_attachment_t::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// db_mail_info_t

// required uint64 mail_id = 1;
inline bool db_mail_info_t::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_mail_info_t::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_mail_info_t::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_mail_info_t::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 db_mail_info_t::mail_id() const {
  return mail_id_;
}
inline void db_mail_info_t::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required bytes title = 2;
inline bool db_mail_info_t::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_mail_info_t::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_mail_info_t::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_mail_info_t::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_mail_info_t::title() const {
  return *title_;
}
inline void db_mail_info_t::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_info_t::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_info_t::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_info_t::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_mail_info_t::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes come_from = 3;
inline bool db_mail_info_t::has_come_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_mail_info_t::set_has_come_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_mail_info_t::clear_has_come_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_mail_info_t::clear_come_from() {
  if (come_from_ != &::google::protobuf::internal::kEmptyString) {
    come_from_->clear();
  }
  clear_has_come_from();
}
inline const ::std::string& db_mail_info_t::come_from() const {
  return *come_from_;
}
inline void db_mail_info_t::set_come_from(const ::std::string& value) {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  come_from_->assign(value);
}
inline void db_mail_info_t::set_come_from(const char* value) {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  come_from_->assign(value);
}
inline void db_mail_info_t::set_come_from(const void* value, size_t size) {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  come_from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_info_t::mutable_come_from() {
  set_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    come_from_ = new ::std::string;
  }
  return come_from_;
}
inline ::std::string* db_mail_info_t::release_come_from() {
  clear_has_come_from();
  if (come_from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = come_from_;
    come_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 4;
inline bool db_mail_info_t::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_mail_info_t::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_mail_info_t::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_mail_info_t::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_mail_info_t::content() const {
  return *content_;
}
inline void db_mail_info_t::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_mail_info_t::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_mail_info_t::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_info_t::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_mail_info_t::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rudb.mail_item_attachment_t items = 5;
inline int db_mail_info_t::items_size() const {
  return items_.size();
}
inline void db_mail_info_t::clear_items() {
  items_.Clear();
}
inline const ::rudb::mail_item_attachment_t& db_mail_info_t::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::mail_item_attachment_t* db_mail_info_t::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::mail_item_attachment_t* db_mail_info_t::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >&
db_mail_info_t::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_item_attachment_t >*
db_mail_info_t::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_add_new_mail_in

// required uint32 zone_id = 1;
inline bool db_add_new_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_new_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_new_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_new_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_add_new_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required .rudb.db_mail_info_t mail_info = 2;
inline bool db_add_new_mail_in::has_mail_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_new_mail_in::set_has_mail_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_new_mail_in::clear_has_mail_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_new_mail_in::clear_mail_info() {
  if (mail_info_ != NULL) mail_info_->::rudb::db_mail_info_t::Clear();
  clear_has_mail_info();
}
inline const ::rudb::db_mail_info_t& db_add_new_mail_in::mail_info() const {
  return mail_info_ != NULL ? *mail_info_ : *default_instance_->mail_info_;
}
inline ::rudb::db_mail_info_t* db_add_new_mail_in::mutable_mail_info() {
  set_has_mail_info();
  if (mail_info_ == NULL) mail_info_ = new ::rudb::db_mail_info_t;
  return mail_info_;
}
inline ::rudb::db_mail_info_t* db_add_new_mail_in::release_mail_info() {
  clear_has_mail_info();
  ::rudb::db_mail_info_t* temp = mail_info_;
  mail_info_ = NULL;
  return temp;
}

// optional uint32 gm_server_id = 3;
inline bool db_add_new_mail_in::has_gm_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_new_mail_in::set_has_gm_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_new_mail_in::clear_has_gm_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_new_mail_in::clear_gm_server_id() {
  gm_server_id_ = 0u;
  clear_has_gm_server_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_in::gm_server_id() const {
  return gm_server_id_;
}
inline void db_add_new_mail_in::set_gm_server_id(::google::protobuf::uint32 value) {
  set_has_gm_server_id();
  gm_server_id_ = value;
}

// -------------------------------------------------------------------

// db_add_new_mail_out

// required uint32 zone_id = 1;
inline bool db_add_new_mail_out::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_new_mail_out::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_new_mail_out::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_new_mail_out::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_out::zone_id() const {
  return zone_id_;
}
inline void db_add_new_mail_out::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint64 mail_id = 2;
inline bool db_add_new_mail_out::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_new_mail_out::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_new_mail_out::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_new_mail_out::clear_mail_id() {
  mail_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::uint64 db_add_new_mail_out::mail_id() const {
  return mail_id_;
}
inline void db_add_new_mail_out::set_mail_id(::google::protobuf::uint64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional uint32 gm_server_id = 3;
inline bool db_add_new_mail_out::has_gm_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_new_mail_out::set_has_gm_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_new_mail_out::clear_has_gm_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_new_mail_out::clear_gm_server_id() {
  gm_server_id_ = 0u;
  clear_has_gm_server_id();
}
inline ::google::protobuf::uint32 db_add_new_mail_out::gm_server_id() const {
  return gm_server_id_;
}
inline void db_add_new_mail_out::set_gm_server_id(::google::protobuf::uint32 value) {
  set_has_gm_server_id();
  gm_server_id_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_infos_in

// required uint32 zone_id = 1;
inline bool db_query_mail_infos_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_infos_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_infos_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_infos_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_mail_infos_in::zone_id() const {
  return zone_id_;
}
inline void db_query_mail_infos_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// repeated uint64 mail_ids = 2;
inline int db_query_mail_infos_in::mail_ids_size() const {
  return mail_ids_.size();
}
inline void db_query_mail_infos_in::clear_mail_ids() {
  mail_ids_.Clear();
}
inline ::google::protobuf::uint64 db_query_mail_infos_in::mail_ids(int index) const {
  return mail_ids_.Get(index);
}
inline void db_query_mail_infos_in::set_mail_ids(int index, ::google::protobuf::uint64 value) {
  mail_ids_.Set(index, value);
}
inline void db_query_mail_infos_in::add_mail_ids(::google::protobuf::uint64 value) {
  mail_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
db_query_mail_infos_in::mail_ids() const {
  return mail_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
db_query_mail_infos_in::mutable_mail_ids() {
  return &mail_ids_;
}

// required uint32 query_cmd = 3;
inline bool db_query_mail_infos_in::has_query_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_infos_in::set_has_query_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_infos_in::clear_has_query_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_infos_in::clear_query_cmd() {
  query_cmd_ = 0u;
  clear_has_query_cmd();
}
inline ::google::protobuf::uint32 db_query_mail_infos_in::query_cmd() const {
  return query_cmd_;
}
inline void db_query_mail_infos_in::set_query_cmd(::google::protobuf::uint32 value) {
  set_has_query_cmd();
  query_cmd_ = value;
}

// optional uint32 page_num = 4;
inline bool db_query_mail_infos_in::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_query_mail_infos_in::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_query_mail_infos_in::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_query_mail_infos_in::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 db_query_mail_infos_in::page_num() const {
  return page_num_;
}
inline void db_query_mail_infos_in::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_infos_out

// repeated .rudb.db_mail_info_t mail_infos = 1;
inline int db_query_mail_infos_out::mail_infos_size() const {
  return mail_infos_.size();
}
inline void db_query_mail_infos_out::clear_mail_infos() {
  mail_infos_.Clear();
}
inline const ::rudb::db_mail_info_t& db_query_mail_infos_out::mail_infos(int index) const {
  return mail_infos_.Get(index);
}
inline ::rudb::db_mail_info_t* db_query_mail_infos_out::mutable_mail_infos(int index) {
  return mail_infos_.Mutable(index);
}
inline ::rudb::db_mail_info_t* db_query_mail_infos_out::add_mail_infos() {
  return mail_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >&
db_query_mail_infos_out::mail_infos() const {
  return mail_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_info_t >*
db_query_mail_infos_out::mutable_mail_infos() {
  return &mail_infos_;
}

// required uint32 query_cmd = 2;
inline bool db_query_mail_infos_out::has_query_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_infos_out::set_has_query_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_infos_out::clear_has_query_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_infos_out::clear_query_cmd() {
  query_cmd_ = 0u;
  clear_has_query_cmd();
}
inline ::google::protobuf::uint32 db_query_mail_infos_out::query_cmd() const {
  return query_cmd_;
}
inline void db_query_mail_infos_out::set_query_cmd(::google::protobuf::uint32 value) {
  set_has_query_cmd();
  query_cmd_ = value;
}

// optional uint32 page_num = 3;
inline bool db_query_mail_infos_out::has_page_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_infos_out::set_has_page_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_infos_out::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_infos_out::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 db_query_mail_infos_out::page_num() const {
  return page_num_;
}
inline void db_query_mail_infos_out::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// db_query_players_info_in

// required uint32 zone_id = 1;
inline bool db_query_players_info_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_players_info_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_players_info_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_players_info_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_players_info_in::zone_id() const {
  return zone_id_;
}
inline void db_query_players_info_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 cmd = 2;
inline bool db_query_players_info_in::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_players_info_in::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_players_info_in::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_players_info_in::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 db_query_players_info_in::cmd() const {
  return cmd_;
}
inline void db_query_players_info_in::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required bool is_ref_cnt_cmd = 3;
inline bool db_query_players_info_in::has_is_ref_cnt_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_players_info_in::set_has_is_ref_cnt_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_players_info_in::clear_has_is_ref_cnt_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_players_info_in::clear_is_ref_cnt_cmd() {
  is_ref_cnt_cmd_ = false;
  clear_has_is_ref_cnt_cmd();
}
inline bool db_query_players_info_in::is_ref_cnt_cmd() const {
  return is_ref_cnt_cmd_;
}
inline void db_query_players_info_in::set_is_ref_cnt_cmd(bool value) {
  set_has_is_ref_cnt_cmd();
  is_ref_cnt_cmd_ = value;
}

// repeated .rudb.db_player_info_t players = 4;
inline int db_query_players_info_in::players_size() const {
  return players_.size();
}
inline void db_query_players_info_in::clear_players() {
  players_.Clear();
}
inline const ::rudb::db_player_info_t& db_query_players_info_in::players(int index) const {
  return players_.Get(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_in::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_in::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_query_players_info_in::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_query_players_info_in::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// db_query_players_info_out

// required uint32 cmd = 1;
inline bool db_query_players_info_out::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_players_info_out::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_players_info_out::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_players_info_out::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 db_query_players_info_out::cmd() const {
  return cmd_;
}
inline void db_query_players_info_out::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required bool is_ref_cnt_cmd = 2;
inline bool db_query_players_info_out::has_is_ref_cnt_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_players_info_out::set_has_is_ref_cnt_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_players_info_out::clear_has_is_ref_cnt_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_players_info_out::clear_is_ref_cnt_cmd() {
  is_ref_cnt_cmd_ = false;
  clear_has_is_ref_cnt_cmd();
}
inline bool db_query_players_info_out::is_ref_cnt_cmd() const {
  return is_ref_cnt_cmd_;
}
inline void db_query_players_info_out::set_is_ref_cnt_cmd(bool value) {
  set_has_is_ref_cnt_cmd();
  is_ref_cnt_cmd_ = value;
}

// repeated .rudb.db_player_info_t players = 3;
inline int db_query_players_info_out::players_size() const {
  return players_.size();
}
inline void db_query_players_info_out::clear_players() {
  players_.Clear();
}
inline const ::rudb::db_player_info_t& db_query_players_info_out::players(int index) const {
  return players_.Get(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_out::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::rudb::db_player_info_t* db_query_players_info_out::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >&
db_query_players_info_out::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_player_info_t >*
db_query_players_info_out::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// db_query_userinfo_by_name_zone_in

// required uint32 zone_id = 1;
inline bool db_query_userinfo_by_name_zone_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_userinfo_by_name_zone_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_userinfo_by_name_zone_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_userinfo_by_name_zone_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_userinfo_by_name_zone_in::zone_id() const {
  return zone_id_;
}
inline void db_query_userinfo_by_name_zone_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes name = 2;
inline bool db_query_userinfo_by_name_zone_in::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_userinfo_by_name_zone_in::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_userinfo_by_name_zone_in::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_userinfo_by_name_zone_in::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_query_userinfo_by_name_zone_in::name() const {
  return *name_;
}
inline void db_query_userinfo_by_name_zone_in::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_userinfo_by_name_zone_in::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_query_userinfo_by_name_zone_in::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_userinfo_by_name_zone_in::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_query_userinfo_by_name_zone_in::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 channelid = 3;
inline bool db_query_userinfo_by_name_zone_in::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_userinfo_by_name_zone_in::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_userinfo_by_name_zone_in::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_userinfo_by_name_zone_in::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 db_query_userinfo_by_name_zone_in::channelid() const {
  return channelid_;
}
inline void db_query_userinfo_by_name_zone_in::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
}

// -------------------------------------------------------------------

// db_query_userinfo_by_name_zone_out

// required uint64 userid = 1;
inline bool db_query_userinfo_by_name_zone_out::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_userinfo_by_name_zone_out::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_userinfo_by_name_zone_out::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_userinfo_by_name_zone_out::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_query_userinfo_by_name_zone_out::userid() const {
  return userid_;
}
inline void db_query_userinfo_by_name_zone_out::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_query_userinfo_by_name_zone_out::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_userinfo_by_name_zone_out::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_userinfo_by_name_zone_out::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_userinfo_by_name_zone_out::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_query_userinfo_by_name_zone_out::reg_tm() const {
  return reg_tm_;
}
inline void db_query_userinfo_by_name_zone_out::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_list_in

// required uint32 zone_id = 1;
inline bool db_query_mail_list_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_list_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_list_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_list_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_mail_list_in::zone_id() const {
  return zone_id_;
}
inline void db_query_mail_list_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_mail_list

// required uint32 mailid = 1;
inline bool db_mail_list::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_mail_list::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_mail_list::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_mail_list::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_mail_list::mailid() const {
  return mailid_;
}
inline void db_mail_list::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional bytes title = 2;
inline bool db_mail_list::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_mail_list::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_mail_list::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_mail_list::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_mail_list::title() const {
  return *title_;
}
inline void db_mail_list::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_list::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_mail_list::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_mail_list::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_mail_list::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool hasread = 3;
inline bool db_mail_list::has_hasread() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_mail_list::set_has_hasread() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_mail_list::clear_has_hasread() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_mail_list::clear_hasread() {
  hasread_ = false;
  clear_has_hasread();
}
inline bool db_mail_list::hasread() const {
  return hasread_;
}
inline void db_mail_list::set_hasread(bool value) {
  set_has_hasread();
  hasread_ = value;
}

// required bool hasattach = 4;
inline bool db_mail_list::has_hasattach() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_mail_list::set_has_hasattach() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_mail_list::clear_has_hasattach() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_mail_list::clear_hasattach() {
  hasattach_ = false;
  clear_has_hasattach();
}
inline bool db_mail_list::hasattach() const {
  return hasattach_;
}
inline void db_mail_list::set_hasattach(bool value) {
  set_has_hasattach();
  hasattach_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_list_out

// repeated .rudb.db_mail_list maillist = 1;
inline int db_query_mail_list_out::maillist_size() const {
  return maillist_.size();
}
inline void db_query_mail_list_out::clear_maillist() {
  maillist_.Clear();
}
inline const ::rudb::db_mail_list& db_query_mail_list_out::maillist(int index) const {
  return maillist_.Get(index);
}
inline ::rudb::db_mail_list* db_query_mail_list_out::mutable_maillist(int index) {
  return maillist_.Mutable(index);
}
inline ::rudb::db_mail_list* db_query_mail_list_out::add_maillist() {
  return maillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >&
db_query_mail_list_out::maillist() const {
  return maillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_mail_list >*
db_query_mail_list_out::mutable_maillist() {
  return &maillist_;
}

// optional .rudb.db_query_mail_out mail = 2;
inline bool db_query_mail_list_out::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_list_out::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_list_out::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_list_out::clear_mail() {
  if (mail_ != NULL) mail_->::rudb::db_query_mail_out::Clear();
  clear_has_mail();
}
inline const ::rudb::db_query_mail_out& db_query_mail_list_out::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::rudb::db_query_mail_out* db_query_mail_list_out::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::rudb::db_query_mail_out;
  return mail_;
}
inline ::rudb::db_query_mail_out* db_query_mail_list_out::release_mail() {
  clear_has_mail();
  ::rudb::db_query_mail_out* temp = mail_;
  mail_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// db_query_mail_in

// required uint32 zone_id = 1;
inline bool db_query_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_query_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_query_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 mail_id = 2;
inline bool db_query_mail_in::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_in::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_in::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_in::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 db_query_mail_in::mail_id() const {
  return mail_id_;
}
inline void db_query_mail_in::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// db_query_mail_out

// required uint32 mailid = 1;
inline bool db_query_mail_out::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_query_mail_out::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_query_mail_out::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_query_mail_out::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_query_mail_out::mailid() const {
  return mailid_;
}
inline void db_query_mail_out::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional bytes title = 2;
inline bool db_query_mail_out::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_query_mail_out::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_query_mail_out::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_query_mail_out::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_query_mail_out::title() const {
  return *title_;
}
inline void db_query_mail_out::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_query_mail_out::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_query_mail_out::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_query_mail_out::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes from = 3;
inline bool db_query_mail_out::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_query_mail_out::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_query_mail_out::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_query_mail_out::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& db_query_mail_out::from() const {
  return *from_;
}
inline void db_query_mail_out::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_query_mail_out::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_query_mail_out::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* db_query_mail_out::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes content = 4;
inline bool db_query_mail_out::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_query_mail_out::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_query_mail_out::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_query_mail_out::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_query_mail_out::content() const {
  return *content_;
}
inline void db_query_mail_out::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_query_mail_out::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_query_mail_out::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_query_mail_out::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes items = 5;
inline bool db_query_mail_out::has_items() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_query_mail_out::set_has_items() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_query_mail_out::clear_has_items() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_query_mail_out::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& db_query_mail_out::items() const {
  return *items_;
}
inline void db_query_mail_out::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_query_mail_out::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_query_mail_out::set_items(const void* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* db_query_mail_out::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool hasget = 6;
inline bool db_query_mail_out::has_hasget() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_query_mail_out::set_has_hasget() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_query_mail_out::clear_has_hasget() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_query_mail_out::clear_hasget() {
  hasget_ = false;
  clear_has_hasget();
}
inline bool db_query_mail_out::hasget() const {
  return hasget_;
}
inline void db_query_mail_out::set_hasget(bool value) {
  set_has_hasget();
  hasget_ = value;
}

// required bytes from_tm = 7;
inline bool db_query_mail_out::has_from_tm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_query_mail_out::set_has_from_tm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_query_mail_out::clear_has_from_tm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_query_mail_out::clear_from_tm() {
  if (from_tm_ != &::google::protobuf::internal::kEmptyString) {
    from_tm_->clear();
  }
  clear_has_from_tm();
}
inline const ::std::string& db_query_mail_out::from_tm() const {
  return *from_tm_;
}
inline void db_query_mail_out::set_from_tm(const ::std::string& value) {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  from_tm_->assign(value);
}
inline void db_query_mail_out::set_from_tm(const char* value) {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  from_tm_->assign(value);
}
inline void db_query_mail_out::set_from_tm(const void* value, size_t size) {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  from_tm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_query_mail_out::mutable_from_tm() {
  set_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    from_tm_ = new ::std::string;
  }
  return from_tm_;
}
inline ::std::string* db_query_mail_out::release_from_tm() {
  clear_has_from_tm();
  if (from_tm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_tm_;
    from_tm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// db_get_attach_in

// required uint32 mailid = 1;
inline bool db_get_attach_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_attach_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_attach_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_attach_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_get_attach_in::mailid() const {
  return mailid_;
}
inline void db_get_attach_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_get_attach_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_attach_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_attach_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_attach_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_attach_in::zone_id() const {
  return zone_id_;
}
inline void db_get_attach_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_get_attach_out

// required bool hasget = 1;
inline bool db_get_attach_out::has_hasget() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_attach_out::set_has_hasget() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_attach_out::clear_has_hasget() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_attach_out::clear_hasget() {
  hasget_ = false;
  clear_has_hasget();
}
inline bool db_get_attach_out::hasget() const {
  return hasget_;
}
inline void db_get_attach_out::set_hasget(bool value) {
  set_has_hasget();
  hasget_ = value;
}

// required bytes items = 2;
inline bool db_get_attach_out::has_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_attach_out::set_has_items() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_attach_out::clear_has_items() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_attach_out::clear_items() {
  if (items_ != &::google::protobuf::internal::kEmptyString) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& db_get_attach_out::items() const {
  return *items_;
}
inline void db_get_attach_out::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_get_attach_out::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(value);
}
inline void db_get_attach_out::set_items(const void* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_get_attach_out::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    items_ = new ::std::string;
  }
  return items_;
}
inline ::std::string* db_get_attach_out::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 mailid = 3;
inline bool db_get_attach_out::has_mailid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_attach_out::set_has_mailid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_attach_out::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_attach_out::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_get_attach_out::mailid() const {
  return mailid_;
}
inline void db_get_attach_out::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// -------------------------------------------------------------------

// db_get_attach_success_in

// required uint32 mailid = 1;
inline bool db_get_attach_success_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_attach_success_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_attach_success_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_attach_success_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_get_attach_success_in::mailid() const {
  return mailid_;
}
inline void db_get_attach_success_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_get_attach_success_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_attach_success_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_attach_success_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_attach_success_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_get_attach_success_in::zone_id() const {
  return zone_id_;
}
inline void db_get_attach_success_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_del_mail_in

// required uint32 mailid = 1;
inline bool db_del_mail_in::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_del_mail_in::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_del_mail_in::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_del_mail_in::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 db_del_mail_in::mailid() const {
  return mailid_;
}
inline void db_del_mail_in::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 zone_id = 2;
inline bool db_del_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_del_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_del_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_del_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_del_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_del_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_new_mail_in

// required uint32 zone_id = 1;
inline bool db_new_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_new_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_new_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_new_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_new_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_new_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// db_new_mail_out

// required uint32 hasnew = 1;
inline bool db_new_mail_out::has_hasnew() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_new_mail_out::set_has_hasnew() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_new_mail_out::clear_has_hasnew() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_new_mail_out::clear_hasnew() {
  hasnew_ = 0u;
  clear_has_hasnew();
}
inline ::google::protobuf::uint32 db_new_mail_out::hasnew() const {
  return hasnew_;
}
inline void db_new_mail_out::set_hasnew(::google::protobuf::uint32 value) {
  set_has_hasnew();
  hasnew_ = value;
}

// -------------------------------------------------------------------

// db_attach

// required uint32 id = 1;
inline bool db_attach::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_attach::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_attach::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_attach::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 db_attach::id() const {
  return id_;
}
inline void db_attach::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 num = 2;
inline bool db_attach::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_attach::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_attach::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_attach::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 db_attach::num() const {
  return num_;
}
inline void db_attach::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// db_add_mail_in

// required uint32 zone_id = 1;
inline bool db_add_mail_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_mail_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_mail_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_mail_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_mail_in::zone_id() const {
  return zone_id_;
}
inline void db_add_mail_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required bytes title = 2;
inline bool db_add_mail_in::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_mail_in::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_mail_in::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_mail_in::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_add_mail_in::title() const {
  return *title_;
}
inline void db_add_mail_in::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_in::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_in::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_in::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_add_mail_in::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes from = 3;
inline bool db_add_mail_in::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_mail_in::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_mail_in::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_mail_in::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& db_add_mail_in::from() const {
  return *from_;
}
inline void db_add_mail_in::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_in::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_in::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_in::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* db_add_mail_in::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 4;
inline bool db_add_mail_in::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_add_mail_in::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_add_mail_in::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_add_mail_in::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_add_mail_in::content() const {
  return *content_;
}
inline void db_add_mail_in::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_in::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_in::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_in::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_add_mail_in::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rudb.db_attach items = 5;
inline int db_add_mail_in::items_size() const {
  return items_.size();
}
inline void db_add_mail_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_attach& db_add_mail_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_attach* db_add_mail_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_attach* db_add_mail_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
db_add_mail_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
db_add_mail_in::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// db_add_mail_by_switch_in

// required bytes title = 1;
inline bool db_add_mail_by_switch_in::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_mail_by_switch_in::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_mail_by_switch_in::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& db_add_mail_by_switch_in::title() const {
  return *title_;
}
inline void db_add_mail_by_switch_in::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_by_switch_in::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void db_add_mail_by_switch_in::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_by_switch_in::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* db_add_mail_by_switch_in::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes from = 2;
inline bool db_add_mail_by_switch_in::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_mail_by_switch_in::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_mail_by_switch_in::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& db_add_mail_by_switch_in::from() const {
  return *from_;
}
inline void db_add_mail_by_switch_in::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_by_switch_in::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void db_add_mail_by_switch_in::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_by_switch_in::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* db_add_mail_by_switch_in::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes content = 3;
inline bool db_add_mail_by_switch_in::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_mail_by_switch_in::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_mail_by_switch_in::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_add_mail_by_switch_in::content() const {
  return *content_;
}
inline void db_add_mail_by_switch_in::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_by_switch_in::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_add_mail_by_switch_in::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_add_mail_by_switch_in::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_add_mail_by_switch_in::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rudb.db_attach items = 4;
inline int db_add_mail_by_switch_in::items_size() const {
  return items_.size();
}
inline void db_add_mail_by_switch_in::clear_items() {
  items_.Clear();
}
inline const ::rudb::db_attach& db_add_mail_by_switch_in::items(int index) const {
  return items_.Get(index);
}
inline ::rudb::db_attach* db_add_mail_by_switch_in::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::rudb::db_attach* db_add_mail_by_switch_in::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >&
db_add_mail_by_switch_in::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::db_attach >*
db_add_mail_by_switch_in::mutable_items() {
  return &items_;
}

// required uint32 server_id = 5;
inline bool db_add_mail_by_switch_in::has_server_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_add_mail_by_switch_in::set_has_server_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_add_mail_by_switch_in::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_add_mail_by_switch_in::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 db_add_mail_by_switch_in::server_id() const {
  return server_id_;
}
inline void db_add_mail_by_switch_in::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// db_add_mail_by_switch_out

// required int32 mail_id = 1;
inline bool db_add_mail_by_switch_out::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_mail_by_switch_out::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_mail_by_switch_out::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_mail_by_switch_out::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 db_add_mail_by_switch_out::mail_id() const {
  return mail_id_;
}
inline void db_add_mail_by_switch_out::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required uint32 server_id = 2;
inline bool db_add_mail_by_switch_out::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_mail_by_switch_out::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_mail_by_switch_out::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_mail_by_switch_out::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 db_add_mail_by_switch_out::server_id() const {
  return server_id_;
}
inline void db_add_mail_by_switch_out::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// mail_rel

// required uint64 userid = 1;
inline bool mail_rel::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_rel::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_rel::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_rel::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 mail_rel::userid() const {
  return userid_;
}
inline void mail_rel::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_time = 2;
inline bool mail_rel::has_reg_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_rel::set_has_reg_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_rel::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_rel::clear_reg_time() {
  reg_time_ = 0u;
  clear_has_reg_time();
}
inline ::google::protobuf::uint32 mail_rel::reg_time() const {
  return reg_time_;
}
inline void mail_rel::set_reg_time(::google::protobuf::uint32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// required uint32 zone_id = 3;
inline bool mail_rel::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_rel::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_rel::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_rel::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 mail_rel::zone_id() const {
  return zone_id_;
}
inline void mail_rel::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 mail_id = 4;
inline bool mail_rel::has_mail_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_rel::set_has_mail_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_rel::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_rel::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 mail_rel::mail_id() const {
  return mail_id_;
}
inline void mail_rel::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required uint32 hasattach = 5;
inline bool mail_rel::has_hasattach() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_rel::set_has_hasattach() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_rel::clear_has_hasattach() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_rel::clear_hasattach() {
  hasattach_ = 0u;
  clear_has_hasattach();
}
inline ::google::protobuf::uint32 mail_rel::hasattach() const {
  return hasattach_;
}
inline void mail_rel::set_hasattach(::google::protobuf::uint32 value) {
  set_has_hasattach();
  hasattach_ = value;
}

// -------------------------------------------------------------------

// db_add_mail_rel_by_switch_in

// repeated .rudb.mail_rel info = 1;
inline int db_add_mail_rel_by_switch_in::info_size() const {
  return info_.size();
}
inline void db_add_mail_rel_by_switch_in::clear_info() {
  info_.Clear();
}
inline const ::rudb::mail_rel& db_add_mail_rel_by_switch_in::info(int index) const {
  return info_.Get(index);
}
inline ::rudb::mail_rel* db_add_mail_rel_by_switch_in::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::rudb::mail_rel* db_add_mail_rel_by_switch_in::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >&
db_add_mail_rel_by_switch_in::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::rudb::mail_rel >*
db_add_mail_rel_by_switch_in::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// db_add_mail_rel_flush_in

// -------------------------------------------------------------------

// db_add_diamond_by_switch_in

// required uint64 userid = 1;
inline bool db_add_diamond_by_switch_in::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_diamond_by_switch_in::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_diamond_by_switch_in::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 db_add_diamond_by_switch_in::userid() const {
  return userid_;
}
inline void db_add_diamond_by_switch_in::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint32 reg_tm = 2;
inline bool db_add_diamond_by_switch_in::has_reg_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_reg_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_diamond_by_switch_in::clear_has_reg_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_diamond_by_switch_in::clear_reg_tm() {
  reg_tm_ = 0u;
  clear_has_reg_tm();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::reg_tm() const {
  return reg_tm_;
}
inline void db_add_diamond_by_switch_in::set_reg_tm(::google::protobuf::uint32 value) {
  set_has_reg_tm();
  reg_tm_ = value;
}

// required uint32 zone_id = 3;
inline bool db_add_diamond_by_switch_in::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_diamond_by_switch_in::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_diamond_by_switch_in::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::zone_id() const {
  return zone_id_;
}
inline void db_add_diamond_by_switch_in::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required uint32 add_diamond_num = 4;
inline bool db_add_diamond_by_switch_in::has_add_diamond_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_add_diamond_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_add_diamond_by_switch_in::clear_has_add_diamond_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_add_diamond_by_switch_in::clear_add_diamond_num() {
  add_diamond_num_ = 0u;
  clear_has_add_diamond_num();
}
inline ::google::protobuf::uint32 db_add_diamond_by_switch_in::add_diamond_num() const {
  return add_diamond_num_;
}
inline void db_add_diamond_by_switch_in::set_add_diamond_num(::google::protobuf::uint32 value) {
  set_has_add_diamond_num();
  add_diamond_num_ = value;
}

// required uint64 order_index = 5;
inline bool db_add_diamond_by_switch_in::has_order_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_add_diamond_by_switch_in::set_has_order_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_add_diamond_by_switch_in::clear_has_order_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_add_diamond_by_switch_in::clear_order_index() {
  order_index_ = GOOGLE_ULONGLONG(0);
  clear_has_order_index();
}
inline ::google::protobuf::uint64 db_add_diamond_by_switch_in::order_index() const {
  return order_index_;
}
inline void db_add_diamond_by_switch_in::set_order_index(::google::protobuf::uint64 value) {
  set_has_order_index();
  order_index_ = value;
}

// -------------------------------------------------------------------

// db_add_diamond_by_switch_out

// required uint64 order_index = 1;
inline bool db_add_diamond_by_switch_out::has_order_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_diamond_by_switch_out::set_has_order_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_diamond_by_switch_out::clear_has_order_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_diamond_by_switch_out::clear_order_index() {
  order_index_ = GOOGLE_ULONGLONG(0);
  clear_has_order_index();
}
inline ::google::protobuf::uint64 db_add_diamond_by_switch_out::order_index() const {
  return order_index_;
}
inline void db_add_diamond_by_switch_out::set_order_index(::google::protobuf::uint64 value) {
  set_has_order_index();
  order_index_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rudb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
