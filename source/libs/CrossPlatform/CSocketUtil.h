#ifndef __SOCKET_UTIL_H__
#define __SOCKET_UTIL_H__

#define	SCKISIGNORED	-2	//被丢弃的SCK，ReadSocket的返回值
#define MSG_HEAD_LEN  20    //消息头长度
#define	MAX_PKG_LEN	  102400  //最大包长度

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>

#ifndef WIN32
#	include <sys/ioctl.h>
#	include <netdb.h>
#	include <unistd.h>
#	include <sys/socket.h>
#	include <netinet/in.h>
#	include <netinet/tcp.h>
#	include <arpa/inet.h>
#	include <unistd.h>
#else
#	include "Win32Platform/socket_win32.h"
#	include <Windows.h>
#endif


#include <errno.h>
#include <signal.h>
#include <time.h>

//#define USE_BOOST_ASIO

#ifdef USE_BOOST_ASIO
#include <Boost/asio.hpp>
#include "boost/thread.hpp"
#endif

class CSocketUtilDelegate
{
public:
    virtual void didRecieveData(const char *m_data){}

#ifdef USE_BOOST_ASIO
	enum ERROR_CODE
	{
		E_NONE,
		E_ERROR,
		E_SUCESS,
		E_TIMEOUT,
		E_NO_SOCKET
	};

	virtual void DidReadCompleted(unsigned int uBytes, ERROR_CODE error){};
	virtual void DidWriteCompleted(unsigned int uBytes, ERROR_CODE error){};
	virtual void DidConnected(ERROR_CODE error){};
#endif

   
};


enum ENUM_RWFLAG
{
	WAIT_FOR_READ = 1, WAIT_FOR_WRITE = 2
};

#ifdef USE_BOOST_ASIO


class CSocketUtil
{
protected:

	boost::asio::ip::tcp::socket* m_pSocket;
	boost::asio::deadline_timer* m_pConnectTimer;
    boost::asio::deadline_timer* m_pWriteTimer;
	boost::asio::io_service* m_pIOServer;	//// 所有asio类都需要io_service对象

    boost::thread *m_pThread;
    
	bool m_bWriteCompleted;
	bool m_bReadCompleted;

	CSocketUtilDelegate* m_pDelegate;

protected:

	void OnConnecting(const boost::system::error_code& err);
	void OnConnectedTimeout(const boost::system::error_code& error);
    
	void OnWriteCompleted(const boost::system::error_code& err, size_t bytes_transferred);
    void OnWriteTimeout(const boost::system::error_code& error);
    
	void OnReadCompleted(const boost::system::error_code& err, size_t bytes_transferred);

    
	//int ConnectTo(char *sConnAddr, int iPort);
    
public:

	CSocketUtil();
	~CSocketUtil();

	int Create(void);
	void Close(void);

	int ConnectTo(char *sConnAddr, int iPort, int iOutTime);

	// 只能一条一条的写
	int Write(char *pBuff, int iLen, int iTimeOut);

	// 只能一条一条的读
	int Read(char *pBuff, int iLen, int iTimeOut);
	
	int CanWrite(void);
	int CanRead(void);

	void SetDelegate(CSocketUtilDelegate* pDelegate){m_pDelegate = pDelegate;};

	void Update(void);

};

#else

class CSocketUtil
{
private:
	int m_iSocketID; //socket句柄
	int m_iReadWriteMode; //socket读写模式(0--不限时,1--select方式超时,2--alarm方式超时)
	struct sockaddr_in m_strAddrIn; // socket addr
	time_t m_btim;
    CSocketUtilDelegate *m_delegate;

private:

	/******************************************************************************************************************
	 *       函数名称:     selectTest
	 *       函数描述:
	 *       输入参数:     iMaxTime
	 *                    iWaitfor
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int selectTest(int iMaxTime, int iWaitfor);

	/******************************************************************************************************************
	 *       函数名称:     pollInterval
	 *       函数描述:
	 *       输入参数:     iWf
	 *                    iTimeOut
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int pollInterval(int iWf, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     ReadBySelect
	 *       函数描述:
	 *       输入参数:     sReadBuff
	 *                    iTimeOut
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int ReadBySelect(char *sReadBuff, int iLen, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     WriteBySelect
	 *       函数描述:
	 *       输入参数:     sWriteBuff
	 *                    iBuffSize
	 *                    iTimeOut
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int WriteBySelect(char *sWriteBuff, int iCount, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     ReadByAlarm
	 *       函数描述:
	 *       输入参数:     sReadBuff
	 *                    iTimeOut
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int ReadByAlarm(char *sReadBuff, int iLen, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     WriteByAlarm
	 *       函数描述:
	 *       输入参数:     sWriteBuff
	 *                    iBuffSize
	 *                    iTimeOut
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int WriteByAlarm(char *sWriteBuff, int iCount, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     ReadByNoTime
	 *       函数描述:     读socket数据
	 *       输入参数:     sReadData
	 *       输出参数:     无
	 *       返 回 值:     读取的长度
	 ******************************************************************************************************************/
	int ReadByNoTime(char *sReadData, int iLen);

	/******************************************************************************************************************
	 *       函数名称:     WriteByNoTime
	 *       函数描述:     发送数据到socket
	 *       输入参数:     sWriteData 数据缓冲区地址
	 *                    iCount   长度
	 *       输出参数:     无
	 *       返 回 值:     >0(发送长度)--成功, <0--失败
	 ******************************************************************************************************************/
	int WriteByNoTime(char *sSendData, int iCount);

	/******************************************************************************************************************
	 *       函数名称:     GetMsgBodySize
	 *       函数描述:     返回消息体长度
	 *       输入参数:     sDataBuff 数据缓冲区地址
	 *       输出参数:     无
	 *       返 回 值:     消息体长度
	 ******************************************************************************************************************/
	long GetMsgBodySize(char *sDataBuff);

public:
	int m_iSocketState; // 0-关闭, 1-正常
	char m_sLocalIP[31]; //本地IP：Port
	char m_sPeerIP[31]; //对端IP:Port

public:
	CSocketUtil();
	~CSocketUtil();

    inline void setDelegate(CSocketUtilDelegate *delegate){ m_delegate = delegate;}
	/******************************************************************************************************************
	 *       函数名称:     CreateSocket
	 *       函数描述:     创建一个socket
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     socket句柄
	 ******************************************************************************************************************/
	int CreateSocket();

	/******************************************************************************************************************
	 *       函数名称:     getSocketID
	 *       函数描述:     返回socket句柄
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:      socket句柄
	 ******************************************************************************************************************/
	int getSocketID();

	/******************************************************************************************************************
	 *       函数名称:     CancelSocket
	 *       函数描述:     关闭socket连接
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     无
	 ******************************************************************************************************************/
	void CancelSocket();

    
    int IsSocketClosed();

	/******************************************************************************************************************
	 *       函数名称:     ListenOn
	 *       函数描述:     设置socket, 在指定的地址和端口上监听
	 *       输入参数:     sListenAddr  监听地址
	 *                    iPort   监听端口
	 *                    iRange  排队数量
	 *       输出参数:     无
	 *       返 回 值:     0--成功,非0--失败
	 ******************************************************************************************************************/
	int ListenOn(char *sListenAddr, int iPort, int iRange);

	/******************************************************************************************************************
	 *       函数名称:     SetBlockMode
	 *       函数描述:     设置socket的阻塞模式
	 *       输入参数:     iSyncState   阻塞模式 (0--阻塞,非0--非阻塞)
	 *       输出参数:     无
	 *       返 回 值:     0--成功,非0--失败
	 ******************************************************************************************************************/
	int SetBlockMode(int iSyncState);

	/******************************************************************************************************************
	 *       函数名称:     AcceptSocket
	 *       函数描述:     接收请求返回一个对象
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     对象指针
	 ******************************************************************************************************************/
	CSocketUtil* AcceptSocket();

	/******************************************************************************************************************
	 *       函数名称:     ReadSocket
	 *       函数描述:     读socket数据
	 *       输入参数:     sReadData  数据缓冲区地址
	 *                     iTimeOut   超时时间
	 *       输出参数:     无
	 *       返 回 值:     读取的长度
	 ******************************************************************************************************************/
	int ReadSocket(char *sReadData, int iLen, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     SendSocket
	 *       函数描述:     发送数据到socket
	 *       输入参数:     sWriteData 数据缓冲区地址
	 *                     iCount   长度
	 *                     iTimeOut  超时时间
	 *       输出参数:     无
	 *       返 回 值:     >0(发送长度)--成功, <0--失败
	 ******************************************************************************************************************/
	int SendSocket(char *sSendData, int iCount, int iTimeOut);

	/******************************************************************************************************************
	 *       函数名称:     BindTo
	 *       函数描述:     绑定到某IP及端口
	 *       输入参数:     sConnAddr   地址
	 *                    iPort       端口
	 *       输出参数:     无
	 *       返 回 值:     0--成功, 非0--失败
	 ******************************************************************************************************************/
	int BindTo(char *sConnAddr, int iPort);

	/******************************************************************************************************************
	 *       函数名称:     ConnectTo
	 *       函数描述:     连接到服务器监听socket
	 *       输入参数:     sConnAddr   连接地址
	 *                    iPort       端口
	 *       输出参数:     无
	 *       返 回 值:     0--成功, 非0--失败
	 ******************************************************************************************************************/
	int ConnectTo(char *sConnAddr, int iPort);

	/******************************************************************************************************************
	 *       函数名称:     ConnectTo
	 *       函数描述:     连接到服务器监听socket(在指定超时时间内)
	 *       输入参数:     sConnAddr   连接地址
	 *                    iPort       端口
	 *                    iOutTime    超时时间(单位:毫秒)
	 *       输出参数:     无
	 *       返 回 值:     0:成功, -1:连接出错,-2:连接超时,-3:系统错
	 ******************************************************************************************************************/
	int ConnectTo(char *sConnAddr, int iPort, int iOutTime);

	/******************************************************************************************************************
	 *       函数名称:     DataArrival
	 *       函数描述:     是否有数据到达, 包括断开和错误消息
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     1--到达, 0--还没到达
	 ******************************************************************************************************************/
	int DataArrival(int T = 1);
    
    //micro seconds
    int CanWrite(int T);

	/******************************************************************************************************************
	 *       函数名称:     SocketBusy
	 *       函数描述:     是否可以向socket发送数据
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     1--可以发送, 0--不能发送
	 ******************************************************************************************************************/
	int SocketBusy();

	/******************************************************************************************************************
	 *       函数名称:     TimeOut
	 *       函数描述:     socket连接是否超时
	 *       输入参数:     iOutTime  超时时间
	 *                    iFlag
	 *       输出参数:     无
	 *       返 回 值:     1--超时, 0--不超时
	 ******************************************************************************************************************/
	int TimeOut(int iOutTime, int iFlag);

	/******************************************************************************************************************
	 *       函数名称:     SendSocketError
	 *       函数描述:     发送TCP错误信息
	 *       输入参数:     sHeadInfo
	 *                    iRetCode
	 *       输出参数:     无
	 *       返 回 值:     无
	 ******************************************************************************************************************/
	void SendSocketError(char *sHeadInfo, int iRetCode);

	/******************************************************************************************************************
	 *       函数名称:     GetSocketLocalIP
	 *       函数描述:     取得本地IP:port
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     sLocalIP  本地IP:port
	 ******************************************************************************************************************/
	char * GetSocketLocalIP();

	/******************************************************************************************************************
	 *       函数名称:     GetSocketPeerIP
	 *       函数描述:     取得对端IP:port
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     sPeerIP  对端IP:port
	 ******************************************************************************************************************/
	char * GetSocketPeerIP();

	/******************************************************************************************************************
	 *       函数名称:     SetReadWriteMode
	 *       函数描述:     设置socket读取模式(0--不限时,1--select方式超时,2--alarm方式超时)
	 *       输入参数:     iReadWriteMode
	 *       输出参数:     无
	 *       返 回 值:     无
	 ******************************************************************************************************************/
	void SetReadWriteMode(int iReadWriteMode);

	/******************************************************************************************************************
	 *       函数名称:     GetReadWriteMode
	 *       函数描述:     返回设置socket读取模式(0--不限时,1--select方式超时,2--alarm方式超时)
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:     socket读取模式
	 ******************************************************************************************************************/
	int GetReadWriteMode();

	/******************************************************************************************************************
	 *       函数名称:     GetReadBuffSize
	 *       函数描述:
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int GetReadBuffSize();

	/******************************************************************************************************************
	 *       函数名称:     SetReadBuffSize
	 *       函数描述:
	 *       输入参数:     iBuffsize
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int SetReadBuffSize(int iBuffsize);

	/******************************************************************************************************************
	 *       函数名称:     GetWriteBuffSize
	 *       函数描述:
	 *       输入参数:     无
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int GetWriteBuffSize();

	/******************************************************************************************************************
	 *       函数名称:     SetWriteBuffSize
	 *       函数描述:
	 *       输入参数:     iBuffsize
	 *       输出参数:     无
	 *       返 回 值:
	 ******************************************************************************************************************/
	int SetWriteBuffSize(int iBuffsize);

};

#endif // USE_BOOST_ASIO

#endif  /* __SOCKET_UTIL_H__  */

